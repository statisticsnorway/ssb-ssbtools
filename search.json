[{"path":"https://statisticsnorway.github.io/ssb-ssbtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"The MIT License","title":"The MIT License","text":"Copyright 2023 Bjørn-Helge Mevik Statistics Norway Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/SECURITY.html","id":null,"dir":"","previous_headings":"","what":"Security Policy","title":"Security Policy","text":"SSB takes security software products services seriously, includes source code repositories managed GitHub organization. believe responsible disclosure security vulnerabilities helps us ensure security privacy users.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/SECURITY.html","id":"reporting-a-vulnerability","dir":"","previous_headings":"","what":"Reporting a Vulnerability","title":"Security Policy","text":"believe found security vulnerability SSB’s GitHub repositories, please report us using Github Private vulnerability reporting tool.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Øyvind Langsrud. Author, maintainer. Daniel Lupp. Author. Bjørn-Helge Mevik. Contributor. Vidar Norstein Klungre. Reviewer. Statistics Norway. Copyright holder.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Langsrud Ø, Lupp D (2025). SSBtools: Algorithms Tools Tabular Statistics Hierarchical Computations. R package version 1.8.2, https://github.com/statisticsnorway/ssb-ssbtools.","code":"@Manual{,   title = {SSBtools: Algorithms and Tools for Tabular Statistics and Hierarchical Computations},   author = {Øyvind Langsrud and Daniel Lupp},   year = {2025},   note = {R package version 1.8.2},   url = {https://github.com/statisticsnorway/ssb-ssbtools}, }"},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Algorithms and Tools for Tabular Statistics and Hierarchical Computations","text":"Includes general data manipulation functions, algorithms statistical disclosure control (Langsrud, 2024) functions hierarchical computations sparse model matrices(Langsrud, 2023).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Algorithms and Tools for Tabular Statistics and Hierarchical Computations","text":"can install SSBtools CRAN Alternatively install GitHub bydevtools::install_github(\"statisticsnorway/SSBtools\") want test newest changes.","code":"install.packages(\"SSBtools\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/index.html","id":"some-of-the-functions","dir":"","previous_headings":"","what":"Some of the functions","title":"Algorithms and Tools for Tabular Statistics and Hierarchical Computations","text":"📌 See broader list available functions. Official version CRAN: https://cran.r-project.org/package=SSBtools","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AddLeadingZeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Add leading zeros to numbers while preserving other text — AddLeadingZeros","title":"Add leading zeros to numbers while preserving other text — AddLeadingZeros","text":"function created fix problems caused serious bug Excel. Editing csv files program causes leading zeros disappear.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AddLeadingZeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add leading zeros to numbers while preserving other text — AddLeadingZeros","text":"","code":"AddLeadingZeros(   codes,   places,   warningText = NULL,   viaFactor = TRUE,   nWarning = 6,   removeLeadingTrailingWhitespace = TRUE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AddLeadingZeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add leading zeros to numbers while preserving other text — AddLeadingZeros","text":"codes Character vector places Number places positive numbers. Minus sign extra warningText non-NULL, warning produced viaFactor TRUE, algorithm uses factor coding internally. nWarning Number elements written ... warnings. removeLeadingTrailingWhitespace Remove leading trailing whitespace","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AddLeadingZeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add leading zeros to numbers while preserving other text — AddLeadingZeros","text":"Character vector","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AddLeadingZeros.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add leading zeros to numbers while preserving other text — AddLeadingZeros","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AddLeadingZeros.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add leading zeros to numbers while preserving other text — AddLeadingZeros","text":"","code":"AddLeadingZeros(c(\"1\", \"ABC\", \"12345\", \" 23\", \"-8\", \"45 \", \" -9\", \" Agent \", \"007\",                    \"7 James Bond \"), 10) #>  [1] \"0000000001\"   \"ABC\"          \"0000012345\"   \"0000000023\"   \"-0000000008\"  #>  [6] \"0000000045\"   \"-0000000009\"  \"Agent\"        \"007\"          \"7 James Bond\" AddLeadingZeros(c(\"1\", \"ABC\", \"12345\", \" 23\", \"-8\", \"45 \", \" -9\", \" Agent \", \"007\",                    \"7 James Bond \"), 4) #>  [1] \"0001\"         \"ABC\"          \"12345\"        \"0023\"         \"-0008\"        #>  [6] \"0045\"         \"-0009\"        \"Agent\"        \"007\"          \"7 James Bond\" AddLeadingZeros(c(\"1\", \"ABC\", \"12345\", \" 23\", \"-8\", \"45 \", \" -9\", \" Agent \", \"007\",                    \"7 James Bond \"), 4, removeLeadingTrailingWhitespace = FALSE) #>  [1] \"0001\"          \"ABC\"           \"12345\"         \" 23\"           #>  [5] \"-0008\"         \"45 \"           \" -9\"           \" Agent \"       #>  [9] \"007\"           \"7 James Bond \" AddLeadingZeros(c(\"1\", \"ABC\", \"12345\", \" 23\", \"-8\", \"45 \", \" -9\", \" Agent \", \"007\",                    \"7 James Bond \"), 4, warningText = \"string changes\") #> Warning: Whitespace removed: string changes:  -9,  23,  Agent , 45 , 7 James Bond  #> Warning: string changes: -0008, -0009, 0001, 0023, 0045 #>  [1] \"0001\"         \"ABC\"          \"12345\"        \"0023\"         \"-0008\"        #>  [6] \"0045\"         \"-0009\"        \"Agent\"        \"007\"          \"7 James Bond\" AddLeadingZeros(c(\"1\", \"ABC\", \"12345\", \" 23\", \"-8\", \"45 \", \" -9\", \" Agent \", \"007\",                    \"7 James Bond \"), 4, warningText = \"\", nWarning = 2) #> Warning: Whitespace removed: :  -9,  23, ..., 7 James Bond  #> Warning: : -0008, -0009, ..., 0045 #>  [1] \"0001\"         \"ABC\"          \"12345\"        \"0023\"         \"-0008\"        #>  [6] \"0045\"         \"-0009\"        \"Agent\"        \"007\"          \"7 James Bond\""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/As_TsparseMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform to TsparseMatrix/dgTMatrix — As_TsparseMatrix","title":"Transform to TsparseMatrix/dgTMatrix — As_TsparseMatrix","text":"implement adaption needed Matrix ver. 1.4-2 since (, \"dgTMatrix\") longer allowed.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/As_TsparseMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform to TsparseMatrix/dgTMatrix — As_TsparseMatrix","text":"","code":"As_TsparseMatrix(from, do_drop0 = TRUE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/As_TsparseMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform to TsparseMatrix/dgTMatrix — As_TsparseMatrix","text":"matrix do_drop0 whether run drop0","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/As_TsparseMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform to TsparseMatrix/dgTMatrix — As_TsparseMatrix","text":"matrix. Virtual class TsparseMatrix. Class dgTMatrix expected.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/As_TsparseMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform to TsparseMatrix/dgTMatrix — As_TsparseMatrix","text":"function made replace (, \"dgTMatrix\") (drop0(), \"dgTMatrix\") SSBtools related packages.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/As_TsparseMatrix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Transform to TsparseMatrix/dgTMatrix — As_TsparseMatrix","text":"Matrix:::..via.virtual development version package Matrix (date 2022-08-13) used generate code.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoHierarchies.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure standardized coding of hierarchies — AutoHierarchies","title":"Ensure standardized coding of hierarchies — AutoHierarchies","text":"Automatic convert list hierarchies coded different ways standardized -coding","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoHierarchies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure standardized coding of hierarchies — AutoHierarchies","text":"","code":"AutoHierarchies(   hierarchies,   data = NULL,   total = \"Total\",   hierarchyVarNames = c(mapsFrom = \"mapsFrom\", mapsTo = \"mapsTo\", sign = \"sign\", level =     \"level\"),   combineHierarchies = TRUE,   unionComplement = FALSE,   autoLevel = TRUE,   autoNames = c(to = \"from\", parentCode = \"code\", parent = \"child\", root = \"leaf\"),   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoHierarchies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure standardized coding of hierarchies — AutoHierarchies","text":"hierarchies List hierarchies data Matrix data frame data containing codes relevant variables total Within AutoHierarchies: Vector total codes (possibly recycled) used running Hrc2DimList FindDimLists. hierarchyVarNames Variable names hierarchy tables HierarchyFix. However: level default required (see autoLevel ). sign variable missing, defaults variable 1s. Common '-' variable names recognized (see autoNames ). combineHierarchies Whether combine several hierarchies variable single hierarchy (see examples). unionComplement Logical vector Hierarchies2ModelMatrix. parameter use hierarchies combined. autoLevel TRUE (default), level computed automatically, ignoring input level variable. parameter passed HierarchyFix.. autoNames Named character vector '-' variable names automatically recognized. names need specified hierarchyVarNames. Thus, autoNames can serve alternative hierarchyVarNames. ... Extra unused parameters","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoHierarchies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure standardized coding of hierarchies — AutoHierarchies","text":"List hierarchies","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoHierarchies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ensure standardized coding of hierarchies — AutoHierarchies","text":"Input can -coded hierarchies, hierarchies/dimList sdcTable, TauArgus coded hierarchies formulas. Automatic coding data also supported. Output ready input HierarchyCompute. single string hierarchy input assumed total code. , hierarchy created simple hierarchy codes data sum total. consistence HierarchyCompute, codes \"rowFactor\" \"colFactor\" unchanged. empty string recoded  \"rowFactor\". special possibility include character vector(s) unnamed list element(s) hierarchies. elements character vector(s) must variable names within data. cause hierarchies created selected data columns running FindDimLists. Total coded can specified parameter total naming character vector. See examples.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoHierarchies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ensure standardized coding of hierarchies — AutoHierarchies","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoHierarchies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ensure standardized coding of hierarchies — AutoHierarchies","text":"","code":"# First, create different types of input z <- SSBtoolsData(\"sprt_emp_withEU\") yearFormula <- c(\"y_14 = 2014\", \"y_15_16 = y_all - y_14\", \"y_all = 2014 + 2015 + 2016\") yearHier <- Formula2Hierarchy(yearFormula) geoDimList <- FindDimLists(z[, c(\"geo\", \"eu\")], total = \"Europe\")[[1]] geoDimList2 <- FindDimLists(z[, c(\"geo\", \"eu\")])[[1]] geoHrc <- DimList2Hrc(geoDimList) ageHier <- SSBtoolsData(\"sprt_emp_ageHier\")  h1 <- AutoHierarchies(list(age = ageHier, geo = geoDimList, year = yearFormula)) h2 <- AutoHierarchies(list(age = \"Y15-64\", geo = geoHrc, year = yearHier), data = z,                        total = \"Europe\") h3 <- AutoHierarchies(list(age = \"Total\", geo = geoDimList2, year = \"Total\"), data = z) h4 <- FindHierarchies(z[, c(1, 2, 3, 5)]) h5 <- AutoHierarchies(list(age = \"Total\", geo = \"\", year = \"colFactor\"), data = z) identical(h1, h2) #> [1] TRUE identical(h3, h4) #> [1] TRUE  # Print the resulting hierarchies h1 # = h2 #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29 Y15-64    1     1 #> 2   Y30-64 Y15-64    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU Europe    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU Europe    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $year #>   mapsFrom  mapsTo sign level #> 1     2014    y_14    1     1 #> 2    y_all y_15_16    1     2 #> 3     y_14 y_15_16   -1     2 #> 4     2014   y_all    1     1 #> 5     2015   y_all    1     1 #> 6     2016   y_all    1     1 #>  h3 # = h4 #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29  Total    1     1 #> 2   Y30-64  Total    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $year #>   mapsFrom mapsTo sign level #> 1     2014  Total    1     1 #> 2     2015  Total    1     1 #> 3     2016  Total    1     1 #>  h5 #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29  Total    1     1 #> 2   Y30-64  Total    1     1 #>  #> $geo #> [1] \"rowFactor\" #>  #> $year #> [1] \"colFactor\" #>   FindHierarchies(z[, c(\"geo\", \"eu\", \"age\")]) #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29  Total    1     1 #> 2   Y30-64  Total    1     1 #>    # =====================================================================  #   Examples illustrating the combineHierarchies parameter # =====================================================================  # First, create data d <- SSBtoolsData(\"d2ws\")[1:3] d$isCounty1 <- \"NO\" d$isCounty1[d$county == \"county-1\"] <- \"YES\" d #>   region   county  size isCounty1 #> 1      A county-1   BIG       YES #> 2      B county-2   BIG        NO #> 3      C county-2   BIG        NO #> 4      D county-1 small       YES #> 5      E county-3 small        NO #> 6      F county-3 small        NO  # sdcTable coding showing two tree-shaped hierarchies dimList <- FindDimLists(d) dimList #> $region #>    levels    codes #> 1       @    Total #> 2      @@       NO #> 3     @@@ county-2 #> 4    @@@@        B #> 5    @@@@        C #> 6     @@@ county-3 #> 7    @@@@        E #> 8    @@@@        F #> 9      @@      YES #> 10    @@@ county-1 #> 11   @@@@        A #> 12   @@@@        D #>  #> $region #>   levels codes #> 1      @ Total #> 2     @@   BIG #> 3    @@@     A #> 4    @@@     B #> 5    @@@     C #> 6     @@ small #> 7    @@@     D #> 8    @@@     E #> 9    @@@     F #>   # Two tree-shaped hierarchies can still be seen  # Hierarchies with three and two levels hA <- AutoHierarchies(dimList, combineHierarchies = FALSE) hA #> $region #>    mapsFrom   mapsTo sign level #> 1        NO    Total    1     3 #> 2  county-2       NO    1     2 #> 3         B county-2    1     1 #> 4         C county-2    1     1 #> 5  county-3       NO    1     2 #> 6         E county-3    1     1 #> 7         F county-3    1     1 #> 8       YES    Total    1     3 #> 9  county-1      YES    1     2 #> 10        A county-1    1     1 #> 11        D county-1    1     1 #>  #> $region #>   mapsFrom mapsTo sign level #> 1      BIG  Total    1     2 #> 2        A    BIG    1     1 #> 3        B    BIG    1     1 #> 4        C    BIG    1     1 #> 5    small  Total    1     2 #> 6        D  small    1     1 #> 7        E  small    1     1 #> 8        F  small    1     1 #>   # A single hierarchy with only one level  # Contains the information needed to create a dummy matrix hB <- AutoHierarchies(dimList) hB #> $region #>    mapsFrom   mapsTo sign level #> 1         A county-1    1     1 #> 2         A      YES    1     1 #> 3         A    Total    1     1 #> 4         A      BIG    1     1 #> 5         B county-2    1     1 #> 6         B       NO    1     1 #> 7         B    Total    1     1 #> 8         B      BIG    1     1 #> 9         C county-2    1     1 #> 10        C       NO    1     1 #> 11        C    Total    1     1 #> 12        C      BIG    1     1 #> 13        D county-1    1     1 #> 14        D      YES    1     1 #> 15        D    Total    1     1 #> 16        D    small    1     1 #> 17        E county-3    1     1 #> 18        E       NO    1     1 #> 19        E    Total    1     1 #> 20        E    small    1     1 #> 21        F county-3    1     1 #> 22        F       NO    1     1 #> 23        F    Total    1     1 #> 24        F    small    1     1 #>   # Dummy matrices from the hierarchies DummyHierarchies(hA) #> $region #> 6 x 6 sparse Matrix of class \"dgCMatrix\" #>          A B C D E F #> county-1 1 . . 1 . . #> county-2 . 1 1 . . . #> county-3 . . . . 1 1 #> NO       . 1 1 . 1 1 #> YES      1 . . 1 . . #> Total    1 1 1 1 1 1 #>  #> $region #> 3 x 6 sparse Matrix of class \"dgCMatrix\" #>       A B C D E F #> BIG   1 1 1 . . . #> small . . . 1 1 1 #> Total 1 1 1 1 1 1 #>  DummyHierarchies(hB) #> $region #> 8 x 6 sparse Matrix of class \"dgCMatrix\" #>          A B C D E F #> BIG      1 1 1 . . . #> NO       . 1 1 . 1 1 #> Total    1 1 1 1 1 1 #> YES      1 . . 1 . . #> county-1 1 . . 1 . . #> county-2 . 1 1 . . . #> county-3 . . . . 1 1 #> small    . . . 1 1 1 #>    # =====================================================================  #   Special examples with character vector(s) as unnamed list elements # =====================================================================  # Same output as FindHierarchies above AutoHierarchies(list(c(\"geo\", \"eu\", \"age\")), data = z) #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29  Total    1     1 #> 2   Y30-64  Total    1     1 #>   # Now combined with a named list element  AutoHierarchies(list(year = yearHier, c(\"geo\", \"eu\", \"age\")), data = z) #> $year #>   mapsFrom  mapsTo sign level #> 1     2014    y_14    1     1 #> 2    y_all y_15_16    1     2 #> 3     y_14 y_15_16   -1     2 #> 4     2014   y_all    1     1 #> 5     2015   y_all    1     1 #> 6     2016   y_all    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29  Total    1     1 #> 2   Y30-64  Total    1     1 #>   # Total codes by unnamed list element as named character vector  AutoHierarchies(list(year = yearHier, c(Europe = \"geo\", \"eu\", All = \"age\")), data = z) #> $year #>   mapsFrom  mapsTo sign level #> 1     2014    y_14    1     1 #> 2    y_all y_15_16    1     2 #> 3     y_14 y_15_16   -1     2 #> 4     2014   y_all    1     1 #> 5     2015   y_all    1     1 #> 6     2016   y_all    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU Europe    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU Europe    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29    All    1     1 #> 2   Y30-64    All    1     1 #>   # Two types of year input. Total codes by using the parameter `total`.  AutoHierarchies(list(\"year\", year = yearHier, c(\"geo\", \"eu\", \"age\")), data = z,                  total = c(\"allYears\", \"unused\", \"Tot\")) #> $year #>   mapsFrom   mapsTo sign level #> 1     2014 allYears    1     1 #> 2     2014     y_14    1     1 #> 3     2014    y_all    1     1 #> 4     2015 allYears    1     1 #> 5     2015    y_all    1     1 #> 6     2015  y_15_16    1     1 #> 7     2016 allYears    1     1 #> 8     2016    y_all    1     1 #> 9     2016  y_15_16    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU    Tot    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU    Tot    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29    Tot    1     1 #> 2   Y30-64    Tot    1     1 #>   # Avoid combineHierarchies to see effect of each year input separately  # (even earlier return possible with `combineHierarchies = NA`) AutoHierarchies(list(\"year\", year = yearHier, c(\"geo\", \"eu\", \"age\")), data = z,                  total = c(\"allYears\", \"unused\", \"Tot\"), combineHierarchies = FALSE) #> $year #>   mapsFrom   mapsTo sign level #> 1     2014 allYears    1     1 #> 2     2015 allYears    1     1 #> 3     2016 allYears    1     1 #>  #> $year #>   mapsFrom  mapsTo sign level #> 1     2014    y_14    1     1 #> 2    y_all y_15_16    1     2 #> 3     y_14 y_15_16   -1     2 #> 4     2014   y_all    1     1 #> 5     2015   y_all    1     1 #> 6     2016   y_all    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU    Tot    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU    Tot    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29    Tot    1     1 #> 2   Y30-64    Tot    1     1 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoSplit.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating variables by splitting the elements of a character vector without needing a split string — AutoSplit","title":"Creating variables by splitting the elements of a character vector without needing a split string — AutoSplit","text":"Creating variables splitting elements character vector without needing split string","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoSplit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating variables by splitting the elements of a character vector without needing a split string — AutoSplit","text":"","code":"AutoSplit(   s,   split = NULL,   border = \"_\",   revBorder = FALSE,   noSplit = FALSE,   varNames = paste(\"var\", 1:100, sep = \"\"),   tryReverse = TRUE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoSplit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating variables by splitting the elements of a character vector without needing a split string — AutoSplit","text":"s character vector split Split string. NULL (default), automatic splitting without split string. border split character integer (move split) used exact split position unique. revBorder border integer split position moved side. noSplit splitting TRUE. varNames Variable names created variables (many ok) tryReverse TRUE, automatic method tries find variables splitting reversed strings.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoSplit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating variables by splitting the elements of a character vector without needing a split string — AutoSplit","text":"data frame s row names.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoSplit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creating variables by splitting the elements of a character vector without needing a split string — AutoSplit","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/AutoSplit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating variables by splitting the elements of a character vector without needing a split string — AutoSplit","text":"","code":"s <- c(\"A12-3-A-x\",\"A12-3-B-x\",\"B12-3-A-x\",\"B12-3-B-x\",        \"A12-3-A-y\",\"A12-3-B-y\",\"B12-3-A-y\",\"B12-3-B-y\") AutoSplit(s) #>             var1 var2 var3 #> A12-3-A-x A12-3-   A-    x #> A12-3-B-x A12-3-   B-    x #> B12-3-A-x B12-3-   A-    x #> B12-3-B-x B12-3-   B-    x #> A12-3-A-y A12-3-   A-    y #> A12-3-B-y A12-3-   B-    y #> B12-3-A-y B12-3-   A-    y #> B12-3-B-y B12-3-   B-    y AutoSplit(s,border=\"-\") #>           var1 var2 var3 #> A12-3-A-x  A12  3-A    x #> A12-3-B-x  A12  3-B    x #> B12-3-A-x  B12  3-A    x #> B12-3-B-x  B12  3-B    x #> A12-3-A-y  A12  3-A    y #> A12-3-B-y  A12  3-B    y #> B12-3-A-y  B12  3-A    y #> B12-3-B-y  B12  3-B    y AutoSplit(s,split=\"-\") #>           var1 var2 var3 var4 #> A12-3-A-x  A12    3    A    x #> A12-3-B-x  A12    3    B    x #> B12-3-A-x  B12    3    A    x #> B12-3-B-x  B12    3    B    x #> A12-3-A-y  A12    3    A    y #> A12-3-B-y  A12    3    B    y #> B12-3-A-y  B12    3    A    y #> B12-3-B-y  B12    3    B    y AutoSplit(s,border=1) #>           var1   var2 var3 #> A12-3-A-x   A1 2-3-A-    x #> A12-3-B-x   A1 2-3-B-    x #> B12-3-A-x   B1 2-3-A-    x #> B12-3-B-x   B1 2-3-B-    x #> A12-3-A-y   A1 2-3-A-    y #> A12-3-B-y   A1 2-3-B-    y #> B12-3-A-y   B1 2-3-A-    y #> B12-3-B-y   B1 2-3-B-    y AutoSplit(s,border=2) #>           var1  var2 var3 #> A12-3-A-x  A12 -3-A-    x #> A12-3-B-x  A12 -3-B-    x #> B12-3-A-x  B12 -3-A-    x #> B12-3-B-x  B12 -3-B-    x #> A12-3-A-y  A12 -3-A-    y #> A12-3-B-y  A12 -3-B-    y #> B12-3-A-y  B12 -3-A-    y #> B12-3-B-y  B12 -3-B-    y AutoSplit(s,border=2,revBorder=TRUE) #>           var1 var2 var3 #> A12-3-A-x A12-  3-A   -x #> A12-3-B-x A12-  3-B   -x #> B12-3-A-x B12-  3-A   -x #> B12-3-B-x B12-  3-B   -x #> A12-3-A-y A12-  3-A   -y #> A12-3-B-y A12-  3-B   -y #> B12-3-A-y B12-  3-A   -y #> B12-3-B-y B12-  3-B   -y AutoSplit(s,noSplit=TRUE) #>                var1 #> A12-3-A-x A12-3-A-x #> A12-3-B-x A12-3-B-x #> B12-3-A-x B12-3-A-x #> B12-3-B-x B12-3-B-x #> A12-3-A-y A12-3-A-y #> A12-3-B-y A12-3-B-y #> B12-3-A-y B12-3-A-y #> B12-3-B-y B12-3-B-y AutoSplit(s,varNames=c(\"A\",\"B\",\"C\",\"D\")) #>                A  B C #> A12-3-A-x A12-3- A- x #> A12-3-B-x A12-3- B- x #> B12-3-A-x B12-3- A- x #> B12-3-B-x B12-3- B- x #> A12-3-A-y A12-3- A- y #> A12-3-B-y A12-3- B- y #> B12-3-A-y B12-3- A- y #> B12-3-B-y B12-3- B- y"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CbindIdMatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine several data frames by using id variables to match rows — CbindIdMatch","title":"Combine several data frames by using id variables to match rows — CbindIdMatch","text":"Combine several data frames using id variables match rows","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CbindIdMatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine several data frames by using id variables to match rows — CbindIdMatch","text":"","code":"CbindIdMatch(   ...,   addName = names(x),   sep = \"_\",   idNames = sapply(x, function(x) names(x)[1]),   idNames1 = idNames,   addLast = FALSE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CbindIdMatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine several data frames by using id variables to match rows — CbindIdMatch","text":"... Several data frames several input parameters list data frames addName NULL vector strings used name columns according origin frame sep character string separate addName apply idNames Names id variable within data frame idNames1 Names variables first data frame correspond id variable within data frame addLast TRUE addName end","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CbindIdMatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine several data frames by using id variables to match rows — CbindIdMatch","text":"single data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CbindIdMatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine several data frames by using id variables to match rows — CbindIdMatch","text":"first data frame basis frames matched using id-variables. default id-variables first variable frame. Corresponding variables name first frame assumed. id-variable needed number rows one first frame. element idNames can set string zero length.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CbindIdMatch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine several data frames by using id variables to match rows — CbindIdMatch","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CbindIdMatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine several data frames by using id variables to match rows — CbindIdMatch","text":"","code":"zA <- data.frame(idA = 1:10, idB = rep(10 * (1:5), 2), idC = rep(c(100, 200), 5),                   idC2 = c(100, rep(200, 9)), idC3 = rep(100, 10),                   idD = 99, x = round(rnorm(10), 3), xA = round(runif(10), 2)) zB <- data.frame(idB = 10 * (1:5), x = round(rnorm(5), 3), xB = round(runif(5), 2)) zC <- data.frame(idC = c(100, 200), x = round(rnorm(2), 3), xC = round(runif(2), 2)) zD <- data.frame(idD = 99, x = round(rnorm(1), 3), xD = round(runif(1), 2)) CbindIdMatch(zA, zB, zC, zD) #> Warning: Column names not unique #>    idA idB idC idC2 idC3 idD      x   xA      x   xB     x   xC      x   xD #> 1    1  10 100  100  100  99  0.622 0.70 -0.914 0.97 0.079 0.71 -0.374 0.27 #> 2    2  20 200  200  100  99  1.148 0.69  0.468 0.39 0.770 0.07 -0.374 0.27 #> 3    3  30 100  200  100  99 -1.822 0.03  0.363 0.46 0.079 0.71 -0.374 0.27 #> 4    4  40 200  200  100  99 -0.247 0.23 -1.305 0.32 0.770 0.07 -0.374 0.27 #> 5    5  50 100  200  100  99 -0.244 0.30  0.738 0.17 0.079 0.71 -0.374 0.27 #> 6    6  10 200  200  100  99 -0.283 0.64 -0.914 0.97 0.770 0.07 -0.374 0.27 #> 7    7  20 100  200  100  99 -0.554 0.48  0.468 0.39 0.079 0.71 -0.374 0.27 #> 8    8  30 200  200  100  99  0.629 0.43  0.363 0.46 0.770 0.07 -0.374 0.27 #> 9    9  40 100  200  100  99  2.065 0.71 -1.305 0.32 0.079 0.71 -0.374 0.27 #> 10  10  50 200  200  100  99 -1.631 0.95  0.738 0.17 0.770 0.07 -0.374 0.27 CbindIdMatch(a = zA, b = zB, c = zC, d = zD, idNames = c(\"\", \"idB\", \"idC\", \"\")) #>    a_idA a_idB a_idC a_idC2 a_idC3 a_idD    a_x a_xA    b_x b_xB   c_x c_xC #> 1      1    10   100    100    100    99  0.622 0.70 -0.914 0.97 0.079 0.71 #> 2      2    20   200    200    100    99  1.148 0.69  0.468 0.39 0.770 0.07 #> 3      3    30   100    200    100    99 -1.822 0.03  0.363 0.46 0.079 0.71 #> 4      4    40   200    200    100    99 -0.247 0.23 -1.305 0.32 0.770 0.07 #> 5      5    50   100    200    100    99 -0.244 0.30  0.738 0.17 0.079 0.71 #> 6      6    10   200    200    100    99 -0.283 0.64 -0.914 0.97 0.770 0.07 #> 7      7    20   100    200    100    99 -0.554 0.48  0.468 0.39 0.079 0.71 #> 8      8    30   200    200    100    99  0.629 0.43  0.363 0.46 0.770 0.07 #> 9      9    40   100    200    100    99  2.065 0.71 -1.305 0.32 0.079 0.71 #> 10    10    50   200    200    100    99 -1.631 0.95  0.738 0.17 0.770 0.07 #>    d_idD    d_x d_xD #> 1     99 -0.374 0.27 #> 2     99 -0.374 0.27 #> 3     99 -0.374 0.27 #> 4     99 -0.374 0.27 #> 5     99 -0.374 0.27 #> 6     99 -0.374 0.27 #> 7     99 -0.374 0.27 #> 8     99 -0.374 0.27 #> 9     99 -0.374 0.27 #> 10    99 -0.374 0.27 CbindIdMatch(a = zA, b = zB, c = zC, d = zD, idNames1 = c(\"\", \"idB\", \"idC2\", \"\")) #>    a_idA a_idB a_idC a_idC2 a_idC3 a_idD    a_x a_xA    b_x b_xB   c_x c_xC #> 1      1    10   100    100    100    99  0.622 0.70 -0.914 0.97 0.079 0.71 #> 2      2    20   200    200    100    99  1.148 0.69  0.468 0.39 0.770 0.07 #> 3      3    30   100    200    100    99 -1.822 0.03  0.363 0.46 0.770 0.07 #> 4      4    40   200    200    100    99 -0.247 0.23 -1.305 0.32 0.770 0.07 #> 5      5    50   100    200    100    99 -0.244 0.30  0.738 0.17 0.770 0.07 #> 6      6    10   200    200    100    99 -0.283 0.64 -0.914 0.97 0.770 0.07 #> 7      7    20   100    200    100    99 -0.554 0.48  0.468 0.39 0.770 0.07 #> 8      8    30   200    200    100    99  0.629 0.43  0.363 0.46 0.770 0.07 #> 9      9    40   100    200    100    99  2.065 0.71 -1.305 0.32 0.770 0.07 #> 10    10    50   200    200    100    99 -1.631 0.95  0.738 0.17 0.770 0.07 #>    d_idD    d_x d_xD #> 1     99 -0.374 0.27 #> 2     99 -0.374 0.27 #> 3     99 -0.374 0.27 #> 4     99 -0.374 0.27 #> 5     99 -0.374 0.27 #> 6     99 -0.374 0.27 #> 7     99 -0.374 0.27 #> 8     99 -0.374 0.27 #> 9     99 -0.374 0.27 #> 10    99 -0.374 0.27 CbindIdMatch(a = zA, b = zB, c = zC, d = zD, idNames1 = c(\"\", \"idB\", \"idC3\", \"\")) #> Warning: All rows not used #>    a_idA a_idB a_idC a_idC2 a_idC3 a_idD    a_x a_xA    b_x b_xB   c_x c_xC #> 1      1    10   100    100    100    99  0.622 0.70 -0.914 0.97 0.079 0.71 #> 2      2    20   200    200    100    99  1.148 0.69  0.468 0.39 0.079 0.71 #> 3      3    30   100    200    100    99 -1.822 0.03  0.363 0.46 0.079 0.71 #> 4      4    40   200    200    100    99 -0.247 0.23 -1.305 0.32 0.079 0.71 #> 5      5    50   100    200    100    99 -0.244 0.30  0.738 0.17 0.079 0.71 #> 6      6    10   200    200    100    99 -0.283 0.64 -0.914 0.97 0.079 0.71 #> 7      7    20   100    200    100    99 -0.554 0.48  0.468 0.39 0.079 0.71 #> 8      8    30   200    200    100    99  0.629 0.43  0.363 0.46 0.079 0.71 #> 9      9    40   100    200    100    99  2.065 0.71 -1.305 0.32 0.079 0.71 #> 10    10    50   200    200    100    99 -1.631 0.95  0.738 0.17 0.079 0.71 #>    d_idD    d_x d_xD #> 1     99 -0.374 0.27 #> 2     99 -0.374 0.27 #> 3     99 -0.374 0.27 #> 4     99 -0.374 0.27 #> 5     99 -0.374 0.27 #> 6     99 -0.374 0.27 #> 7     99 -0.374 0.27 #> 8     99 -0.374 0.27 #> 9     99 -0.374 0.27 #> 10    99 -0.374 0.27 CbindIdMatch(zA, zB, zC, zD, addName = c(\"\", \"bbb\", \"ccc\", \"ddd\"), sep = \".\", addLast = TRUE) #>    idA idB idC idC2 idC3 idD      x   xA  x.bbb xB.bbb x.ccc xC.ccc  x.ddd #> 1    1  10 100  100  100  99  0.622 0.70 -0.914   0.97 0.079   0.71 -0.374 #> 2    2  20 200  200  100  99  1.148 0.69  0.468   0.39 0.770   0.07 -0.374 #> 3    3  30 100  200  100  99 -1.822 0.03  0.363   0.46 0.079   0.71 -0.374 #> 4    4  40 200  200  100  99 -0.247 0.23 -1.305   0.32 0.770   0.07 -0.374 #> 5    5  50 100  200  100  99 -0.244 0.30  0.738   0.17 0.079   0.71 -0.374 #> 6    6  10 200  200  100  99 -0.283 0.64 -0.914   0.97 0.770   0.07 -0.374 #> 7    7  20 100  200  100  99 -0.554 0.48  0.468   0.39 0.079   0.71 -0.374 #> 8    8  30 200  200  100  99  0.629 0.43  0.363   0.46 0.770   0.07 -0.374 #> 9    9  40 100  200  100  99  2.065 0.71 -1.305   0.32 0.079   0.71 -0.374 #> 10  10  50 200  200  100  99 -1.631 0.95  0.738   0.17 0.770   0.07 -0.374 #>    xD.ddd #> 1    0.27 #> 2    0.27 #> 3    0.27 #> 4    0.27 #> 5    0.27 #> 6    0.27 #> 7    0.27 #> 8    0.27 #> 9    0.27 #> 10   0.27 try(CbindIdMatch(X = zA, Y = zA[, 4:5], Z = zC, idNames = NULL)) # Error #> Error in CbindIdMatch(X = zA, Y = zA[, 4:5], Z = zC, idNames = NULL) :  #>   Element of idNames/idNames1 missing when needed CbindIdMatch(X = zA, Y = zA[, 4:5], Z = zD, idNames = NULL)      # Ok since equal NROW or NROW==1 #>    X_idA X_idB X_idC X_idC2 X_idC3 X_idD    X_x X_xA Y_idC2 Y_idC3 Z_idD    Z_x #> 1      1    10   100    100    100    99  0.622 0.70    100    100    99 -0.374 #> 2      2    20   200    200    100    99  1.148 0.69    200    100    99 -0.374 #> 3      3    30   100    200    100    99 -1.822 0.03    200    100    99 -0.374 #> 4      4    40   200    200    100    99 -0.247 0.23    200    100    99 -0.374 #> 5      5    50   100    200    100    99 -0.244 0.30    200    100    99 -0.374 #> 6      6    10   200    200    100    99 -0.283 0.64    200    100    99 -0.374 #> 7      7    20   100    200    100    99 -0.554 0.48    200    100    99 -0.374 #> 8      8    30   200    200    100    99  0.629 0.43    200    100    99 -0.374 #> 9      9    40   100    200    100    99  2.065 0.71    200    100    99 -0.374 #> 10    10    50   200    200    100    99 -1.631 0.95    200    100    99 -0.374 #>    Z_xD #> 1  0.27 #> 2  0.27 #> 3  0.27 #> 4  0.27 #> 5  0.27 #> 6  0.27 #> 7  0.27 #> 8  0.27 #> 9  0.27 #> 10 0.27 CbindIdMatch(list(a = zA, b = zB, c = zC, d = zD))               # List is alternative input #>    a_idA a_idB a_idC a_idC2 a_idC3 a_idD    a_x a_xA    b_x b_xB   c_x c_xC #> 1      1    10   100    100    100    99  0.622 0.70 -0.914 0.97 0.079 0.71 #> 2      2    20   200    200    100    99  1.148 0.69  0.468 0.39 0.770 0.07 #> 3      3    30   100    200    100    99 -1.822 0.03  0.363 0.46 0.079 0.71 #> 4      4    40   200    200    100    99 -0.247 0.23 -1.305 0.32 0.770 0.07 #> 5      5    50   100    200    100    99 -0.244 0.30  0.738 0.17 0.079 0.71 #> 6      6    10   200    200    100    99 -0.283 0.64 -0.914 0.97 0.770 0.07 #> 7      7    20   100    200    100    99 -0.554 0.48  0.468 0.39 0.079 0.71 #> 8      8    30   200    200    100    99  0.629 0.43  0.363 0.46 0.770 0.07 #> 9      9    40   100    200    100    99  2.065 0.71 -1.305 0.32 0.079 0.71 #> 10    10    50   200    200    100    99 -1.631 0.95  0.738 0.17 0.770 0.07 #>       d_x d_xD #> 1  -0.374 0.27 #> 2  -0.374 0.27 #> 3  -0.374 0.27 #> 4  -0.374 0.27 #> 5  -0.374 0.27 #> 6  -0.374 0.27 #> 7  -0.374 0.27 #> 8  -0.374 0.27 #> 9  -0.374 0.27 #> 10 -0.374 0.27"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CharacterDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"CharacterDataFrame — CharacterDataFrame","title":"CharacterDataFrame — CharacterDataFrame","text":"CharacterDataFrame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CharacterDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CharacterDataFrame — CharacterDataFrame","text":"","code":"CharacterDataFrame(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CharacterDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CharacterDataFrame — CharacterDataFrame","text":"x data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CharacterDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CharacterDataFrame — CharacterDataFrame","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CharacterDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CharacterDataFrame — CharacterDataFrame","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CheckInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Checking function inputs — CheckInput","title":"Checking function inputs — CheckInput","text":"input vector (length one unless okSeveral TRUE) checked.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CheckInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checking function inputs — CheckInput","text":"","code":"CheckInput(   x,   alt = NULL,   min = NULL,   max = NULL,   type = \"character\",   data = NULL,   okSeveral = FALSE,   okNULL = FALSE,   okNA = FALSE,   okDuplicates = is.null(alt) & !(type %in% c(\"varName\", \"varNr\", \"varNrName\")) )  check_input(   x,   alt = NULL,   min = NULL,   max = NULL,   type = \"character\",   data = NULL,   okSeveral = FALSE,   okNULL = FALSE,   okNA = FALSE,   okDuplicates = is.null(alt) & !(type %in% c(\"varName\", \"varNr\", \"varNrName\")) )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CheckInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checking function inputs — CheckInput","text":"x Input vector checked alt NULL vector allowed values min NULL minimum value (type numeric integer) max NULL maximum value (type numeric integer) type One : \"character\", \"numeric\", \"integer\", \"logical\", \"varName\", \"varNr\", \"varNrName\". numeric/integer checked exact class, whether value fit class. Also see data . data data frame matrix. type varNames, x checked colnames(data). type varNr, x checked column numbers. type varNrName, x can either column numbers column names. okSeveral TRUE, length(x)>1 allowed okNULL TRUE, NULL allowed okNA TRUE, NA allowed okDuplicates TRUE, duplicated values allowed. Default TRUE alt NULL type refer column(s) data.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CheckInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checking function inputs — CheckInput","text":"x checked according input parameters. x wrong error produced appropriate text. function originally created 2016 included internal packages Statistics Norway (SSB). Due widespread use, beneficial include CRAN package.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CheckInput.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Checking function inputs — CheckInput","text":"check_input CheckInput identical","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CheckInput.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Checking function inputs — CheckInput","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CheckInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checking function inputs — CheckInput","text":"","code":"a <- c(\"no\", \"yes\") b <- c(3.14, 4, 5) z <- data.frame(A = a, B = b[1:2], C = TRUE)  # Lines causing error are embedded in 'try'  try(CheckInput(a, type = \"character\")) #> Error in CheckInput(a, type = \"character\") :  #>   a : Input must be of length 1 CheckInput(a, type = \"character\", alt = c(\"no\", \"yes\", \"dontknow\"), okSeveral = TRUE) #> NULL try(CheckInput(\"yesno\", type = \"character\", alt = c(\"no\", \"yes\", \"dontknow\"))) #> Error in CheckInput(\"yesno\", type = \"character\", alt = c(\"no\", \"yes\",  :  #>   \"yesno\" : Input must be in: no, yes, dontknow CheckInput(a[1], type = \"character\", alt = c(\"no\", \"yes\", \"dontknow\")) #> NULL  try(CheckInput(b, type = \"integer\", max = 100, okSeveral = TRUE)) #> Error in CheckInput(b, type = \"integer\", max = 100, okSeveral = TRUE) :  #>   b : Input is not in accordance with integer try(CheckInput(b, type = \"numeric\", min = 4, okSeveral = TRUE)) #> Error in CheckInput(b, type = \"numeric\", min = 4, okSeveral = TRUE) :  #>   b : Input must be within the interval [ 4 , Inf ] CheckInput(b, type = \"numeric\", max = 100, okSeveral = TRUE) #> NULL try(CheckInput(b, type = \"numeric\", alt = 1:10, okSeveral = TRUE)) #> Error in CheckInput(b, type = \"numeric\", alt = 1:10, okSeveral = TRUE) :  #>   b : Input must be in: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 CheckInput(b[2], type = \"numeric\", alt = 1:10) #> NULL  try(CheckInput(\"TRUE\", type = \"logical\")) #> Error in CheckInput(\"TRUE\", type = \"logical\") :  #>   \"TRUE\" : Input must be logical CheckInput(TRUE, type = \"logical\") #> NULL  try(CheckInput(\"A\", type = \"varName\")) #> Error in CheckInput(\"A\", type = \"varName\") : \"A\" : data missing CheckInput(\"A\", type = \"varName\", data = z) #> NULL CheckInput(c(\"A\", \"B\"), type = \"varNrName\", data = z, okSeveral = TRUE) #> NULL try(CheckInput(\"ABC\", type = \"varNrName\", data = z)) #> Error in CheckInput(\"ABC\", type = \"varNrName\", data = z) :  #>   \"ABC\" : Input must be in: A, B, C try(CheckInput(5, type = \"varNrName\", data = z)) #> Error in CheckInput(5, type = \"varNrName\", data = z) :  #>   5 : Input must be within the interval [ 1 , 3 ] CheckInput(3, type = \"varNr\", data = z) #> NULL CheckInput(2:3, type = \"varNr\", data = z, okSeveral = TRUE) #> NULL"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CrossCodeFrames.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross codes in data frames — CrossCodeFrames","title":"Cross codes in data frames — CrossCodeFrames","text":"Cross codes data frames","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CrossCodeFrames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross codes in data frames — CrossCodeFrames","text":"","code":"CrossCodeFrames(codeFrame1, codeFrame2, useMatrixToDataFrame = TRUE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CrossCodeFrames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross codes in data frames — CrossCodeFrames","text":"codeFrame1 data frame codeFrame2 data frame useMatrixToDataFrame useMatrixToDataFrame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CrossCodeFrames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross codes in data frames — CrossCodeFrames","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/CrossCodeFrames.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cross codes in data frames — CrossCodeFrames","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataDummyHierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","title":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","text":"Create (signed) dummy matrix hierarcical mapping codes data","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataDummyHierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","text":"","code":"DataDummyHierarchy(dataVector, dummyHierarchy)  DataDummyHierarchies(data, dummyHierarchies, colNamesFromData = FALSE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataDummyHierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","text":"dataVector vector codes data dummyHierarchy Output DummyHierarchy data data dummyHierarchies Output DummyHierarchies colNamesFromData Column names data TRUE","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataDummyHierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","text":"sparse matrix. Column names taken dataVector (non-NULL) row names taken row names dummyHierarchy.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataDummyHierarchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","text":"DataDummyHierarchies user-friendly wrapper original function DataDummyHierarchy. colNamesFromData FALSE (default), function returns mapply(DataDummyHierarchy, data[names(dummyHierarchies)], dummyHierarchies).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataDummyHierarchy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataDummyHierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a (signed) dummy matrix for hierarcical mapping of codes in data — DataDummyHierarchy","text":"","code":"z <- SSBtoolsData(\"sprt_emp_withEU\")[1:9, ] hi <- FindHierarchies(z[, c(\"geo\", \"eu\", \"age\", \"year\")]) dhi <- DummyHierarchies(hi, inputInOutput = TRUE) DataDummyHierarchies(z, dhi, colNamesFromData = TRUE) #> $geo #> 6 x 9 sparse Matrix of class \"dgCMatrix\" #>          Spain Iceland Portugal Spain Iceland Portugal Spain Iceland Portugal #> Iceland      .       1        .     .       1        .     .       1        . #> Portugal     .       .        1     .       .        1     .       .        1 #> Spain        1       .        .     1       .        .     1       .        . #> EU           1       .        1     1       .        1     1       .        1 #> nonEU        .       1        .     .       1        .     .       1        . #> Total        1       1        1     1       1        1     1       1        1 #>  #> $age #> 3 x 9 sparse Matrix of class \"dgCMatrix\" #>        Y15-29 Y15-29 Y15-29 Y30-64 Y30-64 Y30-64 Y15-29 Y15-29 Y15-29 #> Y15-29      1      1      1      .      .      .      1      1      1 #> Y30-64      .      .      .      1      1      1      .      .      . #> Total       1      1      1      1      1      1      1      1      1 #>  #> $year #> 3 x 9 sparse Matrix of class \"dgCMatrix\" #>       2014 2014 2014 2014 2014 2014 2015 2015 2015 #> 2014     1    1    1    1    1    1    .    .    . #> 2015     .    .    .    .    .    .    1    1    1 #> Total    1    1    1    1    1    1    1    1    1 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataFrameToMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"DataFrameToMatrix — DataFrameToMatrix","title":"DataFrameToMatrix — DataFrameToMatrix","text":"DataFrameToMatrix","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataFrameToMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DataFrameToMatrix — DataFrameToMatrix","text":"","code":"DataFrameToMatrix(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataFrameToMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DataFrameToMatrix — DataFrameToMatrix","text":"x data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataFrameToMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DataFrameToMatrix — DataFrameToMatrix","text":"matrix","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DataFrameToMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DataFrameToMatrix — DataFrameToMatrix","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"DimList2Hierarchy — DimList2Hierarchy","title":"DimList2Hierarchy — DimList2Hierarchy","text":"hierarchy/dimList sdcTable -coded hierarchy","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DimList2Hierarchy — DimList2Hierarchy","text":"","code":"DimList2Hierarchy(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DimList2Hierarchy — DimList2Hierarchy","text":"x element dimList sdcTable","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DimList2Hierarchy — DimList2Hierarchy","text":"Data frame -coded hierarchy","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hierarchy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DimList2Hierarchy — DimList2Hierarchy","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DimList2Hierarchy — DimList2Hierarchy","text":"","code":"# First generate a dimList element  x <- FindDimLists(SSBtoolsData(\"sprt_emp_withEU\")[, c(\"geo\", \"eu\")], , total = \"Europe\")[[1]] x #>   levels    codes #> 1      @   Europe #> 2     @@       EU #> 3    @@@ Portugal #> 4    @@@    Spain #> 5     @@    nonEU #> 6    @@@  Iceland  DimList2Hierarchy(x) #>   mapsFrom mapsTo sign level #> 1       EU Europe    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU Europe    1     2 #> 5  Iceland  nonEU    1     1"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hrc.html","id":null,"dir":"Reference","previous_headings":"","what":"DimList2Hrc/Hrc2DimList — DimList2Hrc","title":"DimList2Hrc/Hrc2DimList — DimList2Hrc","text":"Conversion hierarchies/dimList sdcTable TauArgus coded hierarchies","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hrc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DimList2Hrc/Hrc2DimList — DimList2Hrc","text":"","code":"DimList2Hrc(dimList)  Hrc2DimList(hrc, total = \"Total\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hrc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DimList2Hrc/Hrc2DimList — DimList2Hrc","text":"dimList List data frames according specifications sdcTable hrc List character vectors total String used name totals.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hrc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DimList2Hrc/Hrc2DimList — DimList2Hrc","text":"See Arguments","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hrc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DimList2Hrc/Hrc2DimList — DimList2Hrc","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DimList2Hrc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DimList2Hrc/Hrc2DimList — DimList2Hrc","text":"","code":"# First generate dimList dimList <- FindDimLists(SSBtoolsData(\"sprt_emp_withEU\")[, c(\"geo\", \"eu\", \"age\")]) dimList #> $geo #>   levels    codes #> 1      @    Total #> 2     @@       EU #> 3    @@@ Portugal #> 4    @@@    Spain #> 5     @@    nonEU #> 6    @@@  Iceland #>  #> $age #>   levels  codes #> 1      @  Total #> 2     @@ Y15-29 #> 3     @@ Y30-64 #>  hrc <- DimList2Hrc(dimList) hrc #> $geo #> [1] \"EU\"        \"@Portugal\" \"@Spain\"    \"nonEU\"     \"@Iceland\"  #>  #> $age #> [1] \"Y15-29\" \"Y30-64\" #>  dimList2 <- Hrc2DimList(hrc) identical(dimList, dimList2) #> [1] TRUE"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyApply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to subsets defined by a dummy matrix — DummyApply","title":"Apply a function to subsets defined by a dummy matrix — DummyApply","text":"column, ,  matrix x zeros ones, output value equivalent FUN(y[x[, ] != 0]).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyApply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to subsets defined by a dummy matrix — DummyApply","text":"","code":"DummyApply(x, y, FUN = sum, simplify = TRUE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyApply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to subsets defined by a dummy matrix — DummyApply","text":"x (sparse) dummy matrix y Vector input values FUN function simplify Parameter aggregate. FALSE, list output ensured.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyApply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to subsets defined by a dummy matrix — DummyApply","text":"Vector output values matrix multiple outputs FUN  (see examples). List output also possible (ensured simplify = FALSE).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyApply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function to subsets defined by a dummy matrix — DummyApply","text":"dummy x FUN = sum, output equivalent z = t(x) %*% y.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyApply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to subsets defined by a dummy matrix — DummyApply","text":"","code":"z <- SSBtoolsData(\"sprt_emp_withEU\") z$age[z$age == \"Y15-29\"] <- \"young\" z$age[z$age == \"Y30-64\"] <- \"old\"  a <- ModelMatrix(z, formula = ~age + geo, crossTable = TRUE)  cbind(as.data.frame(a$crossTable),        sum1 = (Matrix::t(a$modelMatrix) %*% z$ths_per)[,1],       sum2 = DummyApply(a$modelMatrix, z$ths_per, sum),        max = DummyApply(a$modelMatrix, z$ths_per, max)) #>                  age      geo  sum1  sum2   max #> Total-Total    Total    Total 680.8 680.8 122.1 #> old-Total        old    Total 437.3 437.3 122.1 #> young-Total    young    Total 243.5 243.5  69.1 #> Total-Iceland  Total  Iceland  10.6  10.6   1.9 #> Total-Portugal Total Portugal 108.8 108.8  25.8 #> Total-Spain    Total    Spain 561.4 561.4 122.1         DummyApply(a$modelMatrix, z$ths_per, range) #>      [,1]  [,2] #> [1,]  1.5 122.1 #> [2,]  1.5 122.1 #> [3,]  1.8  69.1 #> [4,]  1.5   1.9 #> [5,] 11.6  25.8 #> [6,] 63.4 122.1 DummyApply(a$modelMatrix, z$ths_per, range, simplify = FALSE)   #> [[1]] #> [1]   1.5 122.1 #>  #> [[2]] #> [1]   1.5 122.1 #>  #> [[3]] #> [1]  1.8 69.1 #>  #> [[4]] #> [1] 1.5 1.9 #>  #> [[5]] #> [1] 11.6 25.8 #>  #> [[6]] #> [1]  63.4 122.1 #>   a$modelMatrix[, c(3, 5)] <- 0   # Introduce two empty columns.  DummyApply(a$modelMatrix, z$ths_per, function(x){    c(min = min(x),      max = max(x),      mean = mean(x),      median = median(x),      n = length(x))})    #> Warning: no non-missing arguments to min; returning Inf #> Warning: no non-missing arguments to max; returning -Inf #>       min   max      mean median  n #> [1,]  1.5 122.1 37.822222  17.20 18 #> [2,]  1.5 122.1 48.588889  24.30  9 #> [3,]  Inf  -Inf       NaN     NA  0 #> [4,]  1.5   1.9  1.766667   1.85  6 #> [5,]  Inf  -Inf       NaN     NA  0 #> [6,] 63.4 122.1 93.566667  94.35  6      DummyApply(a$modelMatrix, z$ths_per, function(x) x, simplify = FALSE)           #> [[1]] #>  [1]  66.9   1.8  11.6 120.3   1.5  20.2  63.4   1.9  14.2 119.6   1.6  24.3 #> [13]  69.1   1.9  12.7 122.1   1.9  25.8 #>  #> [[2]] #> [1] 120.3   1.5  20.2 119.6   1.6  24.3 122.1   1.9  25.8 #>  #> [[3]] #> numeric(0) #>  #> [[4]] #> [1] 1.8 1.5 1.9 1.6 1.9 1.9 #>  #> [[5]] #> numeric(0) #>  #> [[6]] #> [1]  66.9 120.3  63.4 119.6  69.1 122.1 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyDuplicated.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicated columns in dummy matrix — DummyDuplicated","title":"Duplicated columns in dummy matrix — DummyDuplicated","text":"algorithm based crossprod(x) crossprod(x, u) u vector random numbers","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyDuplicated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicated columns in dummy matrix — DummyDuplicated","text":"","code":"DummyDuplicated(x, idx = FALSE, rows = FALSE, rnd = FALSE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyDuplicated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duplicated columns in dummy matrix — DummyDuplicated","text":"x matrix idx Indices returned TRUE rows Duplicated rows instead TRUE rnd Algorithm based cross product random numbers TRUE (dummy matrix required)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyDuplicated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duplicated columns in dummy matrix — DummyDuplicated","text":"Logical vectors specifying duplicated columns vector indices (first match)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyDuplicated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Duplicated columns in dummy matrix — DummyDuplicated","text":"efficiency default algorithm depends sparsity crossprod(x). random values generated locally within function without affecting random value stream R.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyDuplicated.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Duplicated columns in dummy matrix — DummyDuplicated","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyDuplicated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duplicated columns in dummy matrix — DummyDuplicated","text":"","code":"x <- cbind(1, rbind(diag(2), diag(2)), diag(4)[, 1:2]) z <- Matrix::Matrix(x[c(1:4, 2:3), c(1, 2, 1:5, 5, 2)])  DummyDuplicated(z) #> [1] FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE which(DummyDuplicated(z, rows = TRUE)) #> [1] 5 6  # Four ways to obtain the same result DummyDuplicated(z, idx = TRUE) #> [1] 1 2 1 2 5 6 7 7 2 DummyDuplicated(z, idx = TRUE, rnd = TRUE) #> [1] 1 2 1 2 5 6 7 7 2 DummyDuplicated(Matrix::t(z), idx = TRUE, rows = TRUE) #> [1] 1 2 1 2 5 6 7 7 2 DummyDuplicated(Matrix::t(z), idx = TRUE, rows = TRUE, rnd = TRUE) #> [1] 1 2 1 2 5 6 7 7 2  # The unique values in four ways  which(!DummyDuplicated(z), ) #> [1] 1 2 5 6 7 which(!DummyDuplicated(z, rnd = TRUE)) #> [1] 1 2 5 6 7 which(!DummyDuplicated(Matrix::t(z), rows = TRUE)) #> [1] 1 2 5 6 7 which(!DummyDuplicated(Matrix::t(z), rows = TRUE, rnd = TRUE)) #> [1] 1 2 5 6 7"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"matrix mapping input codes (columns) output codes (rows) created. elements matrix specify columns contribute rows.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"","code":"DummyHierarchy(   mapsFrom,   mapsTo,   sign,   level,   mapsInput = NULL,   inputInOutput = FALSE,   keepCodes = mapsFrom[integer(0)],   unionComplement = FALSE,   reOrder = FALSE )  DummyHierarchies(   hierarchies,   data = NULL,   inputInOutput = FALSE,   unionComplement = FALSE,   reOrder = FALSE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"mapsFrom Character vector hierarchy table mapsTo Character vector hierarchy table sign Numeric vector either 1 -1 hierarchy table level Numeric vector hierarchy table mapsInput codes mapsFrom mapsTo (created automatically NULL) possibly codes input data. inputInOutput FALSE output rows represent codes mapsTo keepCodes prevent codes removed inputInOutput = FALSE unionComplement TRUE, sign means union complement instead addition subtraction (see note) reOrder TRUE (FALSE default) output codes ordered differently, similar usual model matrix ordering. hierarchies List hierarchies data data","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"sparse matrix row column names","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"DummyHierarchies user-friendly wrapper original function DummyHierarchy. , logical input parameters vectors (possibly recycled). mapsInput keepCodes can supplied attributes. mapsInput generated data non-NULL.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"unionComplement = FALSE (default), sign mapping specifies contribution addition subtraction. Thus, values one negative values output can occur. unionComplement = TRUE,  positive treated union negative complement. 0 1 possible elements output matrix.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/DummyHierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converting hierarchy specifications to a (signed) dummy matrix — DummyHierarchy","text":"","code":"# A hierarchy table h <- SSBtoolsData(\"FIFA2018ABCD\")  DummyHierarchy(h$mapsFrom, h$mapsTo, h$sign, h$level) #> 9 x 16 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 16 column names ‘Argentina’, ‘Australia’, ‘Croatia’ ... ]] #>                                             #> Africa      . . . . 1 . . . 1 1 . . . . . . #> America     1 . . . . . . . . . 1 . . . . 1 #> Asia        . . . . . . . 1 . . . . . 1 . . #> Europe      . . 1 1 . 1 1 . . . . 1 1 . 1 . #> Oceania     . 1 . . . . . . . . . . . . . . #> nonEU       . . . . . . 1 . . . . . 1 . . . #> nonSchengen . . 1 . . . . . . . . . 1 . . . #> EU          . . 1 1 . 1 0 . . . . 1 0 . 1 . #> Schengen    . . 0 1 . 1 1 . . . . 1 0 . 1 . DummyHierarchy(h$mapsFrom, h$mapsTo, h$sign, h$level, inputInOutput = TRUE) #> 25 x 16 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 16 column names ‘Argentina’, ‘Australia’, ‘Croatia’ ... ]] #>                                              #> Argentina    1 . . . . . . . . . . . . . . . #> Australia    . 1 . . . . . . . . . . . . . . #> Croatia      . . 1 . . . . . . . . . . . . . #> Denmark      . . . 1 . . . . . . . . . . . . #> Egypt        . . . . 1 . . . . . . . . . . . #> France       . . . . . 1 . . . . . . . . . . #> Iceland      . . . . . . 1 . . . . . . . . . #> Iran         . . . . . . . 1 . . . . . . . . #> Morocco      . . . . . . . . 1 . . . . . . . #> Nigeria      . . . . . . . . . 1 . . . . . . #> Peru         . . . . . . . . . . 1 . . . . . #> Portugal     . . . . . . . . . . . 1 . . . . #> Russia       . . . . . . . . . . . . 1 . . . #> Saudi Arabia . . . . . . . . . . . . . 1 . . #> Spain        . . . . . . . . . . . . . . 1 . #> Uruguay      . . . . . . . . . . . . . . . 1 #> Africa       . . . . 1 . . . 1 1 . . . . . . #> America      1 . . . . . . . . . 1 . . . . 1 #> Asia         . . . . . . . 1 . . . . . 1 . . #> Europe       . . 1 1 . 1 1 . . . . 1 1 . 1 . #> Oceania      . 1 . . . . . . . . . . . . . . #> nonEU        . . . . . . 1 . . . . . 1 . . . #> nonSchengen  . . 1 . . . . . . . . . 1 . . . #> EU           . . 1 1 . 1 0 . . . . 1 0 . 1 . #> Schengen     . . 0 1 . 1 1 . . . . 1 0 . 1 . DummyHierarchy(h$mapsFrom, h$mapsTo, h$sign, h$level, keepCodes = c(\"Portugal\", \"Spain\")) #> 11 x 16 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 16 column names ‘Argentina’, ‘Australia’, ‘Croatia’ ... ]] #>                                             #> Portugal    . . . . . . . . . . . 1 . . . . #> Spain       . . . . . . . . . . . . . . 1 . #> Africa      . . . . 1 . . . 1 1 . . . . . . #> America     1 . . . . . . . . . 1 . . . . 1 #> Asia        . . . . . . . 1 . . . . . 1 . . #> Europe      . . 1 1 . 1 1 . . . . 1 1 . 1 . #> Oceania     . 1 . . . . . . . . . . . . . . #> nonEU       . . . . . . 1 . . . . . 1 . . . #> nonSchengen . . 1 . . . . . . . . . 1 . . . #> EU          . . 1 1 . 1 0 . . . . 1 0 . 1 . #> Schengen    . . 0 1 . 1 1 . . . . 1 0 . 1 .  # Extend the hierarchy table to illustrate the effect of unionComplement h2 <- rbind(data.frame(mapsFrom = c(\"EU\", \"Schengen\"), mapsTo = \"EUandSchengen\",                         sign = 1, level = 3), h)  DummyHierarchy(h2$mapsFrom, h2$mapsTo, h2$sign, h2$level) #> 10 x 16 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 16 column names ‘Argentina’, ‘Australia’, ‘Croatia’ ... ]] #>                                               #> Africa        . . . . 1 . . . 1 1 . . . . . . #> America       1 . . . . . . . . . 1 . . . . 1 #> Asia          . . . . . . . 1 . . . . . 1 . . #> Europe        . . 1 1 . 1 1 . . . . 1 1 . 1 . #> Oceania       . 1 . . . . . . . . . . . . . . #> nonEU         . . . . . . 1 . . . . . 1 . . . #> nonSchengen   . . 1 . . . . . . . . . 1 . . . #> EU            . . 1 1 . 1 0 . . . . 1 0 . 1 . #> Schengen      . . 0 1 . 1 1 . . . . 1 0 . 1 . #> EUandSchengen . . 1 2 . 2 1 . . . . 2 0 . 2 . DummyHierarchy(h2$mapsFrom, h2$mapsTo, h2$sign, h2$level, unionComplement = TRUE) #> 10 x 16 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 16 column names ‘Argentina’, ‘Australia’, ‘Croatia’ ... ]] #>                                               #> Africa        . . . . 1 . . . 1 1 . . . . . . #> America       1 . . . . . . . . . 1 . . . . 1 #> Asia          . . . . . . . 1 . . . . . 1 . . #> Europe        . . 1 1 . 1 1 . . . . 1 1 . 1 . #> Oceania       . 1 . . . . . . . . . . . . . . #> nonEU         . . . . . . 1 . . . . . 1 . . . #> nonSchengen   . . 1 . . . . . . . . . 1 . . . #> EU            . . 1 1 . 1 0 . . . . 1 0 . 1 . #> Schengen      . . 0 1 . 1 1 . . . . 1 0 . 1 . #> EUandSchengen . . 1 1 . 1 1 . . . . 1 0 . 1 .  # Extend mapsInput - leading to zero columns. DummyHierarchy(h$mapsFrom, h$mapsTo, h$sign, h$level,                mapsInput = c(h$mapsFrom[!(h$mapsFrom %in% h$mapsTo)], \"Norway\", \"Finland\")) #> 9 x 18 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 18 column names ‘Argentina’, ‘Australia’, ‘Croatia’ ... ]] #>                                                 #> Africa      . . . . 1 . . . . 1 1 . . . . . . . #> America     1 . . . . . . . . . . . 1 . . . . 1 #> Asia        . . . . . . . . 1 . . . . . . 1 . . #> Europe      . . 1 1 . . 1 1 . . . . . 1 1 . 1 . #> Oceania     . 1 . . . . . . . . . . . . . . . . #> nonEU       . . . . . . . 1 . . . . . . 1 . . . #> nonSchengen . . 1 . . . . . . . . . . . 1 . . . #> EU          . . 1 1 . . 1 0 . . . . . 1 0 . 1 . #> Schengen    . . 0 1 . . 1 1 . . . . . 1 0 . 1 .  # DummyHierarchies DummyHierarchies(FindHierarchies(SSBtoolsData(\"sprt_emp_withEU\")[, c(\"geo\", \"eu\", \"age\")]),                   inputInOutput = c(FALSE, TRUE)) #> $geo #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>       Iceland Portugal Spain #> EU          .        1     1 #> nonEU       1        .     . #> Total       1        1     1 #>  #> $age #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>        Y15-29 Y30-64 #> Y15-29      1      . #> Y30-64      .      1 #> Total       1      1 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0.html","id":null,"dir":"Reference","previous_headings":"","what":"Add zero frequency rows — Extend0","title":"Add zero frequency rows — Extend0","text":"Microdata tabular frequency data extended contain combinations unique rows (hierarchical) groups dimensional variables. Extra variables extended NA's 0's.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add zero frequency rows — Extend0","text":"","code":"Extend0(   data,   freqName = \"freq\",   hierarchical = TRUE,   varGroups = NULL,   dimVar = NULL,   extraVar = TRUE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add zero frequency rows — Extend0","text":"data data frame freqName Name (existing) frequency variable hierarchical Hierarchical variables treated atomatically TRUE varGroups List variable groups, possibly data (see details examples). dimVar dimensional variables extraVar Extra variables variable names, TRUE (remaining) FALSE (none).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add zero frequency rows — Extend0","text":"Extended data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add zero frequency rows — Extend0","text":"frequency variable input (microdata), frequency variable output  consists ones zeros. default, variables, except frequencies, considered dimensional variables. default, grouping dimensional variables based hierarchical relationships (hierarchical = TRUE). varGroups = NULL hierarchical = FALSE, dimensional variable forms separate group (.list(dimVar)). Parameter extraVar can specified variable names. TRUE means remaining variables FALSE variables. contents varGroups[[]] variable names, data frame unique(data[varGroups[[]]]) made building block within function. possibility supply data frame instead variable names. , building block unique(varGroups[[]]). Names data frames can mixed.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add zero frequency rows — Extend0","text":"","code":"z <- SSBtoolsData(\"sprt_emp_withEU\")[c(1, 4:6, 8, 11:15), ] z$age[z$age == \"Y15-29\"] <- \"young\" z$age[z$age == \"Y30-64\"] <- \"old\"  Extend0(z[, -4]) #>      age      geo year    eu freq #> 1  young    Spain 2014    EU    1 #> 2    old    Spain 2014    EU    1 #> 3    old  Iceland 2014 nonEU    1 #> 4    old Portugal 2014    EU    1 #> 5  young  Iceland 2015 nonEU    1 #> 6    old  Iceland 2015 nonEU    1 #> 7    old Portugal 2015    EU    1 #> 8  young    Spain 2016    EU    1 #> 9  young  Iceland 2016 nonEU    1 #> 10 young Portugal 2016    EU    1 #> 11 young  Iceland 2014 nonEU    0 #> 12 young Portugal 2014    EU    0 #> 13 young    Spain 2015    EU    0 #> 14   old    Spain 2015    EU    0 #> 15 young Portugal 2015    EU    0 #> 16   old    Spain 2016    EU    0 #> 17   old  Iceland 2016 nonEU    0 #> 18   old Portugal 2016    EU    0 Extend0(z, hierarchical = FALSE, dimVar = c(\"age\", \"geo\", \"eu\")) #>      age      geo year ths_per    eu freq #> 1  young    Spain 2014    66.9    EU    1 #> 2    old    Spain 2014   120.3    EU    1 #> 3    old  Iceland 2014     1.5 nonEU    1 #> 4    old Portugal 2014    20.2    EU    1 #> 5  young  Iceland 2015     1.9 nonEU    1 #> 6    old  Iceland 2015     1.6 nonEU    1 #> 7    old Portugal 2015    24.3    EU    1 #> 8  young    Spain 2016    69.1    EU    1 #> 9  young  Iceland 2016     1.9 nonEU    1 #> 10 young Portugal 2016    12.7    EU    1 #> 11 young  Iceland <NA>     0.0    EU    0 #> 12   old  Iceland <NA>     0.0    EU    0 #> 13 young    Spain <NA>     0.0 nonEU    0 #> 14   old    Spain <NA>     0.0 nonEU    0 #> 15 young Portugal <NA>     0.0 nonEU    0 #> 16   old Portugal <NA>     0.0 nonEU    0 Extend0(z, hierarchical = FALSE, dimVar = c(\"age\", \"geo\", \"eu\"), extraVar = \"year\") #>      age      geo year    eu freq #> 1  young    Spain 2014    EU    1 #> 2    old    Spain 2014    EU    1 #> 3    old  Iceland 2014 nonEU    1 #> 4    old Portugal 2014    EU    1 #> 5  young  Iceland 2015 nonEU    1 #> 6    old  Iceland 2015 nonEU    1 #> 7    old Portugal 2015    EU    1 #> 8  young    Spain 2016    EU    1 #> 9  young  Iceland 2016 nonEU    1 #> 10 young Portugal 2016    EU    1 #> 11 young  Iceland <NA>    EU    0 #> 12   old  Iceland <NA>    EU    0 #> 13 young    Spain <NA> nonEU    0 #> 14   old    Spain <NA> nonEU    0 #> 15 young Portugal <NA> nonEU    0 #> 16   old Portugal <NA> nonEU    0 Extend0(z, hierarchical = FALSE, dimVar = c(\"age\", \"geo\", \"eu\"), extraVar = FALSE) #>      age      geo    eu freq #> 1  young    Spain    EU    1 #> 2    old    Spain    EU    1 #> 3    old  Iceland nonEU    1 #> 4    old Portugal    EU    1 #> 5  young  Iceland nonEU    1 #> 6    old  Iceland nonEU    1 #> 7    old Portugal    EU    1 #> 8  young    Spain    EU    1 #> 9  young  Iceland nonEU    1 #> 10 young Portugal    EU    1 #> 11 young  Iceland    EU    0 #> 12   old  Iceland    EU    0 #> 13 young    Spain nonEU    0 #> 14   old    Spain nonEU    0 #> 15 young Portugal nonEU    0 #> 16   old Portugal nonEU    0 Extend0(z, varGroups = list(c(\"age\", \"geo\", \"year\"), \"eu\")) #>      age      geo year ths_per    eu freq #> 1  young    Spain 2014    66.9    EU    1 #> 2    old    Spain 2014   120.3    EU    1 #> 3    old  Iceland 2014     1.5 nonEU    1 #> 4    old Portugal 2014    20.2    EU    1 #> 5  young  Iceland 2015     1.9 nonEU    1 #> 6    old  Iceland 2015     1.6 nonEU    1 #> 7    old Portugal 2015    24.3    EU    1 #> 8  young    Spain 2016    69.1    EU    1 #> 9  young  Iceland 2016     1.9 nonEU    1 #> 10 young Portugal 2016    12.7    EU    1 #> 11   old  Iceland 2014     0.0    EU    0 #> 12 young  Iceland 2015     0.0    EU    0 #> 13   old  Iceland 2015     0.0    EU    0 #> 14 young  Iceland 2016     0.0    EU    0 #> 15 young    Spain 2014     0.0 nonEU    0 #> 16   old    Spain 2014     0.0 nonEU    0 #> 17   old Portugal 2014     0.0 nonEU    0 #> 18   old Portugal 2015     0.0 nonEU    0 #> 19 young    Spain 2016     0.0 nonEU    0 #> 20 young Portugal 2016     0.0 nonEU    0 Extend0(MakeFreq(z[c(1, 1, 1, 2, 2, 3:10), -4])) #>      age      geo year    eu freq #> 1    old  Iceland 2014 nonEU    1 #> 2    old  Iceland 2015 nonEU    1 #> 3    old Portugal 2014    EU    1 #> 4    old Portugal 2015    EU    1 #> 5    old    Spain 2014    EU    2 #> 6  young  Iceland 2015 nonEU    1 #> 7  young  Iceland 2016 nonEU    1 #> 8  young Portugal 2016    EU    1 #> 9  young    Spain 2014    EU    3 #> 10 young    Spain 2016    EU    1 #> 11 young  Iceland 2014 nonEU    0 #> 12 young Portugal 2014    EU    0 #> 13 young Portugal 2015    EU    0 #> 14   old    Spain 2015    EU    0 #> 15 young    Spain 2015    EU    0 #> 16   old  Iceland 2016 nonEU    0 #> 17   old Portugal 2016    EU    0 #> 18   old    Spain 2016    EU    0 Extend0(z, \"ths_per\") #>      age      geo year ths_per    eu #> 1  young    Spain 2014    66.9    EU #> 2    old    Spain 2014   120.3    EU #> 3    old  Iceland 2014     1.5 nonEU #> 4    old Portugal 2014    20.2    EU #> 5  young  Iceland 2015     1.9 nonEU #> 6    old  Iceland 2015     1.6 nonEU #> 7    old Portugal 2015    24.3    EU #> 8  young    Spain 2016    69.1    EU #> 9  young  Iceland 2016     1.9 nonEU #> 10 young Portugal 2016    12.7    EU #> 11 young  Iceland 2014     0.0 nonEU #> 12 young Portugal 2014     0.0    EU #> 13 young    Spain 2015     0.0    EU #> 14   old    Spain 2015     0.0    EU #> 15 young Portugal 2015     0.0    EU #> 16   old    Spain 2016     0.0    EU #> 17   old  Iceland 2016     0.0 nonEU #> 18   old Portugal 2016     0.0    EU  # varGroups with data frames (same result as with names above) Extend0(z, varGroups = list(z[c(\"age\", \"geo\", \"year\")], z[\"eu\"])) #>      age      geo year ths_per    eu freq #> 1  young    Spain 2014    66.9    EU    1 #> 2    old    Spain 2014   120.3    EU    1 #> 3    old  Iceland 2014     1.5 nonEU    1 #> 4    old Portugal 2014    20.2    EU    1 #> 5  young  Iceland 2015     1.9 nonEU    1 #> 6    old  Iceland 2015     1.6 nonEU    1 #> 7    old Portugal 2015    24.3    EU    1 #> 8  young    Spain 2016    69.1    EU    1 #> 9  young  Iceland 2016     1.9 nonEU    1 #> 10 young Portugal 2016    12.7    EU    1 #> 11   old  Iceland 2014     0.0    EU    0 #> 12 young  Iceland 2015     0.0    EU    0 #> 13   old  Iceland 2015     0.0    EU    0 #> 14 young  Iceland 2016     0.0    EU    0 #> 15 young    Spain 2014     0.0 nonEU    0 #> 16   old    Spain 2014     0.0 nonEU    0 #> 17   old Portugal 2014     0.0 nonEU    0 #> 18   old Portugal 2015     0.0 nonEU    0 #> 19 young    Spain 2016     0.0 nonEU    0 #> 20 young Portugal 2016     0.0 nonEU    0  # varGroups with both names and data frame Extend0(z, varGroups = list(c(\"year\", \"geo\", \"eu\"), data.frame(age = c(\"middle\", \"old\")))) #>       age      geo year ths_per    eu freq #> 1   young    Spain 2014    66.9    EU    1 #> 2     old    Spain 2014   120.3    EU    1 #> 3     old  Iceland 2014     1.5 nonEU    1 #> 4     old Portugal 2014    20.2    EU    1 #> 5   young  Iceland 2015     1.9 nonEU    1 #> 6     old  Iceland 2015     1.6 nonEU    1 #> 7     old Portugal 2015    24.3    EU    1 #> 8   young    Spain 2016    69.1    EU    1 #> 9   young  Iceland 2016     1.9 nonEU    1 #> 10  young Portugal 2016    12.7    EU    1 #> 11 middle    Spain 2014     0.0    EU    0 #> 12 middle  Iceland 2014     0.0 nonEU    0 #> 13 middle Portugal 2014     0.0    EU    0 #> 14 middle  Iceland 2015     0.0 nonEU    0 #> 15 middle Portugal 2015     0.0    EU    0 #> 16 middle    Spain 2016     0.0    EU    0 #> 17 middle  Iceland 2016     0.0 nonEU    0 #> 18 middle Portugal 2016     0.0    EU    0 #> 19    old    Spain 2016     0.0    EU    0 #> 20    old  Iceland 2016     0.0 nonEU    0 #> 21    old Portugal 2016     0.0    EU    0"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0fromModelMatrixInput.html","id":null,"dir":"Reference","previous_headings":"","what":"A specialized version of Extend0() — Extend0fromModelMatrixInput","title":"A specialized version of Extend0() — Extend0fromModelMatrixInput","text":"Extend0fromModelMatrixInput() specialized function extends input data based provided parameters. designed specifically work input ModelMatrix().","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0fromModelMatrixInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A specialized version of Extend0() — Extend0fromModelMatrixInput","text":"","code":"Extend0fromModelMatrixInput(   data,   freqName,   hierarchies,   formula,   dimVar,   extend0,   dVar = NULL,   avoidHierarchical = FALSE,   hierarchical_extend0 = !avoidHierarchical & is.null(hierarchies),   ... )  IsExtend0(extend0)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0fromModelMatrixInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A specialized version of Extend0() — Extend0fromModelMatrixInput","text":"data Input data frame freqName Name (existing) frequency variable hierarchies List hierarchies, can converted AutoHierarchies. Thus, variables can also coded \"rowFactor\" \"\", correspond using categories data. formula model formula dimVar main dimensional variables additional aggregating variables. parameter can  useful hierarchies formula unspecified. extend0 extend0 set TRUE, data automatically extended. Additionally, extend0 can specified list, representing varGroups parameter Extend0 function. Can also set \"\" means input codes hierarchies considered addition data. dVar Optional. Specifies dimVar input Extend0(). provided, dimVar calculated NamesFromModelMatrixInput() function. avoidHierarchical Parameter passed Formula2ModelMatrix() via ModelMatrix(). default value (FALSE) receiving function. hierarchical_extend0 Specifies hierarchical input Extend0(). default, set opposite avoidHierarchical hierarchies provided. hierarchies provided, hierarchical_extend0 default set FALSE. parameter allows hierarchical input Extend0() specified manually, independent input provided ModelMatrix(). ... arguments underlying functions.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0fromModelMatrixInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A specialized version of Extend0() — Extend0fromModelMatrixInput","text":"Extended data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0fromModelMatrixInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A specialized version of Extend0() — Extend0fromModelMatrixInput","text":"Extend0fromModelMatrixInput(): main function processes extends input data according specified parameters. IsExtend0(): helper function evaluates extend0 parameter returns TRUE FALSE, indicating whether data extended.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0rnd1.html","id":null,"dir":"Reference","previous_headings":"","what":"varGroups-attribute to Extend0, Example functions — Extend0rnd1","title":"varGroups-attribute to Extend0, Example functions — Extend0rnd1","text":"Setting attr(varGroups, \"FunctionExtend0\") function makes Extend0 behave differently","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0rnd1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"varGroups-attribute to Extend0, Example functions — Extend0rnd1","text":"","code":"Extend0rnd1(data, varGroups, k = 1, rndSeed = 123)  Extend0rnd2(...)  Extend0rnd1b(...)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0rnd1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"varGroups-attribute to Extend0, Example functions — Extend0rnd1","text":"data data.frame within Extend0 varGroups argument Extend0 k Number rows generated approx. k*nrow(data) rndSeed Internal random seed used ... Extra unused parameters","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0rnd1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"varGroups-attribute to Extend0, Example functions — Extend0rnd1","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0rnd1.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"varGroups-attribute to Extend0, Example functions — Extend0rnd1","text":"point create function takes data varGroups input returns data frame limited number combinations elements varGroups. example function limited two varGroups elements.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Extend0rnd1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"varGroups-attribute to Extend0, Example functions — Extend0rnd1","text":"","code":"z <- SSBtoolsData(\"sprt_emp_withEU\")[c(1, 5, 8, 14), ] z$age[z$age == \"Y15-29\"] <- \"young\" z$age[z$age == \"Y30-64\"] <- \"old\"  varGroups <- list(c(\"year\", \"geo\", \"eu\"), data.frame(age = c(\"middle\", \"old\"))) Extend0(z, varGroups = varGroups) #>       age     geo year ths_per    eu freq #> 1   young   Spain 2014    66.9    EU    1 #> 2     old Iceland 2014     1.5 nonEU    1 #> 3   young Iceland 2015     1.9 nonEU    1 #> 4   young Iceland 2016     1.9 nonEU    1 #> 5  middle   Spain 2014     0.0    EU    0 #> 6  middle Iceland 2014     0.0 nonEU    0 #> 7  middle Iceland 2015     0.0 nonEU    0 #> 8  middle Iceland 2016     0.0 nonEU    0 #> 9     old   Spain 2014     0.0    EU    0 #> 10    old Iceland 2015     0.0 nonEU    0 #> 11    old Iceland 2016     0.0 nonEU    0  attr(varGroups, \"FunctionExtend0\") <- Extend0rnd1 Extend0(z, varGroups = varGroups) #>      age     geo year ths_per    eu freq #> 1  young   Spain 2014    66.9    EU    1 #> 2    old Iceland 2014     1.5 nonEU    1 #> 3  young Iceland 2015     1.9 nonEU    1 #> 4  young Iceland 2016     1.9 nonEU    1 #> 5 middle   Spain 2014     0.0    EU    0 #> 6 middle Iceland 2015     0.0 nonEU    0 #> 7    old Iceland 2016     0.0 nonEU    0  attr(varGroups, \"FunctionExtend0\") <- Extend0rnd1b Extend0(z, varGroups = varGroups) #>      age     geo year ths_per    eu freq #> 1  young   Spain 2014    66.9    EU    1 #> 2    old Iceland 2014     1.5 nonEU    1 #> 3  young Iceland 2015     1.9 nonEU    1 #> 4  young Iceland 2016     1.9 nonEU    1 #> 5 middle   Spain 2014     0.0    EU    0 #> 6 middle Iceland 2014     0.0 nonEU    0 #> 7    old Iceland 2015     0.0 nonEU    0 #> 8    old Iceland 2016     0.0 nonEU    0  attr(varGroups, \"FunctionExtend0\") <- Extend0rnd2 Extend0(z, varGroups = varGroups) #>      age     geo year ths_per    eu freq #> 1  young   Spain 2014    66.9    EU    1 #> 2    old Iceland 2014     1.5 nonEU    1 #> 3  young Iceland 2015     1.9 nonEU    1 #> 4  young Iceland 2016     1.9 nonEU    1 #> 5 middle   Spain 2014     0.0    EU    0 #> 6    old   Spain 2014     0.0    EU    0 #> 7 middle Iceland 2015     0.0 nonEU    0 #> 8 middle Iceland 2016     0.0 nonEU    0 #> 9    old Iceland 2016     0.0 nonEU    0  # To see what's going on internally. Data used only via nrow  varGroups <- list(data.frame(ab = rep(c(\"a\", \"b\"), each = 4), abcd = c(\"a\", \"b\", \"c\", \"d\")),                    data.frame(AB = rep(c(\"A\", \"B\"), each = 3), ABC = c(\"A\", \"B\", \"C\")))  a <- Extend0rnd1(data.frame(1:5), varGroups) table(a[[1]], a[[2]]) #>     #>     a b c d #>   a 1 1 1 1 #>   b 1 1 1 1 table(a[[3]], a[[4]]) #>     #>     A B C #>   A 1 1 2 #>   B 1 1 2 a <- Extend0rnd1b(data.frame(1:5), varGroups) table(a[[1]], a[[2]]) #>     #>     a b c d #>   a 1 1 1 1 #>   b 1 1 1 1 table(a[[3]], a[[4]]) #>     #>     A B C #>   A 2 1 1 #>   B 2 1 1 a <- Extend0rnd2(data.frame(1:5), varGroups[2:1]) table(a[[1]], a[[2]]) #>     #>     A B C #>   A 2 2 2 #>   B 2 2 2 table(a[[3]], a[[4]]) #>     #>     a b c d #>   a 1 1 2 1 #>   b 1 2 2 2 a <- Extend0rnd1(data.frame(1:100), varGroups) table(a[[1]], a[[2]]) # Maybe smaller numbers than expected since duplicates were removed #>     #>     a b c d #>   a 5 6 5 6 #>   b 6 6 5 6 table(a[[3]], a[[4]]) #>     #>     A B C #>   A 8 7 7 #>   B 8 7 8"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FactorLevCorr.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor level correlation — FactorLevCorr","title":"Factor level correlation — FactorLevCorr","text":"sort correlation matrix useful detect (hierarchical) relationships levels factor variables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FactorLevCorr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor level correlation — FactorLevCorr","text":"","code":"FactorLevCorr(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FactorLevCorr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor level correlation — FactorLevCorr","text":"x Input matrix data frame containing variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FactorLevCorr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor level correlation — FactorLevCorr","text":"Output sort correlation matrix. refer ni number present levels variable (number unique elements) refer mij number         present levels obtained crossing variable variable j (number unique rows x[,c(,j)]). diagonal elements output matrix contains number present levels variable (=ni). absolute values -diagonal elements: 0 mij = ni*nj 1 mij = max(ni,nj) values Computed (ni*nj-mij)/(ni*nj-max(ni,nj)) 0 means possible level combinations exist data 1 means two variables         hierarchically related. sign -diagonal elements: positive ni<nj negative ni>nj cases ni=nj elements positive diagonal negative .","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FactorLevCorr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Factor level correlation — FactorLevCorr","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FactorLevCorr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor level correlation — FactorLevCorr","text":"","code":"x <- rep(c(\"A\",\"B\",\"C\"),3)  y <- rep(c(11,22,11),3)  z <- c(1,1,1,2,2,2,3,3,3)  zy <- paste(z,y,sep=\"\")  m <- cbind(x,y,z,zy)  FactorLevCorr(m) #>        x  y  z   zy #> x   3.00 -1  0 0.75 #> y   1.00  2  0 1.00 #> z   0.00  0  3 1.00 #> zy -0.75 -1 -1 6.00"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindCommonCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding commonCells — FindCommonCells","title":"Finding commonCells — FindCommonCells","text":"Finding lists defining common cells needed input parameter commonCells function protectLinkedTables package sdcTable. function handles two tables based main variables possibly different aggregating variables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindCommonCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding commonCells — FindCommonCells","text":"","code":"FindCommonCells(dimList1, dimList2)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindCommonCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding commonCells — FindCommonCells","text":"dimList1 input parameter dimList function makeProblem package sdcTable. dimList2 Another dimList names using level names.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindCommonCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding commonCells — FindCommonCells","text":"Output list according specifications sdcTable.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindCommonCells.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding commonCells — FindCommonCells","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindCommonCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding commonCells — FindCommonCells","text":"","code":"x <- rep(c('A','B','C'),3)  y <- rep(c(11,22,11),3)  z <- c(1,1,1,2,2,2,3,3,3)  zy <- paste(z,y,sep='')  m <- cbind(x,y,z,zy)  fg <- FindTableGroup(m,findLinked=TRUE)  dimLists <- FindDimLists(m,fg$groupVarInd)  # Using table1 and table2 in this example cause error,  # but in other cases this may work well  try(FindCommonCells(dimLists[fg$table$table1],dimLists[fg$table$table2])) #> named list()  FindCommonCells(dimLists[c(1,2)],dimLists[c(1,3)]) #> $x #> $x[[1]] #> [1] \"x\" #>  #> $x[[2]] #> [1] \"x\" #>  #> $x[[3]] #> [1] \"All\" #>  #>  #> $zy #> $zy[[1]] #> [1] \"zy\" #>  #> $zy[[2]] #> [1] \"zy\" #>  #> $zy[[3]] #> [1] \"Total\" \"111\"   \"211\"   \"311\"   \"122\"   \"222\"   \"322\"   #>  #> $zy[[4]] #> [1] \"Total\" \"111\"   \"211\"   \"311\"   \"122\"   \"222\"   \"322\"   #>  #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDimLists.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding dimList — FindDimLists","title":"Finding dimList — FindDimLists","text":"Finding lists level-hierarchy needed input parameter dimList function makeProblem package sdcTable","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDimLists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding dimList — FindDimLists","text":"","code":"FindDimLists(   x,   groupVarInd = HierarchicalGroups(x = x),   addName = FALSE,   sep = \".\",   xReturn = FALSE,   total = \"Total\" )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDimLists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding dimList — FindDimLists","text":"x Matrix data frame containing variables (micro data cell counts data). groupVarInd List vectors indices defining hierarchical variable groups. addName TRUE variable name added level names, except variables levels. sep character string separate addName apply. xReturn TRUE x also output, possibly changed according addName. total String used name totals. vector length ncol(x) also possible (see examples).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDimLists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding dimList — FindDimLists","text":"Output list according specifications sdcTable. xReturn TRUE output extra list level x first element.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDimLists.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding dimList — FindDimLists","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDimLists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding dimList — FindDimLists","text":"","code":"dataset <- SSBtoolsData(\"example1\") FindDimLists(dataset[1:2]) #> $age #>   levels codes #> 1      @ Total #> 2     @@   old #> 3     @@ young #>  #> $geo #>   levels    codes #> 1      @    Total #> 2     @@  Iceland #> 3     @@ Portugal #> 4     @@    Spain #>  FindDimLists(dataset[2:3]) #> $geo #>   levels    codes #> 1      @    Total #> 2     @@       EU #> 3    @@@ Portugal #> 4    @@@    Spain #> 5     @@    nonEU #> 6    @@@  Iceland #>  FindDimLists(dataset[1:4]) #> $age #>   levels codes #> 1      @ Total #> 2     @@   old #> 3     @@ young #>  #> $geo #>   levels    codes #> 1      @    Total #> 2     @@       EU #> 3    @@@ Portugal #> 4    @@@    Spain #> 5     @@    nonEU #> 6    @@@  Iceland #>  #> $year #>   levels codes #> 1      @ Total #> 2     @@  2014 #> 3     @@  2015 #> 4     @@  2016 #>   FindDimLists(SSBtoolsData(\"magnitude1\")[1:4],                  total = c(\"TOTAL\", \"unused1\", \"Europe\", \"unused2\")) #> $sector4 #>   levels         codes #> 1      @         TOTAL #> 2     @@       private #> 3    @@@   Agriculture #> 4    @@@ Entertainment #> 5    @@@      Industry #> 6     @@        public #> 7    @@@  Governmental #>  #> $geo #>   levels    codes #> 1      @   Europe #> 2     @@       EU #> 3    @@@ Portugal #> 4    @@@    Spain #> 5     @@    nonEU #> 6    @@@  Iceland #>                    x <- rep(c('A','B','C'),3)  y <- rep(c(11,22,11),3)  z <- c(1,1,1,2,2,2,3,3,3)  zy <- paste(z,y,sep='')  m <- cbind(x,y,z,zy)  FindDimLists(m) #> $x #>   levels codes #> 1      @ Total #> 2     @@    11 #> 3    @@@     A #> 4    @@@     C #> 5     @@    22 #> 6    @@@     B #>  #> $zy #>   levels codes #> 1      @ Total #> 2     @@    11 #> 3    @@@   111 #> 4    @@@   211 #> 5    @@@   311 #> 6     @@    22 #> 7    @@@   122 #> 8    @@@   222 #> 9    @@@   322 #>  #> $zy #>    levels codes #> 1       @ Total #> 2      @@     1 #> 3     @@@   111 #> 4     @@@   122 #> 5      @@     2 #> 6     @@@   211 #> 7     @@@   222 #> 8      @@     3 #> 9     @@@   311 #> 10    @@@   322 #>   FindDimLists(m, total = paste0(\"A\", 1:4)) #> $x #>   levels codes #> 1      @    A1 #> 2     @@    11 #> 3    @@@     A #> 4    @@@     C #> 5     @@    22 #> 6    @@@     B #>  #> $zy #>   levels codes #> 1      @    A4 #> 2     @@    11 #> 3    @@@   111 #> 4    @@@   211 #> 5    @@@   311 #> 6     @@    22 #> 7    @@@   122 #> 8    @@@   222 #> 9    @@@   322 #>  #> $zy #>    levels codes #> 1       @    A4 #> 2      @@     1 #> 3     @@@   111 #> 4     @@@   122 #> 5      @@     2 #> 6     @@@   211 #> 7     @@@   222 #> 8      @@     3 #> 9     @@@   311 #> 10    @@@   322 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDisclosiveCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Find directly disclosive cells — FindDisclosiveCells","title":"Find directly disclosive cells — FindDisclosiveCells","text":"Function determining cells frequency table can lead direct disclosure identifiable individual, assuming attacker background knowledge place (coalition) table.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDisclosiveCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find directly disclosive cells — FindDisclosiveCells","text":"","code":"FindDisclosiveCells(   data,   freq,   crossTable,   primaryDims = names(crossTable),   unknowns = rep(NA, length(primaryDims)),   total = rep(\"Total\", length(primaryDims)),   unknown.threshold = 0,   coalition = 1,   suppressSmallCells = FALSE,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDisclosiveCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find directly disclosive cells — FindDisclosiveCells","text":"data data set freq vector containing frequencies crossTable cross table key variables produced ModelMatrix parent function primaryDims dimensions considered direct disclosure. unknowns vector unknown values primary dimensions. primary dimension contain unknown values, NA passed. total string name marginal values unknown.threshold numeric specifying percentage calculating safety cells. cell \"safe\" row number unknowns exceeds unknown.threshold percent row total. coalition maximum number units possible coalition, default 1 suppressSmallCells logical variable determines whether small cells (<= coalition) large cells suppressed. Default FALSE. ... parameters main suppression method","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDisclosiveCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find directly disclosive cells — FindDisclosiveCells","text":"list two named elements, first ($primary) logical vector marking directly disclosive cells, second ($numExtra) data.frame containing information regarding dimensions cells directly disclosive.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDisclosiveCells.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find directly disclosive cells — FindDisclosiveCells","text":"function work data containing hierarchical variables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindDisclosiveCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find directly disclosive cells — FindDisclosiveCells","text":"","code":"extable <- data.frame(v1 = rep(c('a', 'b', 'c'), times = 4),             v2 = c('i','i', 'i','h','h','h','i','i','i','h','h','h'),             v3 = c('y', 'y', 'y', 'y', 'y', 'y','z','z', 'z', 'z', 'z', 'z'),             freq = c(0,0,5,0,2,3,1,0,3,1,1,2)) ex_freq <- c(18,10,8,9,5,4,9,5,4,2,0,2,1,0,1,1,0,1,3,2,1,3,2,1,0,0,0,13,8,5,              5,3,2,8,5,3) cross <- ModelMatrix(extable,                      dimVar = 1:3,                      crossTable = TRUE)$crossTable  FindDisclosiveCells(extable, ex_freq, cross)  #> $primary #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE #> [13]  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE  TRUE #> [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE #>  #> $numExtra #>    v1-prikk v2-prikk v3-prikk #> 1     FALSE    FALSE    FALSE #> 2     FALSE    FALSE    FALSE #> 3     FALSE    FALSE    FALSE #> 4     FALSE    FALSE    FALSE #> 5     FALSE    FALSE    FALSE #> 6     FALSE    FALSE    FALSE #> 7     FALSE    FALSE    FALSE #> 8     FALSE    FALSE    FALSE #> 9     FALSE    FALSE    FALSE #> 10    FALSE    FALSE    FALSE #> 11    FALSE    FALSE    FALSE #> 12    FALSE    FALSE     TRUE #> 13    FALSE     TRUE    FALSE #> 14    FALSE    FALSE    FALSE #> 15    FALSE     TRUE     TRUE #> 16    FALSE     TRUE    FALSE #> 17    FALSE    FALSE    FALSE #> 18    FALSE     TRUE     TRUE #> 19    FALSE    FALSE    FALSE #> 20    FALSE    FALSE     TRUE #> 21    FALSE    FALSE    FALSE #> 22    FALSE     TRUE    FALSE #> 23    FALSE     TRUE     TRUE #> 24    FALSE     TRUE    FALSE #> 25    FALSE    FALSE    FALSE #> 26    FALSE    FALSE    FALSE #> 27    FALSE    FALSE    FALSE #> 28    FALSE    FALSE    FALSE #> 29    FALSE    FALSE    FALSE #> 30    FALSE    FALSE    FALSE #> 31    FALSE    FALSE    FALSE #> 32    FALSE    FALSE    FALSE #> 33    FALSE    FALSE    FALSE #> 34     TRUE    FALSE    FALSE #> 35     TRUE    FALSE    FALSE #> 36     TRUE    FALSE    FALSE #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindHierarchies.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding hierarchies automatically from data — FindHierarchies","title":"Finding hierarchies automatically from data — FindHierarchies","text":"FindDimLists AutoHierarchies wrapped single function.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindHierarchies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding hierarchies automatically from data — FindHierarchies","text":"","code":"FindHierarchies(data, total = \"Total\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindHierarchies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding hierarchies automatically from data — FindHierarchies","text":"data Matrix data frame containing variables (micro data cell counts data). total String used name totals. vector length ncol(data) also possible (see examples).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindHierarchies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding hierarchies automatically from data — FindHierarchies","text":"List hierarchies","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindHierarchies.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding hierarchies automatically from data — FindHierarchies","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindHierarchies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding hierarchies automatically from data — FindHierarchies","text":"","code":"dataset <- SSBtoolsData(\"example1\") FindHierarchies(dataset[1:2]) #> $age #>   mapsFrom mapsTo sign level #> 1      old  Total    1     1 #> 2    young  Total    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1  Iceland  Total    1     1 #> 2 Portugal  Total    1     1 #> 3    Spain  Total    1     1 #>  FindHierarchies(dataset[2:3]) #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  FindHierarchies(dataset[1:4]) #> $age #>   mapsFrom mapsTo sign level #> 1      old  Total    1     1 #> 2    young  Total    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $year #>   mapsFrom mapsTo sign level #> 1     2014  Total    1     1 #> 2     2015  Total    1     1 #> 3     2016  Total    1     1 #>   FindHierarchies(SSBtoolsData(\"magnitude1\")[1:4],                  total = c(\"TOTAL\", \"unused1\", \"Europe\", \"unused2\")) #> $sector4 #>        mapsFrom  mapsTo sign level #> 1       private   TOTAL    1     2 #> 2   Agriculture private    1     1 #> 3 Entertainment private    1     1 #> 4      Industry private    1     1 #> 5        public   TOTAL    1     2 #> 6  Governmental  public    1     1 #>  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU Europe    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU Europe    1     2 #> 5  Iceland  nonEU    1     1 #>   x <- rep(c(\"A\", \"B\", \"C\"), 3) y <- rep(c(11, 22, 11), 3) z <- c(1, 1, 1, 2, 2, 2, 3, 3, 3) zy <- paste(z, y, sep = \"\") m <- cbind(x, y, z, zy) FindHierarchies(m) #> $x #>   mapsFrom mapsTo sign level #> 1       11  Total    1     2 #> 2        A     11    1     1 #> 3        C     11    1     1 #> 4       22  Total    1     2 #> 5        B     22    1     1 #>  #> $zy #>    mapsFrom mapsTo sign level #> 1       111     11    1     1 #> 2       111  Total    1     1 #> 3       111      1    1     1 #> 4       122     22    1     1 #> 5       122  Total    1     1 #> 6       122      1    1     1 #> 7       211     11    1     1 #> 8       211  Total    1     1 #> 9       211      2    1     1 #> 10      222     22    1     1 #> 11      222  Total    1     1 #> 12      222      2    1     1 #> 13      311     11    1     1 #> 14      311  Total    1     1 #> 15      311      3    1     1 #> 16      322     22    1     1 #> 17      322  Total    1     1 #> 18      322      3    1     1 #>  FindHierarchies(m, total = paste0(\"A\", 1:4)) #> $x #>   mapsFrom mapsTo sign level #> 1       11     A1    1     2 #> 2        A     11    1     1 #> 3        C     11    1     1 #> 4       22     A1    1     2 #> 5        B     22    1     1 #>  #> $zy #>    mapsFrom mapsTo sign level #> 1       111     11    1     1 #> 2       111     A4    1     1 #> 3       111      1    1     1 #> 4       122     22    1     1 #> 5       122     A4    1     1 #> 6       122      1    1     1 #> 7       211     11    1     1 #> 8       211     A4    1     1 #> 9       211      2    1     1 #> 10      222     22    1     1 #> 11      222     A4    1     1 #> 12      222      2    1     1 #> 13      311     11    1     1 #> 14      311     A4    1     1 #> 15      311      3    1     1 #> 16      322     22    1     1 #> 17      322     A4    1     1 #> 18      322      3    1     1 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindTableGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding table(s) of hierarchical variable groups — FindTableGroup","title":"Finding table(s) of hierarchical variable groups — FindTableGroup","text":"single table two linked tables found","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindTableGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding table(s) of hierarchical variable groups — FindTableGroup","text":"","code":"FindTableGroup(   x = NULL,   findLinked = FALSE,   mainName = TRUE,   fCorr = FactorLevCorr(x),   CheckHandling = warning )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindTableGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding table(s) of hierarchical variable groups — FindTableGroup","text":"x Matrix data frame containing variables findLinked TRUE, two linked tables can output mainName TRUE groupVarInd ouput named according first variable group. fCorr non-null x needed input. CheckHandling Function (warning stop) used problematic situations.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindTableGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding table(s) of hierarchical variable groups — FindTableGroup","text":"Output list items groupVarInd List defining hierarchical variable groups. First variable levels. table List containing one two tables. tables coded indices referring elements groupVarInd.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindTableGroup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding table(s) of hierarchical variable groups — FindTableGroup","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FindTableGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding table(s) of hierarchical variable groups — FindTableGroup","text":"","code":"x <- rep(c('A','B','C'),3)  y <- rep(c(11,22,11),3)  z <- c(1,1,1,2,2,2,3,3,3)  zy <- paste(z,y,sep='')  m <- cbind(x,y,z,zy)  FindTableGroup(m) #> Warning: Not a single unique table #> $groupVarInd #> $groupVarInd$x #> [1] 1 2 #>  #> $groupVarInd$zy #> [1] 4 2 #>  #> $groupVarInd$zy #> [1] 4 3 #>  #>  #> $table #> $table$ind1 #> [1] 1 3 #>  #>   FindTableGroup(m,findLinked=TRUE) #> $groupVarInd #> $groupVarInd$x #> [1] 1 2 #>  #> $groupVarInd$zy #> [1] 4 2 #>  #> $groupVarInd$zy #> [1] 4 3 #>  #>  #> $table #> $table$ind1 #> [1] 1 3 #>  #> $table$ind2 #> [1] 2 #>  #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceCharacterDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"ForceCharacterDataFrame — ForceCharacterDataFrame","title":"ForceCharacterDataFrame — ForceCharacterDataFrame","text":"ForceCharacterDataFrame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceCharacterDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ForceCharacterDataFrame — ForceCharacterDataFrame","text":"","code":"ForceCharacterDataFrame(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceCharacterDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ForceCharacterDataFrame — ForceCharacterDataFrame","text":"x data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceCharacterDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ForceCharacterDataFrame — ForceCharacterDataFrame","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceCharacterDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ForceCharacterDataFrame — ForceCharacterDataFrame","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceFactorDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"ForceFactorDataFrame — ForceFactorDataFrame","title":"ForceFactorDataFrame — ForceFactorDataFrame","text":"ForceFactorDataFrame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceFactorDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ForceFactorDataFrame — ForceFactorDataFrame","text":"","code":"ForceFactorDataFrame(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceFactorDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ForceFactorDataFrame — ForceFactorDataFrame","text":"x data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceFactorDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ForceFactorDataFrame — ForceFactorDataFrame","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ForceFactorDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ForceFactorDataFrame — ForceFactorDataFrame","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSelection.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit matrix or data frame to selected model terms — FormulaSelection.default","title":"Limit matrix or data frame to selected model terms — FormulaSelection.default","text":"use output ModelMatrix data frames derived output. generic function means methods input objects can added.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSelection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit matrix or data frame to selected model terms — FormulaSelection.default","text":"","code":"# Default S3 method FormulaSelection(x, formula, intercept = NA, logical = FALSE)  FormulaSelection(x, formula, intercept = NA, logical = FALSE)  formula_selection(x, formula, intercept = NA, logical = FALSE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSelection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit matrix or data frame to selected model terms — FormulaSelection.default","text":"x Model matrix data frame formula Formula representing limitation character string(s) converted formula (see details) intercept Parameter specifies whether possible intercept term (overall total) included output. Default TRUE formula input. Otherwise, see details. logical TRUE, logical selection vector returned.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSelection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit matrix or data frame to selected model terms — FormulaSelection.default","text":"Limited model matrix data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSelection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Limit matrix or data frame to selected model terms — FormulaSelection.default","text":"selection based startCol startRow attribute input x. formula character: ~ included: Input converted .formula default intercept TRUE. ~ included: Internally, input data converted formula adding ~ possibly +'s length >1. Default intercept FALSE unless \"1\" \"(Intercept)\" (changed internally \"1\") included.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSelection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Limit matrix or data frame to selected model terms — FormulaSelection.default","text":"formula_selection FormulaSelection identical","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSelection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit matrix or data frame to selected model terms — FormulaSelection.default","text":"","code":"z <- SSBtoolsData(\"sprt_emp_withEU\") z$age[z$age == \"Y15-29\"] <- \"young\" z$age[z$age == \"Y30-64\"] <- \"old\"  x <- ModelMatrix(z, formula = ~age * year)  FormulaSelection(x, \"age\") #> 18 x 2 sparse Matrix of class \"dgCMatrix\" #>       old-Total young-Total #>  [1,]         .           1 #>  [2,]         .           1 #>  [3,]         .           1 #>  [4,]         1           . #>  [5,]         1           . #>  [6,]         1           . #>  [7,]         .           1 #>  [8,]         .           1 #>  [9,]         .           1 #> [10,]         1           . #> [11,]         1           . #> [12,]         1           . #> [13,]         .           1 #> [14,]         .           1 #> [15,]         .           1 #> [16,]         1           . #> [17,]         1           . #> [18,]         1           . FormulaSelection(x, ~year) #> 18 x 4 sparse Matrix of class \"dgCMatrix\" #>       Total-Total Total-2014 Total-2015 Total-2016 #>  [1,]           1          1          .          . #>  [2,]           1          1          .          . #>  [3,]           1          1          .          . #>  [4,]           1          1          .          . #>  [5,]           1          1          .          . #>  [6,]           1          1          .          . #>  [7,]           1          .          1          . #>  [8,]           1          .          1          . #>  [9,]           1          .          1          . #> [10,]           1          .          1          . #> [11,]           1          .          1          . #> [12,]           1          .          1          . #> [13,]           1          .          .          1 #> [14,]           1          .          .          1 #> [15,]           1          .          .          1 #> [16,]           1          .          .          1 #> [17,]           1          .          .          1 #> [18,]           1          .          .          1 FormulaSelection(x, ~year:age) #> 18 x 7 sparse Matrix of class \"dgCMatrix\" #>       Total-Total old-2014 old-2015 old-2016 young-2014 young-2015 young-2016 #>  [1,]           1        .        .        .          1          .          . #>  [2,]           1        .        .        .          1          .          . #>  [3,]           1        .        .        .          1          .          . #>  [4,]           1        1        .        .          .          .          . #>  [5,]           1        1        .        .          .          .          . #>  [6,]           1        1        .        .          .          .          . #>  [7,]           1        .        .        .          .          1          . #>  [8,]           1        .        .        .          .          1          . #>  [9,]           1        .        .        .          .          1          . #> [10,]           1        .        1        .          .          .          . #> [11,]           1        .        1        .          .          .          . #> [12,]           1        .        1        .          .          .          . #> [13,]           1        .        .        .          .          .          1 #> [14,]           1        .        .        .          .          .          1 #> [15,]           1        .        .        .          .          .          1 #> [16,]           1        .        .        1          .          .          . #> [17,]           1        .        .        1          .          .          . #> [18,]           1        .        .        1          .          .          .  # x1, x2, x3, x4 and x4 are identical x1 <- FormulaSelection(x, ~age) x2 <- FormulaSelection(x, \"~age\") x3 <- FormulaSelection(x, \"age\", intercept = TRUE) x4 <- FormulaSelection(x, c(\"1\", \"age\")) x5 <- FormulaSelection(x, c(\"(Intercept)\", \"age\"))   a <- ModelMatrix(z, formula = ~age * geo + year, crossTable = TRUE) b <- cbind(as.data.frame(a$crossTable),             sum = (Matrix::t(a$modelMatrix) %*% z$ths_per)[, 1],             max = DummyApply(a$modelMatrix,             z$ths_per, max)) rownames(b) <- NULL attr(b, \"startRow\") <- attr(a$modelMatrix, \"startCol\", exact = TRUE)  FormulaSelection(b, ~geo * age) #>      age      geo  year   sum   max #> 1  Total    Total Total 680.8 122.1 #> 2    old    Total Total 437.3 122.1 #> 3  young    Total Total 243.5  69.1 #> 4  Total  Iceland Total  10.6   1.9 #> 5  Total Portugal Total 108.8  25.8 #> 6  Total    Spain Total 561.4 122.1 #> 10   old  Iceland Total   5.0   1.9 #> 11   old Portugal Total  70.3  25.8 #> 12   old    Spain Total 362.0 122.1 #> 13 young  Iceland Total   5.6   1.9 #> 14 young Portugal Total  38.5  14.2 #> 15 young    Spain Total 199.4  69.1 FormulaSelection(b, \"age:geo\") #>      age      geo  year   sum   max #> 10   old  Iceland Total   5.0   1.9 #> 11   old Portugal Total  70.3  25.8 #> 12   old    Spain Total 362.0 122.1 #> 13 young  Iceland Total   5.6   1.9 #> 14 young Portugal Total  38.5  14.2 #> 15 young    Spain Total 199.4  69.1 FormulaSelection(b, ~year - 1) #>     age   geo year   sum   max #> 7 Total Total 2014 222.3 120.3 #> 8 Total Total 2015 225.0 119.6 #> 9 Total Total 2016 233.5 122.1 FormulaSelection(b, ~geo:age, logical = TRUE) #>  [1]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE #> [13]  TRUE  TRUE  TRUE"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSums.html","id":null,"dir":"Reference","previous_headings":"","what":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","title":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","text":"default function return sums formula contains response part model matrix otherwise","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","text":"","code":"FormulaSums(   data,   formula,   makeNames = TRUE,   crossTable = FALSE,   total = \"Total\",   printInc = FALSE,   dropResponse = FALSE,   makeModelMatrix = NULL,   sep = \"-\",   sepCross = \":\",   avoidHierarchical = FALSE,   includeEmpty = FALSE,   NAomit = TRUE,   rowGroupsPackage = \"base\",   viaSparseMatrix = TRUE,   ... )  Formula2ModelMatrix(data, formula, dropResponse = TRUE, ...)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","text":"data data frame formula model formula makeNames Column/row names made TRUE crossTable Cross table output TRUE total String used name totals printInc Printing \"...\" console TRUE dropResponse TRUE response part formula ignored. makeModelMatrix Make model matrix TRUE. NULL means automatic. sep String separate creating column names sepCross String separate creating column names involving crossing avoidHierarchical Whether avoid treating hierarchical variables. Instead logical, variables can specified. includeEmpty TRUE, empty columns model matrix (zeros) included. implemented response term included formula dropResponse = FALSE (error produced). NAomit TRUE, NAs grouping variables omitted output included separate category. Technically, parameter utilized function RowGroups. rowGroupsPackage Parameter pkg function RowGroups. Default \"base\". Setting parameter \"data.table\" can improve speed. viaSparseMatrix TRUE, model matrix constructed single call sparseMatrix. Setting FALSE reverts previous behavior. parameter included testing purposes likely removed future versions. ... arguments passed FormulaSums","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","text":"matrix sums, sparse model matrix list two three elements (model matrix cross table sums relevant).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSums.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","text":"original version function model matrix constructed calling fac2sparse repeatedly. Now replaced single call sparseMatrix. sums computed calling aggregate repeatedly. Hierarchical variables handled constructing cross table. Column names constructed cross table. returned model matrix includes attribute startCol (see last example line).","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSums.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/FormulaSums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sums (aggregates) and/or sparse model matrix with possible cross table — FormulaSums","text":"","code":"x <- SSBtoolsData(\"sprt_emp_withEU\")  FormulaSums(x, ths_per ~ year*geo + year*eu) #>                ths_per #> Total-Total      680.8 #> 2014-Total       222.3 #> 2015-Total       225.0 #> 2016-Total       233.5 #> Total-Iceland     10.6 #> Total-Portugal   108.8 #> Total-Spain      561.4 #> Total-EU         670.2 #> Total-nonEU       10.6 #> 2014-Iceland       3.3 #> 2014-Portugal     31.8 #> 2014-Spain       187.2 #> 2015-Iceland       3.5 #> 2015-Portugal     38.5 #> 2015-Spain       183.0 #> 2016-Iceland       3.8 #> 2016-Portugal     38.5 #> 2016-Spain       191.2 #> 2014-EU          219.0 #> 2014-nonEU         3.3 #> 2015-EU          221.5 #> 2015-nonEU         3.5 #> 2016-EU          229.7 #> 2016-nonEU         3.8 FormulaSums(x, ~ year*age*eu) #> 18 x 36 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 36 column names ‘Total-Total-Total’, ‘2014-Total-Total’, ‘2015-Total-Total’ ... ]] #>                                                                               #>  [1,] 1 1 . . 1 . 1 . 1 . . . . . 1 . . . . . 1 . . . 1 . . . . . . . . . . . #>  [2,] 1 1 . . 1 . . 1 1 . . . . . . 1 . . . . . 1 . . . 1 . . . . . . . . . . #>  [3,] 1 1 . . 1 . 1 . 1 . . . . . 1 . . . . . 1 . . . 1 . . . . . . . . . . . #>  [4,] 1 1 . . . 1 1 . . 1 . . . . 1 . . . . . . . 1 . . . 1 . . . . . . . . . #>  [5,] 1 1 . . . 1 . 1 . 1 . . . . . 1 . . . . . . . 1 . . . 1 . . . . . . . . #>  [6,] 1 1 . . . 1 1 . . 1 . . . . 1 . . . . . . . 1 . . . 1 . . . . . . . . . #>  [7,] 1 . 1 . 1 . 1 . . . 1 . . . . . 1 . . . 1 . . . . . . . 1 . . . . . . . #>  [8,] 1 . 1 . 1 . . 1 . . 1 . . . . . . 1 . . . 1 . . . . . . . 1 . . . . . . #>  [9,] 1 . 1 . 1 . 1 . . . 1 . . . . . 1 . . . 1 . . . . . . . 1 . . . . . . . #> [10,] 1 . 1 . . 1 1 . . . . 1 . . . . 1 . . . . . 1 . . . . . . . 1 . . . . . #> [11,] 1 . 1 . . 1 . 1 . . . 1 . . . . . 1 . . . . . 1 . . . . . . . 1 . . . . #> [12,] 1 . 1 . . 1 1 . . . . 1 . . . . 1 . . . . . 1 . . . . . . . 1 . . . . . #> [13,] 1 . . 1 1 . 1 . . . . . 1 . . . . . 1 . 1 . . . . . . . . . . . 1 . . . #> [14,] 1 . . 1 1 . . 1 . . . . 1 . . . . . . 1 . 1 . . . . . . . . . . . 1 . . #> [15,] 1 . . 1 1 . 1 . . . . . 1 . . . . . 1 . 1 . . . . . . . . . . . 1 . . . #> [16,] 1 . . 1 . 1 1 . . . . . . 1 . . . . 1 . . . 1 . . . . . . . . . . . 1 . #> [17,] 1 . . 1 . 1 . 1 . . . . . 1 . . . . . 1 . . . 1 . . . . . . . . . . . 1 #> [18,] 1 . . 1 . 1 1 . . . . . . 1 . . . . 1 . . . 1 . . . . . . . . . . . 1 . FormulaSums(x, ths_per ~ year*age*geo + year*age*eu, crossTable = TRUE, makeModelMatrix = TRUE) #> $modelMatrix #> 18 x 72 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 72 column names ‘Total-Total-Total’, ‘2014-Total-Total’, ‘2015-Total-Total’ ... ]] #>                                                                                 #>  [1,] 1 1 . . 1 . . . 1 1 . 1 . . . . . . . 1 . . . . . . . . 1 . . . 1 . . . . #>  [2,] 1 1 . . 1 . 1 . . . 1 1 . . . . . 1 . . . . . . . . 1 . . . . . . 1 . . . #>  [3,] 1 1 . . 1 . . 1 . 1 . 1 . . . . . . 1 . . . . . . . . 1 . . . . 1 . . . . #>  [4,] 1 1 . . . 1 . . 1 1 . . 1 . . . . . . 1 . . . . . . . . . . . 1 1 . . . . #>  [5,] 1 1 . . . 1 1 . . . 1 . 1 . . . . 1 . . . . . . . . . . . 1 . . . 1 . . . #>  [6,] 1 1 . . . 1 . 1 . 1 . . 1 . . . . . 1 . . . . . . . . . . . 1 . 1 . . . . #>  [7,] 1 . 1 . 1 . . . 1 1 . . . 1 . . . . . . . . 1 . . . . . 1 . . . . . 1 . . #>  [8,] 1 . 1 . 1 . 1 . . . 1 . . 1 . . . . . . 1 . . . . . 1 . . . . . . . . 1 . #>  [9,] 1 . 1 . 1 . . 1 . 1 . . . 1 . . . . . . . 1 . . . . . 1 . . . . . . 1 . . #> [10,] 1 . 1 . . 1 . . 1 1 . . . . 1 . . . . . . . 1 . . . . . . . . 1 . . 1 . . #> [11,] 1 . 1 . . 1 1 . . . 1 . . . 1 . . . . . 1 . . . . . . . . 1 . . . . . 1 . #> [12,] 1 . 1 . . 1 . 1 . 1 . . . . 1 . . . . . . 1 . . . . . . . . 1 . . . 1 . . #> [13,] 1 . . 1 1 . . . 1 1 . . . . . 1 . . . . . . . . . 1 . . 1 . . . . . . . 1 #> [14,] 1 . . 1 1 . 1 . . . 1 . . . . 1 . . . . . . . 1 . . 1 . . . . . . . . . . #> [15,] 1 . . 1 1 . . 1 . 1 . . . . . 1 . . . . . . . . 1 . . 1 . . . . . . . . 1 #> [16,] 1 . . 1 . 1 . . 1 1 . . . . . . 1 . . . . . . . . 1 . . . . . 1 . . . . 1 #> [17,] 1 . . 1 . 1 1 . . . 1 . . . . . 1 . . . . . . 1 . . . . . 1 . . . . . . . #> [18,] 1 . . 1 . 1 . 1 . 1 . . . . . . 1 . . . . . . . 1 . . . . . 1 . . . . . 1 #>                                                                             #>  [1,] . 1 . . . . . 1 . . . . . . . . . . . . . . . 1 . . . . . . . . . . . #>  [2,] . . 1 . . 1 . . . . . . . . . . . . . . . . . . 1 . . . . . . . . . . #>  [3,] . 1 . . . . 1 . . . . . . . . . . . . . . . . 1 . . . . . . . . . . . #>  [4,] . . . 1 . . . . . . 1 . . . . . . . . . . . . . . 1 . . . . . . . . . #>  [5,] . . . . 1 . . . 1 . . . . . . . . . . . . . . . . . 1 . . . . . . . . #>  [6,] . . . 1 . . . . . 1 . . . . . . . . . . . . . . . 1 . . . . . . . . . #>  [7,] . 1 . . . . . . . . . . . 1 . . . . . . . . . . . . . 1 . . . . . . . #>  [8,] . . 1 . . . . . . . . 1 . . . . . . . . . . . . . . . . 1 . . . . . . #>  [9,] . 1 . . . . . . . . . . 1 . . . . . . . . . . . . . . 1 . . . . . . . #> [10,] . . . 1 . . . . . . . . . . . . 1 . . . . . . . . . . . . 1 . . . . . #> [11,] . . . . 1 . . . . . . . . . 1 . . . . . . . . . . . . . . . 1 . . . . #> [12,] . . . 1 . . . . . . . . . . . 1 . . . . . . . . . . . . . 1 . . . . . #> [13,] . 1 . . . . . . . . . . . . . . . . . 1 . . . . . . . . . . . 1 . . . #> [14,] 1 . 1 . . . . . . . . . . . . . . 1 . . . . . . . . . . . . . . 1 . . #> [15,] . 1 . . . . . . . . . . . . . . . . 1 . . . . . . . . . . . . 1 . . . #> [16,] . . . 1 . . . . . . . . . . . . . . . . . . 1 . . . . . . . . . . 1 . #> [17,] 1 . . . 1 . . . . . . . . . . . . . . . 1 . . . . . . . . . . . . . 1 #> [18,] . . . 1 . . . . . . . . . . . . . . . . . 1 . . . . . . . . . . . 1 . #>  #> $crossTable #>       year    age      geo        #>  [1,] \"Total\" \"Total\"  \"Total\"    #>  [2,] \"2014\"  \"Total\"  \"Total\"    #>  [3,] \"2015\"  \"Total\"  \"Total\"    #>  [4,] \"2016\"  \"Total\"  \"Total\"    #>  [5,] \"Total\" \"Y15-29\" \"Total\"    #>  [6,] \"Total\" \"Y30-64\" \"Total\"    #>  [7,] \"Total\" \"Total\"  \"Iceland\"  #>  [8,] \"Total\" \"Total\"  \"Portugal\" #>  [9,] \"Total\" \"Total\"  \"Spain\"    #> [10,] \"Total\" \"Total\"  \"EU\"       #> [11,] \"Total\" \"Total\"  \"nonEU\"    #> [12,] \"2014\"  \"Y15-29\" \"Total\"    #> [13,] \"2014\"  \"Y30-64\" \"Total\"    #> [14,] \"2015\"  \"Y15-29\" \"Total\"    #> [15,] \"2015\"  \"Y30-64\" \"Total\"    #> [16,] \"2016\"  \"Y15-29\" \"Total\"    #> [17,] \"2016\"  \"Y30-64\" \"Total\"    #> [18,] \"2014\"  \"Total\"  \"Iceland\"  #> [19,] \"2014\"  \"Total\"  \"Portugal\" #> [20,] \"2014\"  \"Total\"  \"Spain\"    #> [21,] \"2015\"  \"Total\"  \"Iceland\"  #> [22,] \"2015\"  \"Total\"  \"Portugal\" #> [23,] \"2015\"  \"Total\"  \"Spain\"    #> [24,] \"2016\"  \"Total\"  \"Iceland\"  #> [25,] \"2016\"  \"Total\"  \"Portugal\" #> [26,] \"2016\"  \"Total\"  \"Spain\"    #> [27,] \"Total\" \"Y15-29\" \"Iceland\"  #> [28,] \"Total\" \"Y15-29\" \"Portugal\" #> [29,] \"Total\" \"Y15-29\" \"Spain\"    #> [30,] \"Total\" \"Y30-64\" \"Iceland\"  #> [31,] \"Total\" \"Y30-64\" \"Portugal\" #> [32,] \"Total\" \"Y30-64\" \"Spain\"    #> [33,] \"2014\"  \"Total\"  \"EU\"       #> [34,] \"2014\"  \"Total\"  \"nonEU\"    #> [35,] \"2015\"  \"Total\"  \"EU\"       #> [36,] \"2015\"  \"Total\"  \"nonEU\"    #> [37,] \"2016\"  \"Total\"  \"EU\"       #> [38,] \"2016\"  \"Total\"  \"nonEU\"    #> [39,] \"Total\" \"Y15-29\" \"EU\"       #> [40,] \"Total\" \"Y15-29\" \"nonEU\"    #> [41,] \"Total\" \"Y30-64\" \"EU\"       #> [42,] \"Total\" \"Y30-64\" \"nonEU\"    #> [43,] \"2014\"  \"Y15-29\" \"Iceland\"  #> [44,] \"2014\"  \"Y15-29\" \"Portugal\" #> [45,] \"2014\"  \"Y15-29\" \"Spain\"    #> [46,] \"2014\"  \"Y30-64\" \"Iceland\"  #> [47,] \"2014\"  \"Y30-64\" \"Portugal\" #> [48,] \"2014\"  \"Y30-64\" \"Spain\"    #> [49,] \"2015\"  \"Y15-29\" \"Iceland\"  #> [50,] \"2015\"  \"Y15-29\" \"Portugal\" #> [51,] \"2015\"  \"Y15-29\" \"Spain\"    #> [52,] \"2015\"  \"Y30-64\" \"Iceland\"  #> [53,] \"2015\"  \"Y30-64\" \"Portugal\" #> [54,] \"2015\"  \"Y30-64\" \"Spain\"    #> [55,] \"2016\"  \"Y15-29\" \"Iceland\"  #> [56,] \"2016\"  \"Y15-29\" \"Portugal\" #> [57,] \"2016\"  \"Y15-29\" \"Spain\"    #> [58,] \"2016\"  \"Y30-64\" \"Iceland\"  #> [59,] \"2016\"  \"Y30-64\" \"Portugal\" #> [60,] \"2016\"  \"Y30-64\" \"Spain\"    #> [61,] \"2014\"  \"Y15-29\" \"EU\"       #> [62,] \"2014\"  \"Y15-29\" \"nonEU\"    #> [63,] \"2014\"  \"Y30-64\" \"EU\"       #> [64,] \"2014\"  \"Y30-64\" \"nonEU\"    #> [65,] \"2015\"  \"Y15-29\" \"EU\"       #> [66,] \"2015\"  \"Y15-29\" \"nonEU\"    #> [67,] \"2015\"  \"Y30-64\" \"EU\"       #> [68,] \"2015\"  \"Y30-64\" \"nonEU\"    #> [69,] \"2016\"  \"Y15-29\" \"EU\"       #> [70,] \"2016\"  \"Y15-29\" \"nonEU\"    #> [71,] \"2016\"  \"Y30-64\" \"EU\"       #> [72,] \"2016\"  \"Y30-64\" \"nonEU\"    #>  #> $allSums #>                       ths_per #> Total-Total-Total       680.8 #> 2014-Total-Total        222.3 #> 2015-Total-Total        225.0 #> 2016-Total-Total        233.5 #> Total-Y15-29-Total      243.5 #> Total-Y30-64-Total      437.3 #> Total-Total-Iceland      10.6 #> Total-Total-Portugal    108.8 #> Total-Total-Spain       561.4 #> Total-Total-EU          670.2 #> Total-Total-nonEU        10.6 #> 2014-Y15-29-Total        80.3 #> 2014-Y30-64-Total       142.0 #> 2015-Y15-29-Total        79.5 #> 2015-Y30-64-Total       145.5 #> 2016-Y15-29-Total        83.7 #> 2016-Y30-64-Total       149.8 #> 2014-Total-Iceland        3.3 #> 2014-Total-Portugal      31.8 #> 2014-Total-Spain        187.2 #> 2015-Total-Iceland        3.5 #> 2015-Total-Portugal      38.5 #> 2015-Total-Spain        183.0 #> 2016-Total-Iceland        3.8 #> 2016-Total-Portugal      38.5 #> 2016-Total-Spain        191.2 #> Total-Y15-29-Iceland      5.6 #> Total-Y15-29-Portugal    38.5 #> Total-Y15-29-Spain      199.4 #> Total-Y30-64-Iceland      5.0 #> Total-Y30-64-Portugal    70.3 #> Total-Y30-64-Spain      362.0 #> 2014-Total-EU           219.0 #> 2014-Total-nonEU          3.3 #> 2015-Total-EU           221.5 #> 2015-Total-nonEU          3.5 #> 2016-Total-EU           229.7 #> 2016-Total-nonEU          3.8 #> Total-Y15-29-EU         237.9 #> Total-Y15-29-nonEU        5.6 #> Total-Y30-64-EU         432.3 #> Total-Y30-64-nonEU        5.0 #> 2014-Y15-29-Iceland       1.8 #> 2014-Y15-29-Portugal     11.6 #> 2014-Y15-29-Spain        66.9 #> 2014-Y30-64-Iceland       1.5 #> 2014-Y30-64-Portugal     20.2 #> 2014-Y30-64-Spain       120.3 #> 2015-Y15-29-Iceland       1.9 #> 2015-Y15-29-Portugal     14.2 #> 2015-Y15-29-Spain        63.4 #> 2015-Y30-64-Iceland       1.6 #> 2015-Y30-64-Portugal     24.3 #> 2015-Y30-64-Spain       119.6 #> 2016-Y15-29-Iceland       1.9 #> 2016-Y15-29-Portugal     12.7 #> 2016-Y15-29-Spain        69.1 #> 2016-Y30-64-Iceland       1.9 #> 2016-Y30-64-Portugal     25.8 #> 2016-Y30-64-Spain       122.1 #> 2014-Y15-29-EU           78.5 #> 2014-Y15-29-nonEU         1.8 #> 2014-Y30-64-EU          140.5 #> 2014-Y30-64-nonEU         1.5 #> 2015-Y15-29-EU           77.6 #> 2015-Y15-29-nonEU         1.9 #> 2015-Y30-64-EU          143.9 #> 2015-Y30-64-nonEU         1.6 #> 2016-Y15-29-EU           81.8 #> 2016-Y15-29-nonEU         1.9 #> 2016-Y30-64-EU          147.9 #> 2016-Y30-64-nonEU         1.9 #>  FormulaSums(x, ths_per ~ year:age:geo -1) #>                      ths_per #> 2014-Y15-29-Iceland      1.8 #> 2014-Y15-29-Portugal    11.6 #> 2014-Y15-29-Spain       66.9 #> 2014-Y30-64-Iceland      1.5 #> 2014-Y30-64-Portugal    20.2 #> 2014-Y30-64-Spain      120.3 #> 2015-Y15-29-Iceland      1.9 #> 2015-Y15-29-Portugal    14.2 #> 2015-Y15-29-Spain       63.4 #> 2015-Y30-64-Iceland      1.6 #> 2015-Y30-64-Portugal    24.3 #> 2015-Y30-64-Spain      119.6 #> 2016-Y15-29-Iceland      1.9 #> 2016-Y15-29-Portugal    12.7 #> 2016-Y15-29-Spain       69.1 #> 2016-Y30-64-Iceland      1.9 #> 2016-Y30-64-Portugal    25.8 #> 2016-Y30-64-Spain      122.1 m <- Formula2ModelMatrix(x, ~ year*geo + year*eu) print(m[1:3, ], col.names = TRUE) #> <S4 Type Object> #> attr(,\"i\") #>  [1] 0 1 2 0 1 2 1 2 0 0 2 1 1 2 0 0 2 1 #> attr(,\"p\") #>  [1]  0  3  6  6  6  7  8  9 11 12 13 14 15 15 15 15 15 15 15 17 18 18 18 18 18 #> attr(,\"Dim\") #> [1]  3 24 #> attr(,\"Dimnames\") #> attr(,\"Dimnames\")[[1]] #> NULL #>  #> attr(,\"Dimnames\")[[2]] #>  [1] \"Total-Total\"    \"2014-Total\"     \"2015-Total\"     \"2016-Total\"     #>  [5] \"Total-Iceland\"  \"Total-Portugal\" \"Total-Spain\"    \"Total-EU\"       #>  [9] \"Total-nonEU\"    \"2014-Iceland\"   \"2014-Portugal\"  \"2014-Spain\"     #> [13] \"2015-Iceland\"   \"2015-Portugal\"  \"2015-Spain\"     \"2016-Iceland\"   #> [17] \"2016-Portugal\"  \"2016-Spain\"     \"2014-EU\"        \"2014-nonEU\"     #> [21] \"2015-EU\"        \"2015-nonEU\"     \"2016-EU\"        \"2016-nonEU\"     #>  #> attr(,\"x\") #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> attr(,\"factors\") #> list() #> attr(,\"class\") #> [1] \"dgCMatrix\" #> attr(,\"class\")attr(,\"package\") #> [1] \"Matrix\" attr(m, \"startCol\") #> (Intercept)        year         geo          eu    year:geo     year:eu  #>           1           2           5           8          10          19"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIndependent.html","id":null,"dir":"Reference","previous_headings":"","what":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","title":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","text":"function written primarily large sparse matrices integers even correctly primarily written dummy matrices (0s 1s input matrix).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIndependent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","text":"","code":"GaussIndependent(   x,   printInc = FALSE,   tolGauss = (.Machine$double.eps)^(1/2),   testMaxInt = 0,   allNumeric = FALSE )  GaussRank(x, printInc = FALSE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIndependent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","text":"x (sparse) matrix printInc Printing \"...\" console TRUE tolGauss tolerance parameter sparse Gaussian elimination linear dependency. parameter used cases integer calculation used. testMaxInt Parameter testing: Integer overflow situation forced testMaxInt exceeded allNumeric Parameter testing: calculations use numeric algorithm (integer overflow) TRUE","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIndependent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","text":"List logical vectors specifying independent rows columns","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIndependent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","text":"GaussRank returns rank","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIndependent.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","text":"main algorithm based integers exact calculations. integers used (input overflow), algorithm switches. printInc = TRUE parameter, ..... change ----- switching numeric algorithm. numeric algorithm, kind tolerance linear dependency included. tolerance designed mind input matrix dummy matrix.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIndependent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linearly independent rows and columns by Gaussian elimination — GaussIndependent","text":"","code":"x <- ModelMatrix(SSBtoolsData(\"z2\"), formula = ~fylke + kostragr * hovedint - 1)  GaussIndependent(x) #> $rows #>  [1]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE  TRUE #> [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE #> [25] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE #> [37] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE #>  #> $columns #>  [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE FALSE #> [13]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE #>  GaussRank(x) #> [1] 13 GaussRank(Matrix::t(x)) #> [1] 13  if (FALSE) { # \\dontrun{ # For comparison, qr-based rank may not work rankMatrix(x, method = \"qr\")  # Dense qr works  qr(as.matrix(x))$rank } # }"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIterationFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"An iFunction argument to GaussSuppression — GaussIterationFunction","title":"An iFunction argument to GaussSuppression — GaussIterationFunction","text":"Use function iFunction write using seven first parameters also using ....","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIterationFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An iFunction argument to GaussSuppression — GaussIterationFunction","text":"","code":"GaussIterationFunction(i, I, j, J, true, false, na, filename = NULL, ...)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIterationFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An iFunction argument to GaussSuppression — GaussIterationFunction","text":"Number candidates processed (columns x) Total number candidates processed (columns x) j Number eliminated dimensions (rows x) J Total number dimensions (rows x) true Candidates decided suppressed false Candidates decided suppressed na Candidates decided filename non-NULL, arguments saved file. Note GaussSuppression passes parameter via .... ... Extra parameters","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIterationFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An iFunction argument to GaussSuppression — GaussIterationFunction","text":"NULL","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussIterationFunction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An iFunction argument to GaussSuppression — GaussIterationFunction","text":"number candidates decided (true false) may differ number candidates processed () due parameter removeDuplicated decision unprocessed candidates can found due empty columns.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussSuppression.html","id":null,"dir":"Reference","previous_headings":"","what":"Secondary suppression by Gaussian elimination — GaussSuppression","title":"Secondary suppression by Gaussian elimination — GaussSuppression","text":"Sequentially secondary suppression candidates (columns x) used reduce x-matrix Gaussian elimination. Candidates completely eliminate one primary suppressed cells (columns x) omitted made secondary suppressed. ensures primary suppressed cells depend linearly non-suppressed cells. order input candidates important choice. singleton problem related problem zeros also handled.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussSuppression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Secondary suppression by Gaussian elimination — GaussSuppression","text":"","code":"GaussSuppression(   x,   candidates = 1:ncol(x),   primary = NULL,   forced = NULL,   hidden = NULL,   singleton = rep(FALSE, nrow(x)),   singletonMethod = \"anySum\",   printInc = TRUE,   tolGauss = (.Machine$double.eps)^(1/2),   whenEmptySuppressed = warning,   whenEmptyUnsuppressed = message,   whenPrimaryForced = warning,   removeDuplicated = TRUE,   iFunction = GaussIterationFunction,   iWait = Inf,   xExtraPrimary = NULL,   unsafeAsNegative = FALSE,   printXdim = FALSE,   cell_grouping = NULL,   table_id = NULL,   auto_anySumNOTprimary = TRUE,   auto_subSumAny = TRUE,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussSuppression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Secondary suppression by Gaussian elimination — GaussSuppression","text":"x Matrix relates cells published suppressed inner cells. yPublish = crossprod(x,yInner) candidates Indices candidates secondary suppression primary Indices primary suppressed cells forced Indices forced suppressed. forced precedence primary. See whenPrimaryForced . hidden Indices removed candidates input (see details) singleton Logical integer vector length nrow(x) specifying inner cells singleton handling. Normally, frequency tables, means cells 1s 0s non-suppressed cells 0s 0s suppressed. singleton methods, integer values representing unique magnitude table contributors needed. singleton methods, values conversion .logical matter. singletonMethod Method handling problem singletons zeros: \"anySum\" (default), \"anySum0\", \"anySumNOTprimary\", \"subSum\", \"subSpace\", \"sub2Sum\", \"none\" NumSingleton method (see details). printInc Printing \"...\" console TRUE tolGauss tolerance parameter sparse Gaussian elimination linear dependency. parameter used cases integer calculation used. whenEmptySuppressed Function called empty input primary suppressed cells problematic. Supply NULL nothing. whenEmptyUnsuppressed Function called empty input candidate cells may problematic. Supply NULL nothing. whenPrimaryForced Function called forced cells primary suppressed (suppression ignored). Supply NULL nothing. function also called forced cells marked singletons (ignored). removeDuplicated Specifies whether remove duplicated columns rows x running main algorithm. Removing duplicates results faster algorithm generally maintaining results. cases, singleton handling magnitude tables may affected. cases, singleton handling generally improved. Singletons considered removing duplicate rows, duplicates removed. available options removeDuplicated follows: TRUE (default): Removes duplicate columns rows. FALSE: removal duplicates. \"cols\": Removes duplicate columns. \"rows\": Removes duplicate rows. \"rows2\": Removes duplicate non-singleton rows way preserves singleton handling. Combined possibilities: Variants can combined \"_\". example, \"cols_rows\" equivalent TRUE, \"cols_rows2\" represents alternative variant. Combining \"rows\" \"rows2\" possible, superfluous calculations performed. \"test\": special variant testing purposes. four configurations TRUE, FALSE, \"cols_rows2\", \"rows\" executed. iFunction function called iterations. See default function, GaussIterationFunction, description parameters. iWait minimum number seconds call iFunction. Whenever iWait<Inf, iFunction also called last iteration. xExtraPrimary Extra x-matrix defines extra primary suppressed cells addition defined inputs. unsafeAsNegative TRUE, unsafe primary cells due forced cells included output vector negative indices. printXdim set TRUE, printInc parameter also automatically set TRUE. Additionally, dimensions x matrix printed twice: first, dimensions input x, potentially extended xExtraPrimary; second, dimensions applying singletonMethod removeDuplicated. cell_grouping Numeric vector indicating suppression group membership. Cells non-zero value belong suppression group, meaning suppressed non-suppressed together. value 0 indicates cell member suppression group. table_id parameter can provided addition cell_grouping reduce computation time, x block-diagonal matrix. block represents separate table, table_id indicates table affiliation. Note: check performed verify table_id corresponds block structure x. auto_anySumNOTprimary TRUE (default), singletonMethod \"anySumNOTprimary\" may forced check indicates singletons primary suppressed. Set FALSE cases x matrix already undergone duplicate row removal, check may produce incorrect results. auto_subSumAny TRUE (default), singletonMethod \"anySum\", internally changed \"subSumAny\" forced cells. done give information unsafe cells. ... Extra unused parameters","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussSuppression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Secondary suppression by Gaussian elimination — GaussSuppression","text":"Secondary suppression indices","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussSuppression.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Secondary suppression by Gaussian elimination — GaussSuppression","text":"possible specify many () indices candidates. Indices specified primary hidded removed. Hidden indices (candidates primary) refer cells published, need protection. Singleton methods frequency tables: singleton methods, except \"sub2Sum\" NumSingleton methods, implemented frequency tables mind. singleton method \"subSum\" makes new virtual primary suppressed cells, sum singletons within group. \"subSpace\" method conservative ignores singleton dimensions looking linear dependency. default method, \"anySum\", two. Instead making virtual cells sums within groups, aim handle possible sums, also across groups. addition, \"subSumSpace\"  \"subSumAny\" possible methods, primarily testing. methods similar \"subSpace\" \"anySum\", additional cells created \"subSum\". believed extra cells redundant. Note order give information unsafe cells, \"anySum\"  internally changed \"subSumAny\" forced cells. methods assume published singletons primary suppressed. case, either \"anySumNOTprimary\" \"anySum0\" must used. Notably, \"anySum0\" enhancement \"anySumNOTprimary\" situations zeros singletons. Using method avoids suppressing zero marginal along one children. Singleton methods magnitude tables: singleton method \"sub2Sum\" makes new virtual primary suppressed cells, sum two inner cells. done group contains exactly two primary suppressed inner cells provided least one singleton. first method implemented. magnitude methods follow coding according NumSingleton. \"sub2Sum\" method equivalent \"numFFT\". Also note \"num\", \"numFFF\" \"numFTF\" equivalent \"none\". Combined: advanced use, singleton can two-element list names \"freq\" \"num\". singletonMethod must corresponding named two-element vector. example: singletonMethod = c(freq = \"anySumNOTprimary\", num = \"sub2Sum\")","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussSuppression.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Secondary suppression by Gaussian elimination — GaussSuppression","text":"Langsrud, Ø. (2024): “Secondary Cell Suppression Gaussian Elimination: Algorithm Suitable Handling Issues Zeros Singletons”. Presented : Privacy statistical databases, Antibes, France. September 25-27, 2024. doi:10.1007/978-3-031-69651-0_6","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/GaussSuppression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Secondary suppression by Gaussian elimination — GaussSuppression","text":"","code":"# Input data df <- data.frame(values = c(1, 1, 1, 5, 5, 9, 9, 9, 9, 9, 0, 0, 0, 7, 7),                   var1 = rep(1:3, each = 5),                   var2 = c(\"A\", \"B\", \"C\", \"D\", \"E\"), stringsAsFactors = FALSE)  # Make output data frame and x  fs <- FormulaSums(df, values ~ var1 * var2, crossTable = TRUE, makeModelMatrix = TRUE) x <- fs$modelMatrix datF <- data.frame(fs$crossTable, values = as.vector(fs$allSums))  # Add primary suppression  datF$primary <- datF$values datF$primary[datF$values < 5 & datF$values > 0] <- NA datF$suppressedA <- datF$primary datF$suppressedB <- datF$primary datF$suppressedC <- datF$primary  # zero secondary suppressed datF$suppressedA[GaussSuppression(x, primary = is.na(datF$primary))] <- NA #> GaussSuppression_anySum: .....................  # zero not secondary suppressed by first in ordering datF$suppressedB[GaussSuppression(x, c(which(datF$values == 0), which(datF$values > 0)),                              primary = is.na(datF$primary))] <- NA #> GaussSuppression_anySum: .....................  # with singleton datF$suppressedC[GaussSuppression(x, c(which(datF$values == 0), which(datF$values > 0)),                              primary = is.na(datF$primary), singleton = df$values == 1)] <- NA #> GaussSuppression_anySum: .....................  datF #>     var1  var2 values primary suppressedA suppressedB suppressedC #> 1  Total Total     72      72          72          72          72 #> 2      1 Total     13      13          13          13          13 #> 3      2 Total     45      45          45          45          45 #> 4      3 Total     14      14          14          14          14 #> 5  Total     A     10      10          10          10          10 #> 6  Total     B     10      10          10          10          10 #> 7  Total     C     10      10          10          10          10 #> 8  Total     D     21      21          21          21          21 #> 9  Total     E     21      21          21          21          21 #> 10     1     A      1      NA          NA          NA          NA #> 11     1     B      1      NA          NA          NA          NA #> 12     1     C      1      NA          NA          NA          NA #> 13     1     D      5       5           5           5           5 #> 14     1     E      5       5           5           5          NA #> 15     2     A      9       9           9          NA          NA #> 16     2     B      9       9           9          NA          NA #> 17     2     C      9       9           9          NA          NA #> 18     2     D      9       9           9           9           9 #> 19     2     E      9       9           9           9          NA #> 20     3     A      0       0          NA           0           0 #> 21     3     B      0       0          NA           0           0 #> 22     3     C      0       0          NA           0           0 #> 23     3     D      7       7           7           7           7 #> 24     3     E      7       7           7           7           7    #### with cell_grouping  candidates <- c(which(datF$values == 0), which(datF$values > 0)) primary <- 10:12 cell_grouping <- rep(0, 24)  # same as without cell_grouping GaussSuppression(x, candidates, primary, cell_grouping = cell_grouping) #> GaussSuppression_anySum: ..................... #> [1] 15 16 17  cell_grouping[c(16, 20:21)] <- 1 cell_grouping[c(10, 4)] <- 2  # 10 is primary  GaussSuppression(x, candidates, primary, cell_grouping = cell_grouping) #> GaussSuppression_anySum: .................... #> [1]  3  4  6  9 15 17 24"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding hierarchical variable groups — HierarchicalGroups","title":"Finding hierarchical variable groups — HierarchicalGroups","text":"According (factor) levels variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding hierarchical variable groups — HierarchicalGroups","text":"","code":"HierarchicalGroups(   x = NULL,   mainName = TRUE,   eachName = FALSE,   fCorr = FactorLevCorr(x) )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding hierarchical variable groups — HierarchicalGroups","text":"x Matrix data frame containing variables mainName TRUE output list named according first variable group. eachName TRUE variable names output instead indices. fCorr non-null, x needed input.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding hierarchical variable groups — HierarchicalGroups","text":"Output list containing groups. First variable levels.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding hierarchical variable groups — HierarchicalGroups","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finding hierarchical variable groups — HierarchicalGroups","text":"","code":"dataset <- SSBtoolsData(\"example1\") HierarchicalGroups(dataset[1:2], eachName = TRUE) #> $age #> [1] \"age\" #>  #> $geo #> [1] \"geo\" #>  HierarchicalGroups(dataset[2:3]) #> $geo #> [1] 1 2 #>  HierarchicalGroups(dataset[1:4], eachName = TRUE) #> $age #> [1] \"age\" #>  #> $geo #> [1] \"geo\" \"eu\"  #>  #> $year #> [1] \"year\" #>   HierarchicalGroups(SSBtoolsData(\"magnitude1\")[1:4]) #> $sector4 #> [1] 1 2 #>  #> $geo #> [1] 3 4 #>    x <- rep(c(\"A\",\"B\",\"C\"),3)  y <- rep(c(11,22,11),3)  z <- c(1,1,1,2,2,2,3,3,3)  zy <- paste(z,y,sep=\"\")  m <- cbind(x,y,z,zy)  HierarchicalGroups(m) #> $x #> [1] 1 2 #>  #> $zy #> [1] 4 2 #>  #> $zy #> [1] 4 3 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups2.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding hierarchical variable groups — HierarchicalGroups2","title":"Finding hierarchical variable groups — HierarchicalGroups2","text":"HierarchicalGroups() eachName = TRUE, output belonging mainName combined.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding hierarchical variable groups — HierarchicalGroups2","text":"","code":"HierarchicalGroups2(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding hierarchical variable groups — HierarchicalGroups2","text":"x Matrix data frame containing variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding hierarchical variable groups — HierarchicalGroups2","text":"List containing groups.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding hierarchical variable groups — HierarchicalGroups2","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups3.html","id":null,"dir":"Reference","previous_headings":"","what":"Finding hierarchical variable groups — HierarchicalGroups3","title":"Finding hierarchical variable groups — HierarchicalGroups3","text":"HierarchicalGroups() eachName = FALSE, output belonging mainName combined.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finding hierarchical variable groups — HierarchicalGroups3","text":"","code":"HierarchicalGroups3(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finding hierarchical variable groups — HierarchicalGroups3","text":"x Matrix data frame containing variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finding hierarchical variable groups — HierarchicalGroups3","text":"List containing groups.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalGroups3.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finding hierarchical variable groups — HierarchicalGroups3","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalWildcardGlobbing.html","id":null,"dir":"Reference","previous_headings":"","what":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","title":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","text":"Find combinations present input data frame , input list, find possible combinations meet requirements.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalWildcardGlobbing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","text":"","code":"HierarchicalWildcardGlobbing(   z,   wg,   useUnique = NULL,   useFactor = FALSE,   makeWarning = TRUE,   printInfo = FALSE,   useMatrixToDataFrame = TRUE,   invert = \"!\" )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalWildcardGlobbing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","text":"z list data.frame wg data.frame data globbing wildcards useUnique Logical variable recoding within algorithm. default (NULL) automatic decision made. useFactor TRUE, internal factor recoding used. makeWarning TRUE, warning made cases unused variables. variables common z wg used. printInfo TRUE, information printed process. useMatrixToDataFrame TRUE, special functions (DataFrameToMatrix/MatrixToDataFrame) improving speed memory utilized. invert Character invert single selection.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalWildcardGlobbing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","text":"data.frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalWildcardGlobbing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","text":"final variable combinations must meet requirements positive sign group must match requirements negative sign groups.function implemented calling WildcardGlobbing several times within algorithm uses hierarchical clustering (hclust).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalWildcardGlobbing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchicalWildcardGlobbing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find variable combinations by advanced wildcard/globbing specifications. — HierarchicalWildcardGlobbing","text":"","code":"# useUnique=NULL betyr valg ut fra antall rader i kombinasjonsfil data(precip) data(mtcars) codes <- as.character(c(100, 200, 300, 600, 700, 101, 102, 103, 104, 134, 647, 783,                          13401, 13402, 64701, 64702))   # Create list input zList <- list(car = rownames(mtcars), wt = as.character(1000 * mtcars$wt),                city = names(precip), code = codes)  # Create data.frame input m <- cbind(car = rownames(mtcars), wt = as.character(1000 * mtcars$wt)) zFrame <- data.frame(m[rep(1:NROW(m), each = 35), ],                       city = names(precip), code = codes, stringsAsFactors = FALSE)  # Create globbing/wildcards input wg <- data.frame(rbind(c(\"Merc*\", \"\"    , \"\"    , \"?00\"  ),                         c(\"F*\"   , \"\"    , \"\"    , \"?????\"),                         c(\"\"     , \"???0\", \"C*\"  , \"\"     ),                         c(\"\"     , \"\"    , \"!Co*\", \"\"     ),                         c(\"\"     , \"\"    , \"?i*\" , \"????2\"),                         c(\"\"     , \"\"    , \"?h*\" , \"????1\")),             sign = c(\"+\", \"+\", \"+\", \"+\", \"-\", \"-\"), stringsAsFactors = FALSE) names(wg)[1:4] <- names(zList)    # ===================================================================  #   Finding unique combinations present in the input data frame # ===================================================================   # Using first row of wg. Combinations of car starting with Merc  # and three-digit code ending with 00 HierarchicalWildcardGlobbing(zFrame[, c(1, 4)], wg[1, c(1, 4, 5)]) #>            car code #> 1    Merc 240D  100 #> 2     Merc 230  100 #> 3     Merc 280  100 #> 4    Merc 280C  100 #> 5   Merc 450SE  100 #> 6   Merc 450SL  100 #> 7  Merc 450SLC  100 #> 8    Merc 240D  200 #> 9     Merc 230  200 #> 10    Merc 280  200 #> 11   Merc 280C  200 #> 12  Merc 450SE  200 #> 13  Merc 450SL  200 #> 14 Merc 450SLC  200 #> 15   Merc 240D  300 #> 16    Merc 230  300 #> 17    Merc 280  300 #> 18   Merc 280C  300 #> 19  Merc 450SE  300 #> 20  Merc 450SL  300 #> 21 Merc 450SLC  300 #> 22   Merc 240D  600 #> 23    Merc 230  600 #> 24    Merc 280  600 #> 25   Merc 280C  600 #> 26  Merc 450SE  600 #> 27  Merc 450SL  600 #> 28 Merc 450SLC  600 #> 29   Merc 240D  700 #> 30    Merc 230  700 #> 31    Merc 280  700 #> 32   Merc 280C  700 #> 33  Merc 450SE  700 #> 34  Merc 450SL  700 #> 35 Merc 450SLC  700  # Using first row of wg. Combinations of all four variables HierarchicalWildcardGlobbing(zFrame, wg[1, ]) #>            car code   wt                city #> 1   Merc 450SL  700 3730              Mobile #> 2    Merc 280C  100 3440             Phoenix #> 3    Merc 280C  200 3440         Little Rock #> 4    Merc 280C  300 3440         Los Angeles #> 5    Merc 280C  600 3440          Sacramento #> 6    Merc 280C  700 3440       San Francisco #> 7     Merc 230  100 3150            Hartford #> 8     Merc 230  200 3150          Wilmington #> 9     Merc 230  300 3150          Washington #> 10    Merc 230  600 3150        Jacksonville #> 11    Merc 230  700 3150               Miami #> 12  Merc 450SL  100 3730               Miami #> 13  Merc 450SL  200 3730             Atlanta #> 14  Merc 450SL  300 3730            Honolulu #> 15  Merc 450SL  600 3730               Boise #> 16  Merc 450SL  700 3730             Chicago #> 17   Merc 280C  100 3440        Indianapolis #> 18   Merc 280C  200 3440          Des Moines #> 19   Merc 280C  300 3440             Wichita #> 20   Merc 280C  600 3440          Louisville #> 21   Merc 280C  700 3440         New Orleans #> 22   Merc 240D  600 3190            Portland #> 23    Merc 230  100 3150           Baltimore #> 24    Merc 230  200 3150              Boston #> 25    Merc 230  300 3150             Detroit #> 26    Merc 230  600 3150    Sault Ste. Marie #> 27    Merc 230  700 3150              Duluth #> 28  Merc 450SL  100 3730              Duluth #> 29  Merc 450SL  200 3730 Minneapolis/St Paul #> 30  Merc 450SL  300 3730             Jackson #> 31  Merc 450SL  600 3730         Kansas City #> 32  Merc 450SL  700 3730            St Louis #> 33   Merc 280C  100 3440               Omaha #> 34  Merc 450SE  200 4070                Reno #> 35  Merc 450SE  300 4070             Concord #> 36  Merc 450SE  600 4070       Atlantic City #> 37  Merc 450SE  700 4070         Albuquerque #> 38    Merc 280  100 3440             Buffalo #> 39    Merc 280  200 3440            New York #> 40    Merc 280  300 3440           Charlotte #> 41    Merc 280  600 3440             Raleigh #> 42    Merc 280  700 3440             Bismark #> 43 Merc 450SLC  100 3780             Bismark #> 44 Merc 450SLC  200 3780          Cincinnati #> 45   Merc 240D  100 3190           Cleveland #> 46 Merc 450SLC  300 3780           Cleveland #> 47   Merc 240D  200 3190            Columbus #> 48 Merc 450SLC  600 3780            Columbus #> 49   Merc 240D  300 3190       Oklahoma City #> 50 Merc 450SLC  700 3780       Oklahoma City #> 51   Merc 240D  700 3190        Philadelphia #> 52  Merc 450SE  100 4070        Philadelphia #> 53  Merc 450SE  200 4070           Pittsburg #> 54  Merc 450SE  300 4070          Providence #> 55  Merc 450SE  600 4070            Columbia #> 56  Merc 450SE  700 4070         Sioux Falls #> 57    Merc 280  100 3440           Nashville #> 58    Merc 280  200 3440              Dallas #> 59    Merc 280  300 3440             El Paso #> 60    Merc 280  600 3440             Houston #> 61    Merc 280  700 3440      Salt Lake City #> 62 Merc 450SLC  100 3780      Salt Lake City #> 63 Merc 450SLC  200 3780          Burlington #> 64   Merc 240D  100 3190             Norfolk #> 65 Merc 450SLC  300 3780             Norfolk #> 66   Merc 240D  200 3190            Richmond #> 67 Merc 450SLC  600 3780            Richmond #> 68   Merc 240D  300 3190      Seattle Tacoma #> 69 Merc 450SLC  700 3780      Seattle Tacoma #> 70   Merc 240D  600 3190             Spokane #> 71   Merc 240D  700 3190          Charleston #> 72  Merc 450SE  100 4070          Charleston #> 73  Merc 450SE  200 4070           Milwaukee #> 74  Merc 450SE  300 4070            Cheyenne #> 75  Merc 450SE  600 4070            San Juan  # More combinations when using second row also HierarchicalWildcardGlobbing(zFrame, wg[1:2, ]) #>                car  code   wt                city #> 1       Merc 450SL   700 3730              Mobile #> 2        Merc 280C   100 3440             Phoenix #> 3        Merc 280C   200 3440         Little Rock #> 4        Merc 280C   300 3440         Los Angeles #> 5        Merc 280C   600 3440          Sacramento #> 6        Merc 280C   700 3440       San Francisco #> 7         Merc 230   100 3150            Hartford #> 8   Ford Pantera L 13401 3170            Hartford #> 9         Merc 230   200 3150          Wilmington #> 10  Ford Pantera L 13402 3170          Wilmington #> 11        Merc 230   300 3150          Washington #> 12  Ford Pantera L 64701 3170          Washington #> 13        Merc 230   600 3150        Jacksonville #> 14  Ford Pantera L 64702 3170        Jacksonville #> 15        Merc 230   700 3150               Miami #> 16      Merc 450SL   100 3730               Miami #> 17      Merc 450SL   200 3730             Atlanta #> 18      Merc 450SL   300 3730            Honolulu #> 19      Merc 450SL   600 3730               Boise #> 20      Merc 450SL   700 3730             Chicago #> 21       Merc 280C   100 3440        Indianapolis #> 22       Merc 280C   200 3440          Des Moines #> 23       Merc 280C   300 3440             Wichita #> 24       Merc 280C   600 3440          Louisville #> 25       Merc 280C   700 3440         New Orleans #> 26       Merc 240D   600 3190            Portland #> 27        Merc 230   100 3150           Baltimore #> 28  Ford Pantera L 13401 3170           Baltimore #> 29        Merc 230   200 3150              Boston #> 30  Ford Pantera L 13402 3170              Boston #> 31        Merc 230   300 3150             Detroit #> 32  Ford Pantera L 64701 3170             Detroit #> 33        Merc 230   600 3150    Sault Ste. Marie #> 34  Ford Pantera L 64702 3170    Sault Ste. Marie #> 35        Merc 230   700 3150              Duluth #> 36      Merc 450SL   100 3730              Duluth #> 37      Merc 450SL   200 3730 Minneapolis/St Paul #> 38      Merc 450SL   300 3730             Jackson #> 39      Merc 450SL   600 3730         Kansas City #> 40      Merc 450SL   700 3730            St Louis #> 41       Merc 280C   100 3440               Omaha #> 42      Merc 450SE   200 4070                Reno #> 43      Merc 450SE   300 4070             Concord #> 44       Fiat X1-9 13401 1935             Concord #> 45      Merc 450SE   600 4070       Atlantic City #> 46       Fiat X1-9 13402 1935       Atlantic City #> 47      Merc 450SE   700 4070         Albuquerque #> 48       Fiat X1-9 64701 1935         Albuquerque #> 49       Fiat X1-9 64702 1935              Albany #> 50        Merc 280   100 3440             Buffalo #> 51    Ferrari Dino 13401 2770             Buffalo #> 52        Merc 280   200 3440            New York #> 53    Ferrari Dino 13402 2770            New York #> 54        Merc 280   300 3440           Charlotte #> 55    Ferrari Dino 64701 2770           Charlotte #> 56        Merc 280   600 3440             Raleigh #> 57    Ferrari Dino 64702 2770             Raleigh #> 58        Merc 280   700 3440             Bismark #> 59     Merc 450SLC   100 3780             Bismark #> 60        Fiat 128 13401 2200             Bismark #> 61     Merc 450SLC   200 3780          Cincinnati #> 62        Fiat 128 13402 2200          Cincinnati #> 63       Merc 240D   100 3190           Cleveland #> 64     Merc 450SLC   300 3780           Cleveland #> 65        Fiat 128 64701 2200           Cleveland #> 66       Merc 240D   200 3190            Columbus #> 67     Merc 450SLC   600 3780            Columbus #> 68        Fiat 128 64702 2200            Columbus #> 69       Merc 240D   300 3190       Oklahoma City #> 70     Merc 450SLC   700 3780       Oklahoma City #> 71       Merc 240D   700 3190        Philadelphia #> 72      Merc 450SE   100 4070        Philadelphia #> 73      Merc 450SE   200 4070           Pittsburg #> 74      Merc 450SE   300 4070          Providence #> 75       Fiat X1-9 13401 1935          Providence #> 76      Merc 450SE   600 4070            Columbia #> 77       Fiat X1-9 13402 1935            Columbia #> 78      Merc 450SE   700 4070         Sioux Falls #> 79       Fiat X1-9 64701 1935         Sioux Falls #> 80       Fiat X1-9 64702 1935             Memphis #> 81        Merc 280   100 3440           Nashville #> 82    Ferrari Dino 13401 2770           Nashville #> 83        Merc 280   200 3440              Dallas #> 84    Ferrari Dino 13402 2770              Dallas #> 85        Merc 280   300 3440             El Paso #> 86    Ferrari Dino 64701 2770             El Paso #> 87        Merc 280   600 3440             Houston #> 88    Ferrari Dino 64702 2770             Houston #> 89        Merc 280   700 3440      Salt Lake City #> 90     Merc 450SLC   100 3780      Salt Lake City #> 91        Fiat 128 13401 2200      Salt Lake City #> 92     Merc 450SLC   200 3780          Burlington #> 93        Fiat 128 13402 2200          Burlington #> 94       Merc 240D   100 3190             Norfolk #> 95     Merc 450SLC   300 3780             Norfolk #> 96        Fiat 128 64701 2200             Norfolk #> 97       Merc 240D   200 3190            Richmond #> 98     Merc 450SLC   600 3780            Richmond #> 99        Fiat 128 64702 2200            Richmond #> 100      Merc 240D   300 3190      Seattle Tacoma #> 101    Merc 450SLC   700 3780      Seattle Tacoma #> 102      Merc 240D   600 3190             Spokane #> 103      Merc 240D   700 3190          Charleston #> 104     Merc 450SE   100 4070          Charleston #> 105     Merc 450SE   200 4070           Milwaukee #> 106     Merc 450SE   300 4070            Cheyenne #> 107      Fiat X1-9 13401 1935            Cheyenne #> 108     Merc 450SE   600 4070            San Juan #> 109      Fiat X1-9 13402 1935            San Juan  # Less combinations when using third row also  # since last digit of wt must be 0 and only cities starting with C HierarchicalWildcardGlobbing(zFrame, wg[1:3, ]) #>             car  code   wt       city #> 1    Merc 450SL   700 3730    Chicago #> 2    Merc 450SE   300 4070    Concord #> 3      Merc 280   300 3440  Charlotte #> 4  Ferrari Dino 64701 2770  Charlotte #> 5   Merc 450SLC   200 3780 Cincinnati #> 6      Fiat 128 13402 2200 Cincinnati #> 7     Merc 240D   100 3190  Cleveland #> 8   Merc 450SLC   300 3780  Cleveland #> 9      Fiat 128 64701 2200  Cleveland #> 10    Merc 240D   200 3190   Columbus #> 11  Merc 450SLC   600 3780   Columbus #> 12     Fiat 128 64702 2200   Columbus #> 13   Merc 450SE   600 4070   Columbia #> 14    Merc 240D   700 3190 Charleston #> 15   Merc 450SE   100 4070 Charleston #> 16   Merc 450SE   300 4070   Cheyenne   # Less combinations when using fourth row also since city cannot start with Co HierarchicalWildcardGlobbing(zFrame, wg[1:4, ]) #>             car  code   wt       city #> 1    Merc 450SL   700 3730    Chicago #> 2      Merc 280   300 3440  Charlotte #> 3  Ferrari Dino 64701 2770  Charlotte #> 4   Merc 450SLC   200 3780 Cincinnati #> 5      Fiat 128 13402 2200 Cincinnati #> 6     Merc 240D   100 3190  Cleveland #> 7   Merc 450SLC   300 3780  Cleveland #> 8      Fiat 128 64701 2200  Cleveland #> 9     Merc 240D   700 3190 Charleston #> 10   Merc 450SE   100 4070 Charleston #> 11   Merc 450SE   300 4070   Cheyenne  # Less combinations when using fourth row also  # since specific combinations of city and code are removed HierarchicalWildcardGlobbing(zFrame, wg) #>           car  code   wt       city #> 1  Merc 450SL   700 3730    Chicago #> 2    Merc 280   300 3440  Charlotte #> 3 Merc 450SLC   200 3780 Cincinnati #> 4   Merc 240D   100 3190  Cleveland #> 5 Merc 450SLC   300 3780  Cleveland #> 6    Fiat 128 64701 2200  Cleveland #> 7   Merc 240D   700 3190 Charleston #> 8  Merc 450SE   100 4070 Charleston #> 9  Merc 450SE   300 4070   Cheyenne   # ===================================================================  #  Using list input to create all possible combinations # ===================================================================  dim(HierarchicalWildcardGlobbing(zList, wg)) #> [1] 4788    4  # same result with as.list since same unique values of each variable dim(HierarchicalWildcardGlobbing(as.list(zFrame), wg)) #> [1] 4788    4"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"Make model matrix, x, corresponds data represents hierarchies crossed. means aggregates corresponding numerical variables can computed t(x) %*% y,  y matrix one column numerical variable.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"","code":"Hierarchies2ModelMatrix(   data,   hierarchies,   inputInOutput = TRUE,   crossTable = FALSE,   total = \"Total\",   hierarchyVarNames = c(mapsFrom = \"mapsFrom\", mapsTo = \"mapsTo\", sign = \"sign\", level =     \"level\"),   unionComplement = FALSE,   reOrder = TRUE,   select = NULL,   removeEmpty = FALSE,   selectionByMultiplicationLimit = 10^7,   makeColnames = TRUE,   verbose = FALSE,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"data Matrix data frame data containing codes relevant variables hierarchies List hierarchies, can converted AutoHierarchies. Thus, variables can also coded \"rowFactor\" \"\", correspond using categories data. inputInOutput Logical vector (possibly recycled) element hierarchies. TRUE means codes input included output. Values corresponding \"rowFactor\" \"\" ignored. Also see note. crossTable Cross table output TRUE total See AutoHierarchies hierarchyVarNames Variable names hierarchy tables HierarchyFix unionComplement Logical vector (possibly recycled) element hierarchies. TRUE, sign means union complement instead addition subtraction. Values corresponding \"rowFactor\" \"colFactor\" ignored. reOrder TRUE (default) output codes ordered way similar usual model matrix ordering. select Data frame specifying variable combinations output named list specifying code selections variable (see details). removeEmpty TRUE select data frame, empty columns (zeros) included output. selectionByMultiplicationLimit non-NULL select number elements model matrix exceeds limit, computation performed slower memory efficient algorithm. makeColnames Colnames included TRUE (default). verbose Whether print information calculations. FALSE default. ... Extra unused parameters","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"sparse model matrix list two elements (model matrix cross table)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"function makes use AutoHierarchies HierarchyCompute  via  HierarchyComputeDummy. Since dummy matrix transposed comparison HierarchyCompute, parameter rowSelect renamed select  makeRownames renamed makeColnames. select parameter list can partially specified sense hierarchy names included. parameter inputInOutput apply hierarchies select list (see note).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"select list run via special coding inputInOutput parameter. parameter converted list (.list) select elements inserted list. also additional option users function.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchies2ModelMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model matrix representing crossed hierarchies — Hierarchies2ModelMatrix","text":"","code":"# Create some input z <- SSBtoolsData(\"sprt_emp_withEU\") ageHier <- SSBtoolsData(\"sprt_emp_ageHier\") geoDimList <- FindDimLists(z[, c(\"geo\", \"eu\")], total = \"Europe\")[[1]]   # First example has list output Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), inputInOutput = FALSE,                          crossTable = TRUE) #> $modelMatrix #> 18 x 3 sparse Matrix of class \"dgCMatrix\" #>       Y15-64:Europe Y15-64:EU Y15-64:nonEU #>  [1,]             1         1            . #>  [2,]             1         .            1 #>  [3,]             1         1            . #>  [4,]             1         1            . #>  [5,]             1         .            1 #>  [6,]             1         1            . #>  [7,]             1         1            . #>  [8,]             1         .            1 #>  [9,]             1         1            . #> [10,]             1         1            . #> [11,]             1         .            1 #> [12,]             1         1            . #> [13,]             1         1            . #> [14,]             1         .            1 #> [15,]             1         1            . #> [16,]             1         1            . #> [17,]             1         .            1 #> [18,]             1         1            . #>  #> $crossTable #>      age    geo #> 1 Y15-64 Europe #> 2 Y15-64     EU #> 3 Y15-64  nonEU #>    m1 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), inputInOutput = FALSE) m2 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList)) m3 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList, year = \"\"),                               inputInOutput = FALSE) m4 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList, year = \"allYears\"),                                inputInOutput = c(FALSE, FALSE, TRUE))  # Illustrate the effect of unionComplement, geoHier2 as in the examples of HierarchyCompute geoHier2 <- rbind(data.frame(mapsFrom = c(\"EU\", \"Spain\"), mapsTo = \"EUandSpain\", sign = 1),                    SSBtoolsData(\"sprt_emp_geoHier\")[, -4]) m5 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoHier2, year = \"allYears\"),                                inputInOutput = FALSE)  # Spain is counted twice m6 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoHier2, year = \"allYears\"),                                inputInOutput = FALSE, unionComplement = TRUE)   # Compute aggregates ths_per <- as.matrix(z[, \"ths_per\", drop = FALSE])  # matrix with the values to be aggregated Matrix::t(m1) %*% ths_per  # Matrix::crossprod(m1, ths_per) is equivalent and faster #> 3 x 1 Matrix of class \"dgeMatrix\" #>               ths_per #> Y15-64:Europe   680.8 #> Y15-64:EU       670.2 #> Y15-64:nonEU     10.6 Matrix::t(m2) %*% ths_per #> 18 x 1 Matrix of class \"dgeMatrix\" #>                 ths_per #> Y15-64:Europe     680.8 #> Y15-64:EU         670.2 #> Y15-64:nonEU       10.6 #> Y15-64:Iceland     10.6 #> Y15-64:Portugal   108.8 #> Y15-64:Spain      561.4 #> Y15-29:Europe     243.5 #> Y15-29:EU         237.9 #> Y15-29:nonEU        5.6 #> Y15-29:Iceland      5.6 #> Y15-29:Portugal    38.5 #> Y15-29:Spain      199.4 #> Y30-64:Europe     437.3 #> Y30-64:EU         432.3 #> Y30-64:nonEU        5.0 #> Y30-64:Iceland      5.0 #> Y30-64:Portugal    70.3 #> Y30-64:Spain      362.0 Matrix::t(m3) %*% ths_per #> 9 x 1 Matrix of class \"dgeMatrix\" #>                    ths_per #> Y15-64:Europe:2014   222.3 #> Y15-64:Europe:2015   225.0 #> Y15-64:Europe:2016   233.5 #> Y15-64:EU:2014       219.0 #> Y15-64:EU:2015       221.5 #> Y15-64:EU:2016       229.7 #> Y15-64:nonEU:2014      3.3 #> Y15-64:nonEU:2015      3.5 #> Y15-64:nonEU:2016      3.8 Matrix::t(m4) %*% ths_per #> 12 x 1 Matrix of class \"dgeMatrix\" #>                        ths_per #> Y15-64:Europe:allYears   680.8 #> Y15-64:Europe:2014       222.3 #> Y15-64:Europe:2015       225.0 #> Y15-64:Europe:2016       233.5 #> Y15-64:EU:allYears       670.2 #> Y15-64:EU:2014           219.0 #> Y15-64:EU:2015           221.5 #> Y15-64:EU:2016           229.7 #> Y15-64:nonEU:allYears     10.6 #> Y15-64:nonEU:2014          3.3 #> Y15-64:nonEU:2015          3.5 #> Y15-64:nonEU:2016          3.8 Matrix::t(m5) %*% ths_per #> 4 x 1 Matrix of class \"dgeMatrix\" #>                            ths_per #> Y15-64:EUandSpain:allYears  1231.6 #> Y15-64:EU:allYears           670.2 #> Y15-64:Europe:allYears       680.8 #> Y15-64:nonEU:allYears         10.6 Matrix::t(m6) %*% ths_per #> 4 x 1 Matrix of class \"dgeMatrix\" #>                            ths_per #> Y15-64:EUandSpain:allYears   670.2 #> Y15-64:EU:allYears           670.2 #> Y15-64:Europe:allYears       680.8 #> Y15-64:nonEU:allYears         10.6   # Example using the select parameter as a data frame select <- data.frame(age = c(\"Y15-64\", \"Y15-29\", \"Y30-64\"), geo = c(\"EU\", \"nonEU\", \"Spain\")) m2a <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), select = select)  # Same result by slower alternative m2B <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), crossTable = TRUE) m2b <- m2B$modelMatrix[, Match(select, m2B$crossTable), drop = FALSE] Matrix::t(m2b) %*% ths_per #> 3 x 1 Matrix of class \"dgeMatrix\" #>              ths_per #> Y15-64:EU      670.2 #> Y15-29:nonEU     5.6 #> Y30-64:Spain   362.0  # Examples using the select parameter as a list Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList),         inputInOutput = FALSE,         select = list(geo = c(\"nonEU\", \"Portugal\"))) #> 18 x 2 sparse Matrix of class \"dgCMatrix\" #>       Y15-64:nonEU Y15-64:Portugal #>  [1,]            .               . #>  [2,]            1               . #>  [3,]            .               1 #>  [4,]            .               . #>  [5,]            1               . #>  [6,]            .               1 #>  [7,]            .               . #>  [8,]            1               . #>  [9,]            .               1 #> [10,]            .               . #> [11,]            1               . #> [12,]            .               1 #> [13,]            .               . #> [14,]            1               . #> [15,]            .               1 #> [16,]            .               . #> [17,]            1               . #> [18,]            .               1 Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList),         select = list(geo = c(\"nonEU\", \"Portugal\"), age = c(\"Y15-64\", \"Y15-29\"))) #> 18 x 4 sparse Matrix of class \"dgCMatrix\" #>       Y15-64:nonEU Y15-64:Portugal Y15-29:nonEU Y15-29:Portugal #>  [1,]            .               .            .               . #>  [2,]            1               .            1               . #>  [3,]            .               1            .               1 #>  [4,]            .               .            .               . #>  [5,]            1               .            .               . #>  [6,]            .               1            .               . #>  [7,]            .               .            .               . #>  [8,]            1               .            1               . #>  [9,]            .               1            .               1 #> [10,]            .               .            .               . #> [11,]            1               .            .               . #> [12,]            .               1            .               . #> [13,]            .               .            .               . #> [14,]            1               .            1               . #> [15,]            .               1            .               1 #> [16,]            .               .            .               . #> [17,]            1               .            .               . #> [18,]            .               1            .               ."},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchiesAndFormula2ModelMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Model matrix representing crossed hierarchies according to a formula — HierarchiesAndFormula2ModelMatrix","title":"Model matrix representing crossed hierarchies according to a formula — HierarchiesAndFormula2ModelMatrix","text":"cross hierarchies defined formula. formula automatically simplified totals involved.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchiesAndFormula2ModelMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model matrix representing crossed hierarchies according to a formula — HierarchiesAndFormula2ModelMatrix","text":"","code":"HierarchiesAndFormula2ModelMatrix(   data,   hierarchies,   formula,   inputInOutput = TRUE,   makeColNames = TRUE,   crossTable = FALSE,   total = \"Total\",   simplify = TRUE,   hierarchyVarNames = c(mapsFrom = \"mapsFrom\", mapsTo = \"mapsTo\", sign = \"sign\", level =     \"level\"),   unionComplement = FALSE,   removeEmpty = FALSE,   reOrder = TRUE,   sep = \"-\",   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchiesAndFormula2ModelMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model matrix representing crossed hierarchies according to a formula — HierarchiesAndFormula2ModelMatrix","text":"data Matrix data frame data containing codes relevant variables hierarchies List hierarchies, can converted AutoHierarchies. Thus, variables can also coded \"rowFactor\" \"\", correspond using categories data. formula model formula inputInOutput Logical vector (possibly recycled) element hierarchies. TRUE means codes input included output. Values corresponding \"rowFactor\" \"\" ignored. makeColNames Colnames included TRUE (default). crossTable Cross table output TRUE total Vector total codes (possibly recycled) used running Hrc2DimList simplify TRUE (default) model can simplified total codes found hierarchies (see examples). hierarchyVarNames Variable names hierarchy tables HierarchyFix unionComplement Logical vector (possibly recycled) element hierarchies. TRUE, sign means union complement instead addition subtraction. Values corresponding \"rowFactor\" \"colFactor\" ignored. removeEmpty TRUE, empty columns (zeros) included output. reOrder TRUE (default) output codes ordered way similar usual model matrix ordering. sep String separate creating column names ... Extra unused parameters","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchiesAndFormula2ModelMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model matrix representing crossed hierarchies according to a formula — HierarchiesAndFormula2ModelMatrix","text":"sparse model matrix list two elements (model matrix cross table)","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchiesAndFormula2ModelMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model matrix representing crossed hierarchies according to a formula — HierarchiesAndFormula2ModelMatrix","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchiesAndFormula2ModelMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model matrix representing crossed hierarchies according to a formula — HierarchiesAndFormula2ModelMatrix","text":"","code":"# Create some input z <- SSBtoolsData(\"sprt_emp_withEU\") ageHier <- SSBtoolsData(\"sprt_emp_ageHier\") geoDimList <- FindDimLists(z[, c(\"geo\", \"eu\")], total = \"Europe\")[[1]]  # Shorter function name H <- HierarchiesAndFormula2ModelMatrix  # Small dataset example. Two dimensions. s <- z[z$geo == \"Spain\", ] geoYear <- list(geo = geoDimList, year = \"\") m <- H(s, geoYear, ~geo * year, inputInOutput = c(FALSE, TRUE)) print(m, col.names = TRUE) #> <S4 Type Object> #> attr(,\"i\") #>  [1] 0 1 2 3 4 5 0 1 2 3 4 5 0 1 2 3 4 5 0 1 2 3 4 5 #> attr(,\"p\") #>  [1]  0  6 12 12 14 16 18 20 22 24 24 24 24 #> attr(,\"Dim\") #> [1]  6 12 #> attr(,\"Dimnames\") #> attr(,\"Dimnames\")[[1]] #> NULL #>  #> attr(,\"Dimnames\")[[2]] #>  [1] \"Europe-Total\" \"EU-Total\"     \"nonEU-Total\"  \"Europe-2014\"  \"Europe-2015\"  #>  [6] \"Europe-2016\"  \"EU-2014\"      \"EU-2015\"      \"EU-2016\"      \"nonEU-2014\"   #> [11] \"nonEU-2015\"   \"nonEU-2016\"   #>  #> attr(,\"x\") #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> attr(,\"factors\") #> list() #> attr(,\"class\") #> [1] \"dgCMatrix\" #> attr(,\"class\")attr(,\"package\") #> [1] \"Matrix\" #> attr(,\"total\") #>      geo     year  #> \"Europe\"  \"Total\"  #> attr(,\"startCol\") #>      geo geo:year  #>        1        4  attr(m, \"total\")     # Total code 'Europe' is found #>      geo     year  #> \"Europe\"  \"Total\"  attr(m, \"startCol\")  # Two model terms needed #>      geo geo:year  #>        1        4   # Another model and with crossTable in output H(s, geoYear, ~geo + year, crossTable = TRUE) #> $modelMatrix #> 6 x 9 sparse Matrix of class \"dgCMatrix\" #>      Europe-Total EU-Total nonEU-Total Iceland-Total Portugal-Total Spain-Total #> [1,]            1        1           .             .              .           1 #> [2,]            1        1           .             .              .           1 #> [3,]            1        1           .             .              .           1 #> [4,]            1        1           .             .              .           1 #> [5,]            1        1           .             .              .           1 #> [6,]            1        1           .             .              .           1 #>      Europe-2014 Europe-2015 Europe-2016 #> [1,]           1           .           . #> [2,]           1           .           . #> [3,]           .           1           . #> [4,]           .           1           . #> [5,]           .           .           1 #> [6,]           .           .           1 #>  #> $crossTable #>        geo  year #> 1   Europe Total #> 2       EU Total #> 3    nonEU Total #> 4  Iceland Total #> 5 Portugal Total #> 6    Spain Total #> 7   Europe  2014 #> 8   Europe  2015 #> 9   Europe  2016 #>   # Without empty columns   H(s, geoYear, ~geo + year, crossTable = TRUE, removeEmpty = TRUE) #> $modelMatrix #> 6 x 6 sparse Matrix of class \"dgCMatrix\" #>      Europe-Total EU-Total Spain-Total Europe-2014 Europe-2015 Europe-2016 #> [1,]            1        1           1           1           .           . #> [2,]            1        1           1           1           .           . #> [3,]            1        1           1           .           1           . #> [4,]            1        1           1           .           1           . #> [5,]            1        1           1           .           .           1 #> [6,]            1        1           1           .           .           1 #>  #> $crossTable #>      geo  year #> 1 Europe Total #> 2     EU Total #> 3  Spain Total #> 4 Europe  2014 #> 5 Europe  2015 #> 6 Europe  2016 #>   # Three dimensions ageGeoYear <- list(age = ageHier, geo = geoDimList, year = \"allYears\") m <- H(z, ageGeoYear, ~age * geo + geo * year) head(colnames(m)) #> [1] \"Y15-64-Europe-allYears\"   \"Y15-64-EU-allYears\"       #> [3] \"Y15-64-nonEU-allYears\"    \"Y15-64-Iceland-allYears\"  #> [5] \"Y15-64-Portugal-allYears\" \"Y15-64-Spain-allYears\"    attr(m, \"total\") #>        age        geo       year  #>   \"Y15-64\"   \"Europe\" \"allYears\"  attr(m, \"startCol\") #>  age:geo geo:year  #>        1       19   # With simplify = FALSE m <- H(z, ageGeoYear, ~age * geo + geo * year, simplify = FALSE) head(colnames(m)) #> [1] \"Total-Total-Total\"  \"Y15-64-Total-Total\" \"Y15-29-Total-Total\" #> [4] \"Y30-64-Total-Total\" \"Total-Europe-Total\" \"Total-EU-Total\"     attr(m, \"total\") #>     age     geo    year  #> \"Total\" \"Total\" \"Total\"  attr(m, \"startCol\") #> (Intercept)         age         geo        year     age:geo    geo:year  #>           1           2           5          11          15          33   # Compute aggregates m <- H(z, ageGeoYear, ~geo * age, inputInOutput = c(TRUE, FALSE, TRUE)) Matrix::t(m) %*% z$ths_per #> 9 x 1 Matrix of class \"dgeMatrix\" #>                [,1] #> Europe-Y15-64 680.8 #> Europe-Y15-29 243.5 #> Europe-Y30-64 437.3 #> EU-Y15-64     670.2 #> EU-Y15-29     237.9 #> EU-Y30-64     432.3 #> nonEU-Y15-64   10.6 #> nonEU-Y15-29    5.6 #> nonEU-Y30-64    5.0  # Without hierarchies. Only factors. ageGeoYearFactor <- list(age = \"\", geo = \"\", year = \"\") Matrix::t(H(z, ageGeoYearFactor, ~geo * age + year:geo)) #> 21 x 18 sparse Matrix of class \"dgCMatrix\" #>                                                           #> Total-Total-Total     1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #> Iceland-Total-Total   . 1 . . 1 . . 1 . . 1 . . 1 . . 1 . #> Portugal-Total-Total  . . 1 . . 1 . . 1 . . 1 . . 1 . . 1 #> Spain-Total-Total     1 . . 1 . . 1 . . 1 . . 1 . . 1 . . #> Total-Y15-29-Total    1 1 1 . . . 1 1 1 . . . 1 1 1 . . . #> Total-Y30-64-Total    . . . 1 1 1 . . . 1 1 1 . . . 1 1 1 #> Iceland-Y15-29-Total  . 1 . . . . . 1 . . . . . 1 . . . . #> Iceland-Y30-64-Total  . . . . 1 . . . . . 1 . . . . . 1 . #> Portugal-Y15-29-Total . . 1 . . . . . 1 . . . . . 1 . . . #> Portugal-Y30-64-Total . . . . . 1 . . . . . 1 . . . . . 1 #> Spain-Y15-29-Total    1 . . . . . 1 . . . . . 1 . . . . . #> Spain-Y30-64-Total    . . . 1 . . . . . 1 . . . . . 1 . . #> Iceland-Total-2014    . 1 . . 1 . . . . . . . . . . . . . #> Iceland-Total-2015    . . . . . . . 1 . . 1 . . . . . . . #> Iceland-Total-2016    . . . . . . . . . . . . . 1 . . 1 . #> Portugal-Total-2014   . . 1 . . 1 . . . . . . . . . . . . #> Portugal-Total-2015   . . . . . . . . 1 . . 1 . . . . . . #> Portugal-Total-2016   . . . . . . . . . . . . . . 1 . . 1 #> Spain-Total-2014      1 . . 1 . . . . . . . . . . . . . . #> Spain-Total-2015      . . . . . . 1 . . 1 . . . . . . . . #> Spain-Total-2016      . . . . . . . . . . . . 1 . . 1 . ."},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchy2Formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchy2Formula — Hierarchy2Formula","title":"Hierarchy2Formula — Hierarchy2Formula","text":"Conversion -coded hierarchy formulas written =, - +.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchy2Formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchy2Formula — Hierarchy2Formula","text":"","code":"Hierarchy2Formula(   x,   hierarchyVarNames = c(mapsFrom = \"mapsFrom\", mapsTo = \"mapsTo\", sign = \"sign\", level =     \"level\") )  Formula2Hierarchy(s)  Hierarchies2Formulas(x, ...)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchy2Formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchy2Formula — Hierarchy2Formula","text":"x Data frame -coded hierarchy hierarchyVarNames Variable names hierarchy tables HierarchyFix. s Character vector formulas written =, - +. ... Extra parameters. hierarchyVarNames relevant.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchy2Formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchy2Formula — Hierarchy2Formula","text":"See Arguments","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchy2Formula.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Hierarchy2Formula — Hierarchy2Formula","text":"Hierarchies2Formulas wrapper lapply(x, Hierarchy2Formula, ...)","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchy2Formula.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hierarchy2Formula — Hierarchy2Formula","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Hierarchy2Formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchy2Formula — Hierarchy2Formula","text":"","code":"x <- SSBtoolsData(\"sprt_emp_geoHier\") s <- Hierarchy2Formula(x) s #> [1] \"Europe = Iceland + Portugal + Spain\" \"nonEU = Iceland\"                     #> [3] \"EU = Europe - nonEU\"                 Formula2Hierarchy(s) #>   mapsFrom mapsTo sign level #> 1  Iceland Europe    1     1 #> 2 Portugal Europe    1     1 #> 3    Spain Europe    1     1 #> 4  Iceland  nonEU    1     1 #> 5   Europe     EU    1     2 #> 6    nonEU     EU   -1     2  # Demonstrate Hierarchies2Formulas and problems  hi <- FindHierarchies(SSBtoolsData(\"sprt_emp_withEU\")[, c(\"geo\", \"eu\", \"age\")]) hi #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15-29  Total    1     1 #> 2   Y30-64  Total    1     1 #>  Hierarchies2Formulas(hi) # problematic formula since minus sign in coding  #> $geo #> [1] \"Total = EU + nonEU\"    \"EU = Portugal + Spain\" \"nonEU = Iceland\"       #>  #> $age #> [1] \"Total = Y15-29 + Y30-64\" #>  AutoHierarchies(Hierarchies2Formulas(hi)) # Not same as hi because of problems  #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2    nonEU  Total    1     2 #> 3 Portugal     EU    1     1 #> 4    Spain     EU    1     1 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1      Y15  Total    1     1 #> 2       29  Total   -1     1 #> 3      Y30  Total    1     1 #> 4       64  Total   -1     1 #>   # Change coding to avoid problems  hi$age$mapsFrom <- gsub(\"-\", \"_\", hi$age$mapsFrom) hi #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2 Portugal     EU    1     1 #> 3    Spain     EU    1     1 #> 4    nonEU  Total    1     2 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15_29  Total    1     1 #> 2   Y30_64  Total    1     1 #>  Hierarchies2Formulas(hi) #> $geo #> [1] \"Total = EU + nonEU\"    \"EU = Portugal + Spain\" \"nonEU = Iceland\"       #>  #> $age #> [1] \"Total = Y15_29 + Y30_64\" #>  AutoHierarchies(Hierarchies2Formulas(hi)) #> $geo #>   mapsFrom mapsTo sign level #> 1       EU  Total    1     2 #> 2    nonEU  Total    1     2 #> 3 Portugal     EU    1     1 #> 4    Spain     EU    1     1 #> 5  Iceland  nonEU    1     1 #>  #> $age #>   mapsFrom mapsTo sign level #> 1   Y15_29  Total    1     1 #> 2   Y30_64  Total    1     1 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Computations — HierarchyCompute","title":"Hierarchical Computations — HierarchyCompute","text":"function computes aggregates crossing several hierarchical specifications factorial variables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Computations — HierarchyCompute","text":"","code":"HierarchyCompute(   data,   hierarchies,   valueVar,   colVar = NULL,   rowSelect = NULL,   colSelect = NULL,   select = NULL,   inputInOutput = FALSE,   output = \"data.frame\",   autoLevel = TRUE,   unionComplement = FALSE,   constantsInOutput = NULL,   hierarchyVarNames = c(mapsFrom = \"mapsFrom\", mapsTo = \"mapsTo\", sign = \"sign\", level =     \"level\"),   selectionByMultiplicationLimit = 10^7,   colNotInDataWarning = TRUE,   useMatrixToDataFrame = TRUE,   handleDuplicated = \"sum\",   asInput = FALSE,   verbose = FALSE,   reOrder = FALSE,   reduceData = TRUE,   makeRownames = NULL )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Computations — HierarchyCompute","text":"data input data frame hierarchies named (names data) list hierarchies. Variables can also coded \"rowFactor\" \"colFactor\". valueVar Name variable(s) aggregated. colVar non-NULL, function HierarchyCompute2 called. See documentation information. rowSelect Data frame specifying variable combinations output. colFactor variable included. addition rowSelect=\"removeEmpty\" removes combinations corresponding empty rows (zeros) dataDummyHierarchy. colSelect Vector specifying categories colFactor variable output. select Data frame specifying variable combinations output. colFactor variable included. inputInOutput Logical vector (possibly recycled) element hierarchies. TRUE means codes input included output. Values corresponding \"rowFactor\" \"colFactor\" ignored. output One \"data.frame\" (default), \"dummyHierarchies\", \"outputMatrix\", \"dataDummyHierarchy\", \"valueMatrix\", \"fromCrossCode\", \"toCrossCode\", \"crossCode\" (toCrossCode), \"outputMatrixWithCrossCode\", \"matrixComponents\", \"dataDummyHierarchyWithCodeFrame\", \"dataDummyHierarchyQuick\". latter two require valueVar (reduceData set FALSE). autoLevel Logical vector (possibly recycled) element hierarchies. TRUE, level computed automatic method HierarchyFix. Values corresponding \"rowFactor\" \"colFactor\" ignored. unionComplement Logical vector (possibly recycled) element hierarchies. TRUE, sign means union complement instead addition subtraction DummyHierarchy. Values corresponding \"rowFactor\" \"colFactor\" ignored. constantsInOutput single row data frame combine output. hierarchyVarNames Variable names hierarchy tables HierarchyFix. selectionByMultiplicationLimit non-NULL rowSelect number elements dataDummyHierarchy exceeds limit, computation performed slower memory efficient algorithm. colNotInDataWarning TRUE, warning produced elements colSelect data. useMatrixToDataFrame TRUE (default) special functionality saving time memory used. handleDuplicated Handling duplicated code rows data. One : \"sum\" (default), \"sumByAggregate\", \"sumWithWarning\", \"stop\" (error), \"single\" \"singleWithWarning\". colFactor sum sumByAggregate/sumWithWarning different (original values aggregates \"valueMatrix\"). single, one values used (matrix subsetting). asInput TRUE (FALSE default) output matrices match input data. Thus valueMatrix = Matrix(data[, valueVar],ncol=1). possible colFactor. verbose Whether print information calculations. FALSE default. reOrder TRUE (FALSE default) output codes ordered differently, similar usual model matrix ordering. reduceData TRUE (default) unnecessary (aggregated result) rows valueMatrix allowed removed. makeRownames TRUE dataDummyHierarchy contains rownames. default, decided based parameter output.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Computations — HierarchyCompute","text":"specified parameter output","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical Computations — HierarchyCompute","text":"key element function matrix multiplication: outputMatrix = dataDummyHierarchy %*% valueMatrix. matrix, valueMatrix re-organized version valueVar vector input. particular, variable selected colFactor, one column level variable. matrix, dataDummyHierarchy constructed crossing dummy coding hierarchies (DummyHierarchy) factorial variables way matches valueMatrix.  code combinations corresponding rows columns dataDummyHierarchy can obtained toCrossCode fromCrossCode.  default data frame output, outputMatrix stacked one column combined code combinations variables.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hierarchical Computations — HierarchyCompute","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical Computations — HierarchyCompute","text":"","code":"# Data and hierarchies used in the examples x <- SSBtoolsData(\"sprt_emp\")  # Employment in sport in thousand persons from Eurostat database geoHier <- SSBtoolsData(\"sprt_emp_geoHier\") ageHier <- SSBtoolsData(\"sprt_emp_ageHier\")  # Two hierarchies and year as rowFactor HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"rowFactor\"), \"ths_per\") #>      age    geo year ths_per #> 1 Y15-64 Europe 2014   222.3 #> 2 Y15-64  nonEU 2014     3.3 #> 3 Y15-64     EU 2014   219.0 #> 4 Y15-64 Europe 2015   225.0 #> 5 Y15-64  nonEU 2015     3.5 #> 6 Y15-64     EU 2015   221.5 #> 7 Y15-64 Europe 2016   233.5 #> 8 Y15-64  nonEU 2016     3.8 #> 9 Y15-64     EU 2016   229.7  # Same result with year as colFactor (but columns ordered differently) HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"colFactor\"), \"ths_per\") #>   year    age    geo ths_per #> 1 2014 Y15-64 Europe   222.3 #> 2 2014 Y15-64  nonEU     3.3 #> 3 2014 Y15-64     EU   219.0 #> 4 2015 Y15-64 Europe   225.0 #> 5 2015 Y15-64  nonEU     3.5 #> 6 2015 Y15-64     EU   221.5 #> 7 2016 Y15-64 Europe   233.5 #> 8 2016 Y15-64  nonEU     3.8 #> 9 2016 Y15-64     EU   229.7  # Internally the computations are different as seen when output='matrixComponents' HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"rowFactor\"), \"ths_per\",                   output = \"matrixComponents\") #> $dataDummyHierarchy #> 9 x 18 sparse Matrix of class \"dgCMatrix\" #>                                                        #> Y15-64:Europe:2014 1 1 1 1 1 1 . . . . . . . . . . . . #> Y15-64:nonEU:2014  . 1 . . 1 . . . . . . . . . . . . . #> Y15-64:EU:2014     1 0 1 1 0 1 . . . . . . . . . . . . #> Y15-64:Europe:2015 . . . . . . 1 1 1 1 1 1 . . . . . . #> Y15-64:nonEU:2015  . . . . . . . 1 . . 1 . . . . . . . #> Y15-64:EU:2015     . . . . . . 1 0 1 1 0 1 . . . . . . #> Y15-64:Europe:2016 . . . . . . . . . . . . 1 1 1 1 1 1 #> Y15-64:nonEU:2016  . . . . . . . . . . . . . 1 . . 1 . #> Y15-64:EU:2016     . . . . . . . . . . . . 1 0 1 1 0 1 #>  #> $valueMatrix #> 18 x 1 Matrix of class \"dgeMatrix\" #>       ths_per #>  [1,]    66.9 #>  [2,]     1.8 #>  [3,]    11.6 #>  [4,]   120.3 #>  [5,]     1.5 #>  [6,]    20.2 #>  [7,]    63.4 #>  [8,]     1.9 #>  [9,]    14.2 #> [10,]   119.6 #> [11,]     1.6 #> [12,]    24.3 #> [13,]    69.1 #> [14,]     1.9 #> [15,]    12.7 #> [16,]   122.1 #> [17,]     1.9 #> [18,]    25.8 #>  #> $fromCrossCode #>       age      geo year #> 1  Y15-29    Spain 2014 #> 2  Y15-29  Iceland 2014 #> 3  Y15-29 Portugal 2014 #> 4  Y30-64    Spain 2014 #> 5  Y30-64  Iceland 2014 #> 6  Y30-64 Portugal 2014 #> 7  Y15-29    Spain 2015 #> 8  Y15-29  Iceland 2015 #> 9  Y15-29 Portugal 2015 #> 10 Y30-64    Spain 2015 #> 11 Y30-64  Iceland 2015 #> 12 Y30-64 Portugal 2015 #> 13 Y15-29    Spain 2016 #> 14 Y15-29  Iceland 2016 #> 15 Y15-29 Portugal 2016 #> 16 Y30-64    Spain 2016 #> 17 Y30-64  Iceland 2016 #> 18 Y30-64 Portugal 2016 #>  #> $toCrossCode #>      age    geo year #> 1 Y15-64 Europe 2014 #> 2 Y15-64  nonEU 2014 #> 3 Y15-64     EU 2014 #> 4 Y15-64 Europe 2015 #> 5 Y15-64  nonEU 2015 #> 6 Y15-64     EU 2015 #> 7 Y15-64 Europe 2016 #> 8 Y15-64  nonEU 2016 #> 9 Y15-64     EU 2016 #>  HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"colFactor\"), \"ths_per\",                   output = \"matrixComponents\") #> $dataDummyHierarchy #> 3 x 6 sparse Matrix of class \"dgCMatrix\" #>                           #> Y15-64:Europe 1 1 1 1 1 1 #> Y15-64:nonEU  1 . . 1 . . #> Y15-64:EU     0 1 1 0 1 1 #>  #> $valueMatrix #> 6 x 3 sparse Matrix of class \"dgCMatrix\" #>       2014  2015  2016 #> [1,]   1.8   1.9   1.9 #> [2,]  11.6  14.2  12.7 #> [3,]  66.9  63.4  69.1 #> [4,]   1.5   1.6   1.9 #> [5,]  20.2  24.3  25.8 #> [6,] 120.3 119.6 122.1 #>  #> $fromCrossCode #>      age      geo #> 1 Y15-29  Iceland #> 2 Y15-29 Portugal #> 3 Y15-29    Spain #> 4 Y30-64  Iceland #> 5 Y30-64 Portugal #> 6 Y30-64    Spain #>  #> $toCrossCode #>      age    geo #> 1 Y15-64 Europe #> 2 Y15-64  nonEU #> 3 Y15-64     EU #>    # Include input age groups by setting inputInOutput = TRUE for this variable HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"colFactor\"), \"ths_per\",                   inputInOutput = c(TRUE, FALSE)) #>    year    age    geo ths_per #> 1  2014 Y15-29 Europe    80.3 #> 2  2014 Y30-64 Europe   142.0 #> 3  2014 Y15-64 Europe   222.3 #> 4  2014 Y15-29  nonEU     1.8 #> 5  2014 Y30-64  nonEU     1.5 #> 6  2014 Y15-64  nonEU     3.3 #> 7  2014 Y15-29     EU    78.5 #> 8  2014 Y30-64     EU   140.5 #> 9  2014 Y15-64     EU   219.0 #> 10 2015 Y15-29 Europe    79.5 #> 11 2015 Y30-64 Europe   145.5 #> 12 2015 Y15-64 Europe   225.0 #> 13 2015 Y15-29  nonEU     1.9 #> 14 2015 Y30-64  nonEU     1.6 #> 15 2015 Y15-64  nonEU     3.5 #> 16 2015 Y15-29     EU    77.6 #> 17 2015 Y30-64     EU   143.9 #> 18 2015 Y15-64     EU   221.5 #> 19 2016 Y15-29 Europe    83.7 #> 20 2016 Y30-64 Europe   149.8 #> 21 2016 Y15-64 Europe   233.5 #> 22 2016 Y15-29  nonEU     1.9 #> 23 2016 Y30-64  nonEU     1.9 #> 24 2016 Y15-64  nonEU     3.8 #> 25 2016 Y15-29     EU    81.8 #> 26 2016 Y30-64     EU   147.9 #> 27 2016 Y15-64     EU   229.7  # Only input age groups by switching to rowFactor HierarchyCompute(x, list(age = \"rowFactor\", geo = geoHier, year = \"colFactor\"), \"ths_per\") #>    year    age    geo ths_per #> 1  2014 Y15-29 Europe    80.3 #> 2  2014 Y30-64 Europe   142.0 #> 3  2014 Y15-29  nonEU     1.8 #> 4  2014 Y30-64  nonEU     1.5 #> 5  2014 Y15-29     EU    78.5 #> 6  2014 Y30-64     EU   140.5 #> 7  2015 Y15-29 Europe    79.5 #> 8  2015 Y30-64 Europe   145.5 #> 9  2015 Y15-29  nonEU     1.9 #> 10 2015 Y30-64  nonEU     1.6 #> 11 2015 Y15-29     EU    77.6 #> 12 2015 Y30-64     EU   143.9 #> 13 2016 Y15-29 Europe    83.7 #> 14 2016 Y30-64 Europe   149.8 #> 15 2016 Y15-29  nonEU     1.9 #> 16 2016 Y30-64  nonEU     1.9 #> 17 2016 Y15-29     EU    81.8 #> 18 2016 Y30-64     EU   147.9  # Select some years (colFactor) including a year not in input data (zeros produced) HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"colFactor\"), \"ths_per\",                   colSelect = c(\"2014\", \"2016\", \"2018\")) #> Warning: Items in colSelect not in data[,'year'] set to zero: 2018 #>   year    age    geo ths_per #> 1 2014 Y15-64 Europe   222.3 #> 2 2014 Y15-64  nonEU     3.3 #> 3 2014 Y15-64     EU   219.0 #> 4 2016 Y15-64 Europe   233.5 #> 5 2016 Y15-64  nonEU     3.8 #> 6 2016 Y15-64     EU   229.7 #> 7 2018 Y15-64 Europe     0.0 #> 8 2018 Y15-64  nonEU     0.0 #> 9 2018 Y15-64     EU     0.0  # Select combinations of geo and age including a code not in data or hierarchy (zeros produced) HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"colFactor\"), \"ths_per\",                   rowSelect = data.frame(geo = \"EU\", age = c(\"Y0-100\", \"Y15-64\", \"Y15-29\"))) #>   year geo    age ths_per #> 1 2014  EU Y0-100     0.0 #> 2 2014  EU Y15-64   219.0 #> 3 2014  EU Y15-29    78.5 #> 4 2015  EU Y0-100     0.0 #> 5 2015  EU Y15-64   221.5 #> 6 2015  EU Y15-29    77.6 #> 7 2016  EU Y0-100     0.0 #> 8 2016  EU Y15-64   229.7 #> 9 2016  EU Y15-29    81.8                   # Select combinations of geo, age and year  HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"colFactor\"), \"ths_per\",       select = data.frame(geo = c(\"EU\", \"Spain\"), age = c(\"Y15-64\", \"Y15-29\"), year = 2015)) #>   year    age   geo ths_per #> 1 2015 Y15-64    EU   221.5 #> 2 2015 Y15-29 Spain    63.4  # Extend the hierarchy table to illustrate the effect of unionComplement  # Omit level since this is handled by autoLevel geoHier2 <- rbind(data.frame(mapsFrom = c(\"EU\", \"Spain\"), mapsTo = \"EUandSpain\", sign = 1),                    geoHier[, -4])  # Spain is counted twice HierarchyCompute(x, list(age = ageHier, geo = geoHier2, year = \"colFactor\"), \"ths_per\") #>    year    age        geo ths_per #> 1  2014 Y15-64     Europe   222.3 #> 2  2014 Y15-64      nonEU     3.3 #> 3  2014 Y15-64         EU   219.0 #> 4  2014 Y15-64 EUandSpain   406.2 #> 5  2015 Y15-64     Europe   225.0 #> 6  2015 Y15-64      nonEU     3.5 #> 7  2015 Y15-64         EU   221.5 #> 8  2015 Y15-64 EUandSpain   404.5 #> 9  2016 Y15-64     Europe   233.5 #> 10 2016 Y15-64      nonEU     3.8 #> 11 2016 Y15-64         EU   229.7 #> 12 2016 Y15-64 EUandSpain   420.9  # Can be seen in the dataDummyHierarchy matrix HierarchyCompute(x, list(age = ageHier, geo = geoHier2, year = \"colFactor\"), \"ths_per\",                   output = \"matrixComponents\") #> $dataDummyHierarchy #> 4 x 6 sparse Matrix of class \"dgCMatrix\" #>                               #> Y15-64:Europe     1 1 1 1 1 1 #> Y15-64:nonEU      1 . . 1 . . #> Y15-64:EU         0 1 1 0 1 1 #> Y15-64:EUandSpain 0 1 2 0 1 2 #>  #> $valueMatrix #> 6 x 3 sparse Matrix of class \"dgCMatrix\" #>       2014  2015  2016 #> [1,]   1.8   1.9   1.9 #> [2,]  11.6  14.2  12.7 #> [3,]  66.9  63.4  69.1 #> [4,]   1.5   1.6   1.9 #> [5,]  20.2  24.3  25.8 #> [6,] 120.3 119.6 122.1 #>  #> $fromCrossCode #>      age      geo #> 1 Y15-29  Iceland #> 2 Y15-29 Portugal #> 3 Y15-29    Spain #> 4 Y30-64  Iceland #> 5 Y30-64 Portugal #> 6 Y30-64    Spain #>  #> $toCrossCode #>      age        geo #> 1 Y15-64     Europe #> 2 Y15-64      nonEU #> 3 Y15-64         EU #> 4 Y15-64 EUandSpain #>   # With unionComplement=TRUE Spain is not counted twice HierarchyCompute(x, list(age = ageHier, geo = geoHier2, year = \"colFactor\"), \"ths_per\",                   unionComplement = TRUE) #>    year    age        geo ths_per #> 1  2014 Y15-64     Europe   222.3 #> 2  2014 Y15-64      nonEU     3.3 #> 3  2014 Y15-64         EU   219.0 #> 4  2014 Y15-64 EUandSpain   219.0 #> 5  2015 Y15-64     Europe   225.0 #> 6  2015 Y15-64      nonEU     3.5 #> 7  2015 Y15-64         EU   221.5 #> 8  2015 Y15-64 EUandSpain   221.5 #> 9  2016 Y15-64     Europe   233.5 #> 10 2016 Y15-64      nonEU     3.8 #> 11 2016 Y15-64         EU   229.7 #> 12 2016 Y15-64 EUandSpain   229.7  # With constantsInOutput HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"colFactor\"), \"ths_per\",                  constantsInOutput = data.frame(c1 = \"AB\", c2 = \"CD\")) #>   c1 c2 year    age    geo ths_per #> 1 AB CD 2014 Y15-64 Europe   222.3 #> 2 AB CD 2014 Y15-64  nonEU     3.3 #> 3 AB CD 2014 Y15-64     EU   219.0 #> 4 AB CD 2015 Y15-64 Europe   225.0 #> 5 AB CD 2015 Y15-64  nonEU     3.5 #> 6 AB CD 2015 Y15-64     EU   221.5 #> 7 AB CD 2016 Y15-64 Europe   233.5 #> 8 AB CD 2016 Y15-64  nonEU     3.8 #> 9 AB CD 2016 Y15-64     EU   229.7                   # More that one valueVar x$y <- 10*x$ths_per HierarchyCompute(x, list(age = ageHier, geo = geoHier), c(\"y\", \"ths_per\")) #>      age    geo    y ths_per #> 1 Y15-64 Europe 6808   680.8 #> 2 Y15-64  nonEU  106    10.6 #> 3 Y15-64     EU 6702   670.2"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended Hierarchical Computations — HierarchyCompute2","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"Extended variant HierarchyCompute several column variables (just \"colFactor\"). Parameter colVar splits hierarchy variables two groups variable overrides difference \"rowFactor\" \"colFactor\".","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"","code":"HierarchyCompute2(   data,   hierarchies,   valueVar,   colVar,   rowSelect = NULL,   colSelect = NULL,   select = NULL,   output = \"data.frame\",   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"data input data frame hierarchies named list hierarchies valueVar Name variable(s) aggregated colVar Name column variable(s) rowSelect Data frame specifying variable combinations output colSelect Data frame specifying variable combinations output select Data frame specifying variable combinations output output One \"data.frame\" (default), \"outputMatrix\", \"matrixComponents\". ... parameters sent HierarchyCompute","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"specified parameter output","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"Within function, HierarchyCompute called two times. specifying output \"matrixComponents\", output two runs retuned list elements hcRow hcCol. matrix multiplication HierarchyCompute extended outputMatrix = hcRow$dataDummyHierarchy %*% hcRow$valueMatrix %*% t(hcCol$dataDummyHierarchy). modified cases single valueVar.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"need call HierarchyCompute2 directly. main function HierarchyCompute  can used instead.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyCompute2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended Hierarchical Computations — HierarchyCompute2","text":"","code":"x <- SSBtoolsData(\"sprt_emp\") geoHier <- SSBtoolsData(\"sprt_emp_geoHier\") ageHier <- SSBtoolsData(\"sprt_emp_ageHier\")  HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"rowFactor\"), \"ths_per\",                   colVar = c(\"age\", \"year\")) #>      age year    geo ths_per #> 1 Y15-64 2014 Europe   222.3 #> 2 Y15-64 2014  nonEU     3.3 #> 3 Y15-64 2014     EU   219.0 #> 4 Y15-64 2015 Europe   225.0 #> 5 Y15-64 2015  nonEU     3.5 #> 6 Y15-64 2015     EU   221.5 #> 7 Y15-64 2016 Europe   233.5 #> 8 Y15-64 2016  nonEU     3.8 #> 9 Y15-64 2016     EU   229.7 HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"rowFactor\"), \"ths_per\",                  colVar = c(\"age\", \"geo\")) #>      age    geo year ths_per #> 1 Y15-64 Europe 2014   222.3 #> 2 Y15-64 Europe 2015   225.0 #> 3 Y15-64 Europe 2016   233.5 #> 4 Y15-64  nonEU 2014     3.3 #> 5 Y15-64  nonEU 2015     3.5 #> 6 Y15-64  nonEU 2016     3.8 #> 7 Y15-64     EU 2014   219.0 #> 8 Y15-64     EU 2015   221.5 #> 9 Y15-64     EU 2016   229.7 HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"rowFactor\"), \"ths_per\",                   colVar = c(\"age\", \"year\"), output = \"matrixComponents\") #> $hcRow #> $hcRow$dataDummyHierarchy #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>              #> Europe 1 1 1 #> nonEU  1 . . #> EU     0 1 1 #>  #> $hcRow$valueMatrix #> 3 x 6 sparse Matrix of class \"dgCMatrix\" #>         1    2    3     4     5     6 #> [1,]  1.8  1.9  1.9   1.5   1.6   1.9 #> [2,] 11.6 14.2 12.7  20.2  24.3  25.8 #> [3,] 66.9 63.4 69.1 120.3 119.6 122.1 #>  #> $hcRow$fromCrossCode #>        geo #> 1  Iceland #> 2 Portugal #> 3    Spain #>  #> $hcRow$toCrossCode #>      geo #> 1 Europe #> 2  nonEU #> 3     EU #>  #>  #> $hcCol #> $hcCol$dataDummyHierarchy #> 3 x 6 sparse Matrix of class \"dgCMatrix\" #>                         #> Y15-64:2014 1 . . 1 . . #> Y15-64:2015 . 1 . . 1 . #> Y15-64:2016 . . 1 . . 1 #>  #> $hcCol$codeFrame #>      age year #> 1 Y15-64 2014 #> 2 Y15-64 2015 #> 3 Y15-64 2016 #>  #>  HierarchyCompute(x, list(age = ageHier, geo = geoHier, year = \"rowFactor\"), \"ths_per\",                   colVar = c(\"age\", \"geo\"), output = \"matrixComponents\") #> $hcRow #> $hcRow$dataDummyHierarchy #> 3 x 3 sparse Matrix of class \"dgCMatrix\" #>            #> 2014 1 . . #> 2015 . 1 . #> 2016 . . 1 #>  #> $hcRow$valueMatrix #> 3 x 6 sparse Matrix of class \"dgCMatrix\" #>        1    2    3   4    5     6 #> [1,] 1.8 11.6 66.9 1.5 20.2 120.3 #> [2,] 1.9 14.2 63.4 1.6 24.3 119.6 #> [3,] 1.9 12.7 69.1 1.9 25.8 122.1 #>  #> $hcRow$fromCrossCode #>   year #> 1 2014 #> 2 2015 #> 3 2016 #>  #> $hcRow$toCrossCode #>   year #> 1 2014 #> 2 2015 #> 3 2016 #>  #>  #> $hcCol #> $hcCol$dataDummyHierarchy #> 3 x 6 sparse Matrix of class \"dgCMatrix\" #>                           #> Y15-64:Europe 1 1 1 1 1 1 #> Y15-64:nonEU  1 . . 1 . . #> Y15-64:EU     0 1 1 0 1 1 #>  #> $hcCol$codeFrame #>      age    geo #> 1 Y15-64 Europe #> 2 Y15-64  nonEU #> 3 Y15-64     EU #>  #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyComputeDummy.html","id":null,"dir":"Reference","previous_headings":"","what":"HierarchyComputeDummy — HierarchyComputeDummy","title":"HierarchyComputeDummy — HierarchyComputeDummy","text":"hierarchies sparse model matrix possible cross table wrapping HierarchyCompute","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyComputeDummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HierarchyComputeDummy — HierarchyComputeDummy","text":"","code":"HierarchyComputeDummy(   data,   hierarchies,   inputInOutput = TRUE,   crossTable = FALSE,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyComputeDummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HierarchyComputeDummy — HierarchyComputeDummy","text":"data data hierarchies hierarchies crossTable Cross table output TRUE ... parameters sent HierarchyCompute","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyComputeDummy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HierarchyComputeDummy — HierarchyComputeDummy","text":"sparse model matrix list model matrix cross table","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyComputeDummy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HierarchyComputeDummy — HierarchyComputeDummy","text":"function special wrapper HierarchyCompute input argument hierarchies specified way. , variables can also coded \"rowFactor\"  ( colFactor).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyComputeDummy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"HierarchyComputeDummy — HierarchyComputeDummy","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyComputeDummy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HierarchyComputeDummy — HierarchyComputeDummy","text":"","code":"# Data and hierarchies used in the examples x <- SSBtoolsData(\"sprt_emp\")  # Employment in sport in thousand persons from Eurostat database geoHier <- SSBtoolsData(\"sprt_emp_geoHier\") ageHier <- SSBtoolsData(\"sprt_emp_ageHier\") HierarchyComputeDummy(x, list(age = ageHier, geo = geoHier, year = \"rowFactor\"),                        inputInOutput = FALSE, crossTable = TRUE) #> $modelMatrix #> 18 x 9 sparse Matrix of class \"dgCMatrix\" #>       Y15-64:Europe:2014 Y15-64:nonEU:2014 Y15-64:EU:2014 Y15-64:Europe:2015 #>  [1,]                  1                 .              1                  . #>  [2,]                  1                 1              0                  . #>  [3,]                  1                 .              1                  . #>  [4,]                  1                 .              1                  . #>  [5,]                  1                 1              0                  . #>  [6,]                  1                 .              1                  . #>  [7,]                  .                 .              .                  1 #>  [8,]                  .                 .              .                  1 #>  [9,]                  .                 .              .                  1 #> [10,]                  .                 .              .                  1 #> [11,]                  .                 .              .                  1 #> [12,]                  .                 .              .                  1 #> [13,]                  .                 .              .                  . #> [14,]                  .                 .              .                  . #> [15,]                  .                 .              .                  . #> [16,]                  .                 .              .                  . #> [17,]                  .                 .              .                  . #> [18,]                  .                 .              .                  . #>       Y15-64:nonEU:2015 Y15-64:EU:2015 Y15-64:Europe:2016 Y15-64:nonEU:2016 #>  [1,]                 .              .                  .                 . #>  [2,]                 .              .                  .                 . #>  [3,]                 .              .                  .                 . #>  [4,]                 .              .                  .                 . #>  [5,]                 .              .                  .                 . #>  [6,]                 .              .                  .                 . #>  [7,]                 .              1                  .                 . #>  [8,]                 1              0                  .                 . #>  [9,]                 .              1                  .                 . #> [10,]                 .              1                  .                 . #> [11,]                 1              0                  .                 . #> [12,]                 .              1                  .                 . #> [13,]                 .              .                  1                 . #> [14,]                 .              .                  1                 1 #> [15,]                 .              .                  1                 . #> [16,]                 .              .                  1                 . #> [17,]                 .              .                  1                 1 #> [18,]                 .              .                  1                 . #>       Y15-64:EU:2016 #>  [1,]              . #>  [2,]              . #>  [3,]              . #>  [4,]              . #>  [5,]              . #>  [6,]              . #>  [7,]              . #>  [8,]              . #>  [9,]              . #> [10,]              . #> [11,]              . #> [12,]              . #> [13,]              1 #> [14,]              0 #> [15,]              1 #> [16,]              1 #> [17,]              0 #> [18,]              1 #>  #> $crossTable #>      age    geo year #> 1 Y15-64 Europe 2014 #> 2 Y15-64  nonEU 2014 #> 3 Y15-64     EU 2014 #> 4 Y15-64 Europe 2015 #> 5 Y15-64  nonEU 2015 #> 6 Y15-64     EU 2015 #> 7 Y15-64 Europe 2016 #> 8 Y15-64  nonEU 2016 #> 9 Y15-64     EU 2016 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyFix.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the hierarchy table to follow the standard — HierarchyFix","title":"Change the hierarchy table to follow the standard — HierarchyFix","text":"Make sure variable names sign coding follow internal standard. Level may computed automatically","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyFix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the hierarchy table to follow the standard — HierarchyFix","text":"","code":"HierarchyFix(   hierarchy,   hierarchyVarNames = c(mapsFrom = \"mapsFrom\", mapsTo = \"mapsTo\", sign = \"sign\", level =     \"level\"),   autoLevel = TRUE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyFix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the hierarchy table to follow the standard — HierarchyFix","text":"hierarchy data frame hierarchy table hierarchyVarNames variable names autoLevel TRUE, level computed automatic method","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyFix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the hierarchy table to follow the standard — HierarchyFix","text":"data frame hierarchy table","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyFix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change the hierarchy table to follow the standard — HierarchyFix","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/HierarchyFix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the hierarchy table to follow the standard — HierarchyFix","text":"","code":"# Make input data by changing variable names and sign coding. h <- SSBtoolsData(\"FIFA2018ABCD\")[, 1:3] names(h)[1:2] <- c(\"from\", \"to\") minus <- h$sign < 0 h$sign <- \"+\" h$sign[minus] <- \"-\"  # Run HierarchyFix - Two levels created HierarchyFix(h, c(mapsFrom = \"from\", mapsTo = \"to\", sign = \"sign\")) #>        mapsFrom      mapsTo sign level #> 1     Australia     Oceania    1     1 #> 2          Iran        Asia    1     1 #> 3  Saudi Arabia        Asia    1     1 #> 4         Egypt      Africa    1     1 #> 5       Morocco      Africa    1     1 #> 6       Nigeria      Africa    1     1 #> 7     Argentina     America    1     1 #> 8          Peru     America    1     1 #> 9       Uruguay     America    1     1 #> 10      Croatia      Europe    1     1 #> 11      Denmark      Europe    1     1 #> 12       France      Europe    1     1 #> 13      Iceland      Europe    1     1 #> 14     Portugal      Europe    1     1 #> 15       Russia      Europe    1     1 #> 16        Spain      Europe    1     1 #> 17      Iceland       nonEU    1     1 #> 18       Russia       nonEU    1     1 #> 19       Russia nonSchengen    1     1 #> 20      Croatia nonSchengen    1     1 #> 21       Europe          EU    1     2 #> 22        nonEU          EU   -1     2 #> 23       Europe    Schengen    1     2 #> 24  nonSchengen    Schengen   -1     2  # Extend the hierarchy table h2 <- rbind(data.frame(from = c(\"Oceania\", \"Asia\", \"Africa\", \"America\", \"Europe\"),                        to = \"World\", sign = \"+\"),            data.frame(from = c(\"World\", \"Europe\"),                       to = \"nonEurope\", sign = c(\"+\", \"-\")), h)  # Run HierarchyFix - Three levels created HierarchyFix(h2, c(mapsFrom = \"from\", mapsTo = \"to\", sign = \"sign\")) #>        mapsFrom      mapsTo sign level #> 1       Oceania       World    1     2 #> 2          Asia       World    1     2 #> 3        Africa       World    1     2 #> 4       America       World    1     2 #> 5        Europe       World    1     2 #> 6         World   nonEurope    1     3 #> 7        Europe   nonEurope   -1     3 #> 8     Australia     Oceania    1     1 #> 9          Iran        Asia    1     1 #> 10 Saudi Arabia        Asia    1     1 #> 11        Egypt      Africa    1     1 #> 12      Morocco      Africa    1     1 #> 13      Nigeria      Africa    1     1 #> 14    Argentina     America    1     1 #> 15         Peru     America    1     1 #> 16      Uruguay     America    1     1 #> 17      Croatia      Europe    1     1 #> 18      Denmark      Europe    1     1 #> 19       France      Europe    1     1 #> 20      Iceland      Europe    1     1 #> 21     Portugal      Europe    1     1 #> 22       Russia      Europe    1     1 #> 23        Spain      Europe    1     1 #> 24      Iceland       nonEU    1     1 #> 25       Russia       nonEU    1     1 #> 26       Russia nonSchengen    1     1 #> 27      Croatia nonSchengen    1     1 #> 28       Europe          EU    1     2 #> 29        nonEU          EU   -1     2 #> 30       Europe    Schengen    1     2 #> 31  nonSchengen    Schengen   -1     2"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/LSfitNonNeg.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","title":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","text":"Assuming  z = t(x) %*% y  + noise, non-negatively modified least squares estimate t(x) %*% y made.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/LSfitNonNeg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","text":"","code":"LSfitNonNeg(x, z, limit = 1e-10, viaQR = FALSE, printInc = TRUE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/LSfitNonNeg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","text":"x matrix z single column matrix limit Lower limit non-zero fits. Set NULL -Inf avoid non-zero restriction. viaQR Least squares fits obtained using qr TRUE. printInc Printing \"...\" console TRUE.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/LSfitNonNeg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","text":"fitted version z","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/LSfitNonNeg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","text":"problem first reduced elimination rows x  (elements y) using GaussIndependent. Thereafter least squares fits obtained using solve qr. Possible negative fits forced zero next estimation iteration(s).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/LSfitNonNeg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/LSfitNonNeg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-negative regression fits with a sparse overparameterized model matrix — LSfitNonNeg","text":"","code":"set.seed(123) data2 <- SSBtoolsData(\"z2\") x <- ModelMatrix(data2, formula = ~fylke + kostragr * hovedint - 1) z <- Matrix::t(x) %*% data2$ant + rnorm(ncol(x), sd = 3) LSfitNonNeg(x, z) #> (-)..........-z...... #> 20 x 1 Matrix of class \"dgeMatrix\" #>                           [,1] #> 1-Total-Total        124.16486 #> 4-Total-Total         53.15576 #> 5-Total-Total        121.52242 #> 6-Total-Total        204.05782 #> 8-Total-Total        104.23415 #> 10-Total-Total        99.99149 #> Total-300-Total      599.12021 #> Total-400-Total      108.00628 #> Total-Total-annet     87.11441 #> Total-Total-arbeid    52.20565 #> Total-Total-soshjelp 344.18318 #> Total-Total-trygd    223.62325 #> Total-300-annet       71.44359 #> Total-300-arbeid      52.20565 #> Total-300-soshjelp   282.23779 #> Total-300-trygd      193.23318 #> Total-400-annet       15.67083 #> Total-400-arbeid       0.00000 #> Total-400-soshjelp    61.94538 #> Total-400-trygd       30.39007 LSfitNonNeg(x, z, limit = NULL) #> (-).......... #> 20 x 1 Matrix of class \"dgeMatrix\" #>                            [,1] #> 1-Total-Total        124.083059 #> 4-Total-Total         53.073953 #> 5-Total-Total        121.440610 #> 6-Total-Total        203.976011 #> 8-Total-Total        104.152349 #> 10-Total-Total        99.909680 #> Total-300-Total      599.283822 #> Total-400-Total      107.351839 #> Total-Total-annet     87.332560 #> Total-Total-arbeid    51.060386 #> Total-Total-soshjelp 344.401322 #> Total-Total-trygd    223.841393 #> Total-300-annet       71.143636 #> Total-300-arbeid      53.269117 #> Total-300-soshjelp   281.937840 #> Total-300-trygd      192.933228 #> Total-400-annet       16.188924 #> Total-400-arbeid      -2.208732 #> Total-400-soshjelp    62.463482 #> Total-400-trygd       30.908165  if (FALSE) { # \\dontrun{ mf <- ~region*mnd + hovedint*mnd + fylke*hovedint*mnd + kostragr*hovedint*mnd data4 <- SSBtoolsData(\"sosialFiktiv\") x <- ModelMatrix(data4, formula = mf) z <- Matrix::t(x) %*% data4$ant + rnorm(ncol(x), sd = 3) zFit <- LSfitNonNeg(x, z) } # }"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeFreq.html","id":null,"dir":"Reference","previous_headings":"","what":"Microdata frequency data conversion — MakeFreq","title":"Microdata frequency data conversion — MakeFreq","text":"Microdata frequency data conversion","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeFreq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Microdata frequency data conversion — MakeFreq","text":"","code":"MakeFreq(x, freqName = \"freq\", all = FALSE, hierarchies = FALSE)  MakeMicro(x, freqVar)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeFreq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Microdata frequency data conversion — MakeFreq","text":"x data frame freqName Name new frequency variable output data Whether include level combinations microdata (zero frequency) hierarchies Whether treat hierarchical variables automatically  =TRUE freqVar frequency variable input data, name number.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeFreq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Microdata frequency data conversion — MakeFreq","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeFreq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Microdata frequency data conversion — MakeFreq","text":"","code":"z <- SSBtoolsData(\"sprt_emp\")[c(1, 2, 4, 7:12, 15, 17, 18), -4] z$eu <- z$geo != \"Iceland\" z #>       age      geo year    eu #> 1  Y15-29    Spain 2014  TRUE #> 2  Y15-29  Iceland 2014 FALSE #> 4  Y30-64    Spain 2014  TRUE #> 7  Y15-29    Spain 2015  TRUE #> 8  Y15-29  Iceland 2015 FALSE #> 9  Y15-29 Portugal 2015  TRUE #> 10 Y30-64    Spain 2015  TRUE #> 11 Y30-64  Iceland 2015 FALSE #> 12 Y30-64 Portugal 2015  TRUE #> 15 Y15-29 Portugal 2016  TRUE #> 17 Y30-64  Iceland 2016 FALSE #> 18 Y30-64 Portugal 2016  TRUE  MakeFreq(z) #>       age      geo year    eu freq #> 1  Y15-29  Iceland 2014 FALSE    1 #> 2  Y15-29  Iceland 2015 FALSE    1 #> 3  Y15-29 Portugal 2015  TRUE    1 #> 4  Y15-29 Portugal 2016  TRUE    1 #> 5  Y15-29    Spain 2014  TRUE    1 #> 6  Y15-29    Spain 2015  TRUE    1 #> 7  Y30-64  Iceland 2015 FALSE    1 #> 8  Y30-64  Iceland 2016 FALSE    1 #> 9  Y30-64 Portugal 2015  TRUE    1 #> 10 Y30-64 Portugal 2016  TRUE    1 #> 11 Y30-64    Spain 2014  TRUE    1 #> 12 Y30-64    Spain 2015  TRUE    1 MakeFreq(z[, -2]) #>       age year    eu freq #> 1  Y15-29 2014 FALSE    1 #> 2  Y15-29 2014  TRUE    1 #> 3  Y15-29 2015 FALSE    1 #> 4  Y15-29 2015  TRUE    2 #> 5  Y15-29 2016  TRUE    1 #> 6  Y30-64 2014  TRUE    1 #> 7  Y30-64 2015 FALSE    1 #> 8  Y30-64 2015  TRUE    2 #> 9  Y30-64 2016 FALSE    1 #> 10 Y30-64 2016  TRUE    1 MakeFreq(z[, -(2:3)]) #>      age    eu freq #> 1 Y15-29 FALSE    2 #> 2 Y15-29  TRUE    4 #> 3 Y30-64 FALSE    2 #> 4 Y30-64  TRUE    4 MakeFreq(z[, -1]) #>        geo year    eu freq #> 1  Iceland 2014 FALSE    1 #> 2  Iceland 2015 FALSE    2 #> 3  Iceland 2016 FALSE    1 #> 4 Portugal 2015  TRUE    2 #> 5 Portugal 2016  TRUE    2 #> 6    Spain 2014  TRUE    2 #> 7    Spain 2015  TRUE    2 MakeFreq(z[, -1], all = TRUE) #>         geo year    eu freq #> 1     Spain 2014  TRUE    2 #> 2   Iceland 2014  TRUE    0 #> 3  Portugal 2014  TRUE    0 #> 4     Spain 2015  TRUE    2 #> 5   Iceland 2015  TRUE    0 #> 6  Portugal 2015  TRUE    2 #> 7     Spain 2016  TRUE    0 #> 8   Iceland 2016  TRUE    0 #> 9  Portugal 2016  TRUE    2 #> 10    Spain 2014 FALSE    0 #> 11  Iceland 2014 FALSE    1 #> 12 Portugal 2014 FALSE    0 #> 13    Spain 2015 FALSE    0 #> 14  Iceland 2015 FALSE    2 #> 15 Portugal 2015 FALSE    0 #> 16    Spain 2016 FALSE    0 #> 17  Iceland 2016 FALSE    1 #> 18 Portugal 2016 FALSE    0  x <- MakeFreq(z[, -1], all = TRUE, hierarchies = TRUE) x #>        geo    eu year freq #> 1    Spain  TRUE 2014    2 #> 2  Iceland FALSE 2014    1 #> 3 Portugal  TRUE 2014    0 #> 4    Spain  TRUE 2015    2 #> 5  Iceland FALSE 2015    2 #> 6 Portugal  TRUE 2015    2 #> 7    Spain  TRUE 2016    0 #> 8  Iceland FALSE 2016    1 #> 9 Portugal  TRUE 2016    2  MakeMicro(x, \"freq\") #>         geo    eu year freq #> 1     Spain  TRUE 2014    1 #> 2     Spain  TRUE 2014    1 #> 3   Iceland FALSE 2014    1 #> 4     Spain  TRUE 2015    1 #> 5     Spain  TRUE 2015    1 #> 6   Iceland FALSE 2015    1 #> 7   Iceland FALSE 2015    1 #> 8  Portugal  TRUE 2015    1 #> 9  Portugal  TRUE 2015    1 #> 10  Iceland FALSE 2016    1 #> 11 Portugal  TRUE 2016    1 #> 12 Portugal  TRUE 2016    1"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeHierFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Make model formula from data taking into account hierarchical variables — MakeHierFormula","title":"Make model formula from data taking into account hierarchical variables — MakeHierFormula","text":"Make model formula data taking account hierarchical variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeHierFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make model formula from data taking into account hierarchical variables — MakeHierFormula","text":"","code":"MakeHierFormula(   data = NULL,   hGroups = HierarchicalGroups2(data),   n = length(hGroups),   sim = TRUE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeHierFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make model formula from data taking into account hierarchical variables — MakeHierFormula","text":"data data frame hGroups Output HierarchicalGroups2() n Interaction level 0 (levels) sim Include \"~\" TRUE","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeHierFormula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make model formula from data taking into account hierarchical variables — MakeHierFormula","text":"Formula character string","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeHierFormula.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make model formula from data taking into account hierarchical variables — MakeHierFormula","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MakeHierFormula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make model formula from data taking into account hierarchical variables — MakeHierFormula","text":"","code":"x <- SSBtoolsData(\"sprt_emp_withEU\")[, -4] MakeHierFormula(x) #> [1] \"~ age*geo*year + age*eu*year\" MakeHierFormula(x, n = 2) #> [1] \"~ age*geo + age*eu + age*year + geo*year + eu*year\" MakeHierFormula(x, n = 0) #> [1] \"~ age + geo + eu + year + age:geo + age:eu + age:year + geo:year + eu:year + age:geo:year + age:eu:year\""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Match.html","id":null,"dir":"Reference","previous_headings":"","what":"Matching rows in data frames — Match","title":"Matching rows in data frames — Match","text":"algorithm based converting variable combinations whole numbers. final matching performed using match.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matching rows in data frames — Match","text":"","code":"Match(x, y)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matching rows in data frames — Match","text":"x data frame y data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matching rows in data frames — Match","text":"integer vector giving position y first match match, otherwise NA.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Match.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Matching rows in data frames — Match","text":"result multiplying together number unique values column x exceeds 9E15 (largest value stored exactly numeric data type), algorithm recursive.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Match.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Matching rows in data frames — Match","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matching rows in data frames — Match","text":"","code":"a <- data.frame(x = c(\"a\", \"b\", \"c\"), y = c(\"A\", \"B\"), z = 1:6) b <- data.frame(x = c(\"b\", \"c\"), y = c(\"B\", \"K\", \"A\", \"B\"), z = c(2, 3, 5, 6))  Match(a, b) #> [1] NA  1 NA NA  3  4 Match(b, a) #> [1]  2 NA  5  6  # Slower alternative match(data.frame(t(a), stringsAsFactors = FALSE), data.frame(t(b), stringsAsFactors = FALSE)) #> [1] NA  1 NA NA  3  4 match(data.frame(t(b), stringsAsFactors = FALSE), data.frame(t(a), stringsAsFactors = FALSE)) #> [1]  2 NA  5  6  # More comprehensive example (n, m and k may be changed) n <- 10^4 m <- 10^3 k <- 10^2 data(precip) data(mtcars) y <- data.frame(car = sample(rownames(mtcars), n, replace = TRUE),                  city = sample(names(precip), n, replace = TRUE),                 n = rep_len(1:k, n), a = rep_len(c(\"A\", \"B\", \"C\", \"D\"), n),                 b = rep_len(as.character(rnorm(1000)), n),                 d = sample.int(k + 10, n, replace = TRUE),                 e = paste(sample.int(k * 2, n, replace = TRUE),                            rep_len(c(\"Green\", \"Red\", \"Blue\"), n), sep = \"_\"),                 r = rnorm(k)^99) x <- y[sample.int(n, m), ] row.names(x) <- NULL ix <- Match(x, y)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert matrix to sparse list — Matrix2list","title":"Convert matrix to sparse list — Matrix2list","text":"Convert matrix sparse list","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert matrix to sparse list — Matrix2list","text":"","code":"Matrix2list(x)  Matrix2listInt(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert matrix to sparse list — Matrix2list","text":"x Input matrix","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert matrix to sparse list — Matrix2list","text":"two-element list: List row numbers (r) list numeric integer values (x)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert matrix to sparse list — Matrix2list","text":"Within function, input matrix first converted dgTMatrix matrix (Matrix package).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert matrix to sparse list — Matrix2list","text":"Matrix2listInt convers values integers .integer checking performed. Thus, zeros possible.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert matrix to sparse list — Matrix2list","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Matrix2list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert matrix to sparse list — Matrix2list","text":"","code":"m = matrix(c(0.5, 1.1, 3.14, 0, 0, 0, 0, 4, 5), 3, 3) Matrix2list(m) #> $r #> $r[[1]] #> [1] 1 2 3 #>  #> $r[[2]] #> integer(0) #>  #> $r[[3]] #> [1] 2 3 #>  #>  #> $x #> $x[[1]] #> [1] 0.50 1.10 3.14 #>  #> $x[[2]] #> numeric(0) #>  #> $x[[3]] #> [1] 4 5 #>  #>  Matrix2listInt(m) #> $r #> $r[[1]] #> [1] 1 2 3 #>  #> $r[[2]] #> integer(0) #>  #> $r[[3]] #> [1] 2 3 #>  #>  #> $x #> $x[[1]] #> [1] 0 1 3 #>  #> $x[[2]] #> integer(0) #>  #> $x[[3]] #> [1] 4 5 #>  #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixPaste.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining columns of a matrix — MatrixPaste","title":"Combining columns of a matrix — MatrixPaste","text":"Combining columns matrix","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixPaste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining columns of a matrix — MatrixPaste","text":"","code":"MatrixPaste(x, sep = \"_\", forceCharacter = FALSE, stringEmpty = \" \")  MatrixPaste1(x, stringEmpty = \"1\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixPaste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining columns of a matrix — MatrixPaste","text":"x Matrix vector sep String used combine columns forceCharacter FALSE single column input keep original class output. stringEmpty String used input empty (can set NULL)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixPaste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining columns of a matrix — MatrixPaste","text":"Character vector possibly vector input","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixPaste.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combining columns of a matrix — MatrixPaste","text":"row input combined single string using sep.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixPaste.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combining columns of a matrix — MatrixPaste","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixPaste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining columns of a matrix — MatrixPaste","text":"","code":"if (FALSE) { # \\dontrun{ MatrixPaste(matrix(1:12,3,4)) MatrixPaste(1:5) MatrixPaste(1:5, forceCharacter=TRUE) MatrixPaste(matrix(integer(0),3,0)) MatrixPaste(NULL) } # }"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixToDataFrame.html","id":null,"dir":"Reference","previous_headings":"","what":"MatrixToDataFrame — MatrixToDataFrame","title":"MatrixToDataFrame — MatrixToDataFrame","text":"MatrixToDataFrame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixToDataFrame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MatrixToDataFrame — MatrixToDataFrame","text":"","code":"MatrixToDataFrame(x, forceStringsAsFactors = FALSE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixToDataFrame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MatrixToDataFrame — MatrixToDataFrame","text":"x matrix forceStringsAsFactors forceStringsAsFactors","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixToDataFrame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MatrixToDataFrame — MatrixToDataFrame","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/MatrixToDataFrame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MatrixToDataFrame — MatrixToDataFrame","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Mipf.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterative proportional fitting from matrix input — Mipf","title":"Iterative proportional fitting from matrix input — Mipf","text":"linear equation, z = t(x) %*% y, (hopefully)  solved y iterative proportional fitting","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Mipf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterative proportional fitting from matrix input — Mipf","text":"","code":"Mipf(   x,   z = NULL,   iter = 100,   yStart = matrix(1, nrow(x), 1),   eps = 0.01,   tol = 1e-10,   reduceBy0 = FALSE,   reduceByColSums = FALSE,   reduceByLeverage = FALSE,   returnDetails = FALSE,   y = NULL )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Mipf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterative proportional fitting from matrix input — Mipf","text":"x matrix z single column matrix iter maximum number iterations yStart starting estimate y eps stopping criterion. Maximum allowed value max(abs(z - t(x) %*% yHat)) tol Another stopping criterion. Maximum absolute difference two iterations. reduceBy0 TRUE, Reduce0exact used within function reduceByColSums Parameter Reduce0exact (TRUE) reduceByLeverage Parameter Reduce0exact (TRUE) returnDetails output TRUE. y possible set z NULL supply original y instead  (z = t(x) %*% y)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Mipf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterative proportional fitting from matrix input — Mipf","text":"yHat, estimate y","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Mipf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iterative proportional fitting from matrix input — Mipf","text":"algorithm work similar loglin input x-matrix overparameterized model matrix – can created ModelMatrix FormulaSums. See Examples.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Mipf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Iterative proportional fitting from matrix input — Mipf","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Mipf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterative proportional fitting from matrix input — Mipf","text":"","code":"if (FALSE) { # \\dontrun{ data2 <- SSBtoolsData(\"z2\") x <- ModelMatrix(data2, formula = ~fylke + kostragr * hovedint - 1) z <- Matrix::t(x) %*% data2$ant  # same as FormulaSums(data2, ant~fylke + kostragr * hovedint -1) yHat <- Mipf(x, z)  ############################# # loglm comparison   #############################  if (require(MASS)){  # Increase accuracy yHat <- Mipf(x, z, eps = 1e-04)  # Run loglm and store fitted values in a data frame outLoglm <- loglm(ant ~ fylke + kostragr * hovedint, data2, eps = 1e-04, iter = 100) dfLoglm <- as.data.frame.table(fitted(outLoglm))  # Problem 1: Variable region not in output, but instead the variable .Within.   # Problem 2: Extra zeros since hierarchy not treated. Impossible combinations in output.  # By sorting data, it becomes clear that the fitted values are the same. max(abs(sort(dfLoglm$Freq, decreasing = TRUE)[1:nrow(data2)] - sort(yHat, decreasing = TRUE)))  # Modify so that region is in output. Problem 1 avoided. x <- ModelMatrix(data2, formula = ~region + kostragr * hovedint - 1) z <- Matrix::t(x) %*% data2$ant  # same as FormulaSums(data2, ant~fylke + kostragr * hovedint -1) yHat <- Mipf(x, z, eps = 1e-04) outLoglm <- loglm(ant ~ region + kostragr * hovedint, data2, eps = 1e-04, iter = 100) dfLoglm <- as.data.frame.table(fitted(outLoglm))  # Now it is possible to merge data merg <- merge(cbind(data2, yHat), dfLoglm)  # Identical output max(abs(merg$yHat - merg$Freq))  } } # }  ############################# # loglin comparison   #############################   # Generate input data for loglin n <- 5:9 tab <- array(sample(1:prod(n)), n)  # Input parameters iter <- 20 eps <- 1e-05  # Estimate yHat by loglin out <- loglin(tab, list(c(1, 2), c(1, 3), c(1, 4), c(1, 5), c(2, 3, 4), c(3, 4, 5)),                fit = TRUE, iter = iter, eps = eps) #> 7 iterations: deviation 4.223548e-07  yHatLoglin <- matrix(((out$fit)), ncol = 1)  # Transform the data for input to Mipf df <- as.data.frame.table(tab) names(df)[1:5] <- c(\"A\", \"B\", \"C\", \"D\", \"E\") x <- ModelMatrix(df, formula = ~A:B + A:C + A:D + A:E + B:C:D + C:D:E - 1) z <- Matrix::t(x) %*% df$Freq  # Estimate yHat by Mipf yHatPMipf <- Mipf(x, z, iter = iter, eps = eps) #> :......  6 iterations: deviation 4.228204e-07  # Maximal absolute difference max(abs(yHatPMipf - yHatLoglin)) #> [1] 1.391527e-09  # Note: loglin reports one iteration extra   # Another example. Only one iteration needed. max(abs(Mipf(x = FormulaSums(df, ~A:B + C - 1),               z = FormulaSums(df, Freq ~ A:B + C -1))               - matrix(loglin(tab, list(1:2, 3), fit = TRUE)$fit, ncol = 1))) #> :.  1 iterations: deviation 8.940697e-082 iterations: deviation 9.126961e-08  #> [1] 9.367795e-11   ######################################### # Examples utilizing Reduce0exact  #########################################  z3 <- SSBtoolsData(\"z3\") x <- ModelMatrix(z3, formula = ~region + kostragr * hovedint + region * mnd2 + fylke * mnd +                       mnd * hovedint + mnd2 * fylke * hovedint - 1)  # reduceBy0, but no iteration improvement. Identical results. t <- 360 y <- z3$ant y[round((1:t) * 432/t)] <- 0 z <- Matrix::t(x) %*% y a1 <- Mipf(x, z, eps = 0.1) #> :...  4 iterations: deviation 0.04788942 a2 <- Mipf(x, z, reduceBy0 = TRUE, eps = 0.1) #> -z(432*216->72*116):...  4 iterations: deviation 0.04788942 a3 <- Mipf(x, z, reduceByColSums = TRUE, eps = 0.1) #> -z(432*216->72*116):...  4 iterations: deviation 0.04788942 max(abs(a1 - a2)) #> [1] 0 max(abs(a1 - a3)) #> [1] 0   if (FALSE) { # \\dontrun{ # Improvement by reduceByColSums. Changing eps and iter give more similar results. t <- 402 y <- z3$ant y[round((1:t) * 432/t)] <- 0 z <- Matrix::t(x) %*% y a1 <- Mipf(x, z, eps = 1) a2 <- Mipf(x, z, reduceBy0 = TRUE, eps = 1) a3 <- Mipf(x, z, reduceByColSums = TRUE, eps = 1) max(abs(a1 - a2)) max(abs(a1 - a3))   # Improvement by ReduceByLeverage. Changing eps and iter give more similar results. t <- 378 y <- z3$ant y[round((1:t) * 432/t)] <- 0 z <- Matrix::t(x) %*% y a1 <- Mipf(x, z, eps = 1) a2 <- Mipf(x, z, reduceBy0 = TRUE, eps = 1) a3 <- Mipf(x, z, reduceByColSums = TRUE, eps = 1) a4 <- Mipf(x, z, reduceByLeverage = TRUE, eps = 1) max(abs(a1 - a2)) max(abs(a1 - a3)) max(abs(a1 - a4))   # Example with small eps and \"Iteration stopped since tol reached\" t <- 384 y <- z3$ant y[round((1:t) * 432/t)] <- 0 z <- Matrix::t(x) %*% y a1 <- Mipf(x, z, eps = 1e-14) a2 <- Mipf(x, z, reduceBy0 = TRUE, eps = 1e-14) a3 <- Mipf(x, z, reduceByColSums = TRUE, eps = 1e-14) max(abs(a1 - a2)) max(abs(a1 - a3)) } # }  # All y-data found by reduceByColSums (0 iterations).  t <- 411 y <- z3$ant y[round((1:t) * 432/t)] <- 0 z <- Matrix::t(x) %*% y a1 <- Mipf(x, z) #> :.  1 iterations: deviation 4.440892e-16 a2 <- Mipf(x, z, reduceBy0 = TRUE) #> -z(432*216->13*84):.  1 iterations: deviation 0 a3 <- Mipf(x, z, reduceByColSums = TRUE) #> -zx-(432*216->0*0)   0 iterations max(abs(a1 - y)) #> [1] 4.440892e-16 max(abs(a2 - y)) #> [1] 0 max(abs(a3 - y)) #> [1] 0"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ModelMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Model matrix from hierarchies and/or a formula — ModelMatrix","title":"Model matrix from hierarchies and/or a formula — ModelMatrix","text":"common interface Hierarchies2ModelMatrix, Formula2ModelMatrix HierarchiesAndFormula2ModelMatrix","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ModelMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model matrix from hierarchies and/or a formula — ModelMatrix","text":"","code":"ModelMatrix(   data,   hierarchies = NULL,   formula = NULL,   inputInOutput = TRUE,   crossTable = FALSE,   sparse = TRUE,   viaOrdinary = FALSE,   total = \"Total\",   removeEmpty = !is.null(formula) & is.null(hierarchies),   modelMatrix = NULL,   dimVar = NULL,   select = NULL,   ... )  NamesFromModelMatrixInput(   data = NULL,   hierarchies = NULL,   formula = NULL,   dimVar = NULL,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ModelMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model matrix from hierarchies and/or a formula — ModelMatrix","text":"data Matrix data frame data containing codes relevant variables hierarchies List hierarchies, can converted AutoHierarchies. Thus, variables can also coded \"rowFactor\" \"\", correspond using categories data. formula model formula inputInOutput Logical vector (possibly recycled) element hierarchies. TRUE means codes input included output. Values corresponding \"rowFactor\" \"\" ignored. crossTable Cross table output TRUE sparse Sparse matrix output TRUE (default) viaOrdinary TRUE, output generated model.matrix sparse.model.matrix. Since functions omit factor level, empty factor level first added. total String(s) used name totals removeEmpty TRUE, empty columns (zeros) included output. Default TRUE formula input without hierarchy otherwise FALSE (see details). modelMatrix model matrix input (output) dimVar main dimensional variables additional aggregating variables. parameter can  useful hierarchies formula unspecified. select Data frame specifying variable combinations output named list specifying code selections variable (see details). ... arguments  Hierarchies2ModelMatrix, Formula2ModelMatrix HierarchiesAndFormula2ModelMatrix","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ModelMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model matrix from hierarchies and/or a formula — ModelMatrix","text":"(sparse) model matrix list two elements (model matrix cross table)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ModelMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model matrix from hierarchies and/or a formula — ModelMatrix","text":"default value removeEmpty corresponds default settings underlying functions. functions Hierarchies2ModelMatrix HierarchiesAndFormula2ModelMatrix removeEmpty explicit parameter FALSE default. function Formula2ModelMatrix wrapper FormulaSums, parameter includeEmpty FALSE default. Thus, ModelMatrix makes call Formula2ModelMatrix includeEmpty = !removeEmpty. NamesFromModelMatrixInput returns names data columns involved creating model matrix. Note data must non-NULL convert dimVar indices names. select parameter forwarded Hierarchies2ModelMatrix unless removeEmpty = TRUE combined select data frame. cases, select handled outside underlying functions making selections result. Empty columns can added model matrix removeEmpty = FALSE (warning).","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ModelMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model matrix from hierarchies and/or a formula — ModelMatrix","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/ModelMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model matrix from hierarchies and/or a formula — ModelMatrix","text":"","code":"# Create some input z <- SSBtoolsData(\"sp_emp_withEU\") ageHier <- data.frame(mapsFrom = c(\"young\", \"old\"), mapsTo = \"Total\", sign = 1) geoDimList <- FindDimLists(z[, c(\"geo\", \"eu\")], total = \"Europe\")[[1]]  # Small dataset example. Two dimensions. s <- z[z$geo == \"Spain\" & z$year != 2016, ] rownames(s) <- NULL s #>     age   geo eu year value #> 1 young Spain EU 2014  66.9 #> 2   old Spain EU 2014 120.3 #> 3 young Spain EU 2015  63.4 #> 4   old Spain EU 2015 119.6  # via Hierarchies2ModelMatrix() and converted to ordinary matrix (not sparse) ModelMatrix(s, list(age = ageHier, year = \"\"), sparse = FALSE) #>      Total:2014 Total:2015 old:2014 old:2015 young:2014 young:2015 #> [1,]          1          0        0        0          1          0 #> [2,]          1          0        1        0          0          0 #> [3,]          0          1        0        0          0          1 #> [4,]          0          1        0        1          0          0  # Hierarchies generated automatically. Then via Hierarchies2ModelMatrix() ModelMatrix(s[, c(1, 4)]) #> 4 x 9 sparse Matrix of class \"dgCMatrix\" #>      Total:Total Total:2014 Total:2015 old:Total old:2014 old:2015 young:Total #> [1,]           1          1          .         .        .        .           1 #> [2,]           1          1          .         1        1        .           . #> [3,]           1          .          1         .        .        .           1 #> [4,]           1          .          1         1        .        1           . #>      young:2014 young:2015 #> [1,]          1          . #> [2,]          .          . #> [3,]          .          1 #> [4,]          .          .  # via Formula2ModelMatrix() ModelMatrix(s, formula = ~age + year) #> 4 x 5 sparse Matrix of class \"dgCMatrix\" #>      Total-Total old-Total young-Total Total-2014 Total-2015 #> [1,]           1         .           1          1          . #> [2,]           1         1           .          1          . #> [3,]           1         .           1          .          1 #> [4,]           1         1           .          .          1  # via model.matrix() after adding empty factor levels ModelMatrix(s, formula = ~age + year, sparse = FALSE, viaOrdinary = TRUE) #>   (Intercept) ageold ageyoung year2014 year2015 #> 1           1      0        1        1        0 #> 2           1      1        0        1        0 #> 3           1      0        1        0        1 #> 4           1      1        0        0        1 #> attr(,\"assign\") #> [1] 0 1 1 2 2 #> attr(,\"contrasts\") #> attr(,\"contrasts\")$age #> [1] \"contr.treatment\" #>  #> attr(,\"contrasts\")$year #> [1] \"contr.treatment\" #>   # via sparse.model.matrix() after adding empty factor levels ModelMatrix(s, formula = ~age + year, viaOrdinary = TRUE) #> 4 x 5 sparse Matrix of class \"dgCMatrix\" #>   (Intercept) ageold ageyoung year2014 year2015 #> 1           1      .        1        1        . #> 2           1      1        .        1        . #> 3           1      .        1        .        1 #> 4           1      1        .        .        1  # via HierarchiesAndFormula2ModelMatrix() and using different data and parameter settings ModelMatrix(s, list(age = ageHier, geo = geoDimList, year = \"\"), formula = ~age * geo + year,              inputInOutput = FALSE, removeEmpty = TRUE, crossTable = TRUE) #> $modelMatrix #> 4 x 4 sparse Matrix of class \"dgCMatrix\" #>      Total-Europe-2014 Total-Europe-2015 Total-Europe-Total Total-EU-Total #> [1,]                 1                 .                  1              1 #> [2,]                 1                 .                  1              1 #> [3,]                 .                 1                  1              1 #> [4,]                 .                 1                  1              1 #>  #> $crossTable #>     age    geo  year #> 1 Total Europe  2014 #> 2 Total Europe  2015 #> 3 Total Europe Total #> 4 Total     EU Total #>  ModelMatrix(s, list(age = ageHier, geo = geoDimList, year = \"\"), formula = ~age * geo + year,              inputInOutput = c(TRUE, FALSE), removeEmpty = FALSE, crossTable = TRUE) #> $modelMatrix #> 4 x 11 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 11 column names ‘Total-Europe-2014’, ‘Total-Europe-2015’, ‘Total-Europe-Total’ ... ]] #>                            #> [1,] 1 . 1 1 . . . . 1 1 . #> [2,] 1 . 1 1 . 1 1 . . . . #> [3,] . 1 1 1 . . . . 1 1 . #> [4,] . 1 1 1 . 1 1 . . . . #>  #> $crossTable #>      age    geo  year #> 1  Total Europe  2014 #> 2  Total Europe  2015 #> 3  Total Europe Total #> 4  Total     EU Total #> 5  Total  nonEU Total #> 6    old Europe Total #> 7    old     EU Total #> 8    old  nonEU Total #> 9  young Europe Total #> 10 young     EU Total #> 11 young  nonEU Total #>  ModelMatrix(z, list(age = ageHier, geo = geoDimList, year = \"\"), formula = ~age * year + geo,              inputInOutput = c(FALSE, TRUE), crossTable = TRUE) #> $modelMatrix #> 18 x 10 sparse Matrix of class \"dgCMatrix\" #>   [[ suppressing 10 column names ‘Total-Total-Europe’, ‘Total-Total-Europe’, ‘Total-Total-EU’ ... ]] #>                           #>  [1,] 1 1 1 . . . 1 1 . . #>  [2,] 1 1 . 1 1 . . 1 . . #>  [3,] 1 1 1 . . 1 . 1 . . #>  [4,] 1 1 1 . . . 1 1 . . #>  [5,] 1 1 . 1 1 . . 1 . . #>  [6,] 1 1 1 . . 1 . 1 . . #>  [7,] 1 1 1 . . . 1 . 1 . #>  [8,] 1 1 . 1 1 . . . 1 . #>  [9,] 1 1 1 . . 1 . . 1 . #> [10,] 1 1 1 . . . 1 . 1 . #> [11,] 1 1 . 1 1 . . . 1 . #> [12,] 1 1 1 . . 1 . . 1 . #> [13,] 1 1 1 . . . 1 . . 1 #> [14,] 1 1 . 1 1 . . . . 1 #> [15,] 1 1 1 . . 1 . . . 1 #> [16,] 1 1 1 . . . 1 . . 1 #> [17,] 1 1 . 1 1 . . . . 1 #> [18,] 1 1 1 . . 1 . . . 1 #>  #> $crossTable #>      age  year      geo #> 1  Total Total   Europe #> 2  Total Total   Europe #> 3  Total Total       EU #> 4  Total Total    nonEU #> 5  Total Total  Iceland #> 6  Total Total Portugal #> 7  Total Total    Spain #> 8  Total  2014   Europe #> 9  Total  2015   Europe #> 10 Total  2016   Europe #>               # via Hierarchies2ModelMatrix() using unnamed list element. See AutoHierarchies.              colnames(ModelMatrix(z, list(age = ageHier, c(Europe = \"geo\", Allyears = \"year\", \"eu\")))) #>  [1] \"Total:Europe:Allyears\"   \"Total:Europe:2014\"       #>  [3] \"Total:Europe:2015\"       \"Total:Europe:2016\"       #>  [5] \"Total:EU:Allyears\"       \"Total:EU:2014\"           #>  [7] \"Total:EU:2015\"           \"Total:EU:2016\"           #>  [9] \"Total:nonEU:Allyears\"    \"Total:nonEU:2014\"        #> [11] \"Total:nonEU:2015\"        \"Total:nonEU:2016\"        #> [13] \"Total:Iceland:Allyears\"  \"Total:Iceland:2014\"      #> [15] \"Total:Iceland:2015\"      \"Total:Iceland:2016\"      #> [17] \"Total:Portugal:Allyears\" \"Total:Portugal:2014\"     #> [19] \"Total:Portugal:2015\"     \"Total:Portugal:2016\"     #> [21] \"Total:Spain:Allyears\"    \"Total:Spain:2014\"        #> [23] \"Total:Spain:2015\"        \"Total:Spain:2016\"        #> [25] \"old:Europe:Allyears\"     \"old:Europe:2014\"         #> [27] \"old:Europe:2015\"         \"old:Europe:2016\"         #> [29] \"old:EU:Allyears\"         \"old:EU:2014\"             #> [31] \"old:EU:2015\"             \"old:EU:2016\"             #> [33] \"old:nonEU:Allyears\"      \"old:nonEU:2014\"          #> [35] \"old:nonEU:2015\"          \"old:nonEU:2016\"          #> [37] \"old:Iceland:Allyears\"    \"old:Iceland:2014\"        #> [39] \"old:Iceland:2015\"        \"old:Iceland:2016\"        #> [41] \"old:Portugal:Allyears\"   \"old:Portugal:2014\"       #> [43] \"old:Portugal:2015\"       \"old:Portugal:2016\"       #> [45] \"old:Spain:Allyears\"      \"old:Spain:2014\"          #> [47] \"old:Spain:2015\"          \"old:Spain:2016\"          #> [49] \"young:Europe:Allyears\"   \"young:Europe:2014\"       #> [51] \"young:Europe:2015\"       \"young:Europe:2016\"       #> [53] \"young:EU:Allyears\"       \"young:EU:2014\"           #> [55] \"young:EU:2015\"           \"young:EU:2016\"           #> [57] \"young:nonEU:Allyears\"    \"young:nonEU:2014\"        #> [59] \"young:nonEU:2015\"        \"young:nonEU:2016\"        #> [61] \"young:Iceland:Allyears\"  \"young:Iceland:2014\"      #> [63] \"young:Iceland:2015\"      \"young:Iceland:2016\"      #> [65] \"young:Portugal:Allyears\" \"young:Portugal:2014\"     #> [67] \"young:Portugal:2015\"     \"young:Portugal:2016\"     #> [69] \"young:Spain:Allyears\"    \"young:Spain:2014\"        #> [71] \"young:Spain:2015\"        \"young:Spain:2016\"        colnames(ModelMatrix(z, list(age = ageHier, c(\"geo\", \"year\", \"eu\")), total = c(\"t1\", \"t2\"))) #>  [1] \"Total:t2:t2\"         \"Total:t2:2014\"       \"Total:t2:2015\"       #>  [4] \"Total:t2:2016\"       \"Total:EU:t2\"         \"Total:EU:2014\"       #>  [7] \"Total:EU:2015\"       \"Total:EU:2016\"       \"Total:nonEU:t2\"      #> [10] \"Total:nonEU:2014\"    \"Total:nonEU:2015\"    \"Total:nonEU:2016\"    #> [13] \"Total:Iceland:t2\"    \"Total:Iceland:2014\"  \"Total:Iceland:2015\"  #> [16] \"Total:Iceland:2016\"  \"Total:Portugal:t2\"   \"Total:Portugal:2014\" #> [19] \"Total:Portugal:2015\" \"Total:Portugal:2016\" \"Total:Spain:t2\"      #> [22] \"Total:Spain:2014\"    \"Total:Spain:2015\"    \"Total:Spain:2016\"    #> [25] \"old:t2:t2\"           \"old:t2:2014\"         \"old:t2:2015\"         #> [28] \"old:t2:2016\"         \"old:EU:t2\"           \"old:EU:2014\"         #> [31] \"old:EU:2015\"         \"old:EU:2016\"         \"old:nonEU:t2\"        #> [34] \"old:nonEU:2014\"      \"old:nonEU:2015\"      \"old:nonEU:2016\"      #> [37] \"old:Iceland:t2\"      \"old:Iceland:2014\"    \"old:Iceland:2015\"    #> [40] \"old:Iceland:2016\"    \"old:Portugal:t2\"     \"old:Portugal:2014\"   #> [43] \"old:Portugal:2015\"   \"old:Portugal:2016\"   \"old:Spain:t2\"        #> [46] \"old:Spain:2014\"      \"old:Spain:2015\"      \"old:Spain:2016\"      #> [49] \"young:t2:t2\"         \"young:t2:2014\"       \"young:t2:2015\"       #> [52] \"young:t2:2016\"       \"young:EU:t2\"         \"young:EU:2014\"       #> [55] \"young:EU:2015\"       \"young:EU:2016\"       \"young:nonEU:t2\"      #> [58] \"young:nonEU:2014\"    \"young:nonEU:2015\"    \"young:nonEU:2016\"    #> [61] \"young:Iceland:t2\"    \"young:Iceland:2014\"  \"young:Iceland:2015\"  #> [64] \"young:Iceland:2016\"  \"young:Portugal:t2\"   \"young:Portugal:2014\" #> [67] \"young:Portugal:2015\" \"young:Portugal:2016\" \"young:Spain:t2\"      #> [70] \"young:Spain:2014\"    \"young:Spain:2015\"    \"young:Spain:2016\"     # Example using the select parameter as a data frame select <- data.frame(age = c(\"Total\", \"young\", \"old\"), geo = c(\"EU\", \"nonEU\", \"Spain\")) ModelMatrix(z, list(age = ageHier, geo = geoDimList),              select = select, crossTable = TRUE)$crossTable #>     age   geo #> 1 Total    EU #> 2 young nonEU #> 3   old Spain              # Examples using the select parameter as a list ModelMatrix(z, list(age = ageHier, geo = geoDimList), inputInOutput = FALSE,              select = list(geo = c(\"nonEU\", \"Portugal\")), crossTable = TRUE)$crossTable #>     age      geo #> 1 Total    nonEU #> 2 Total Portugal ModelMatrix(z, list(age = ageHier, geo = geoDimList),              select = list(geo = c(\"nonEU\", \"Portugal\"), age = c(\"Total\", \"young\")),              crossTable = TRUE)$crossTable #>     age      geo #> 1 Total    nonEU #> 2 Total Portugal #> 3 young    nonEU #> 4 young Portugal  # Using NAomit parameter avalable in Formula2ModelMatrix() s$age[1] <- NA ModelMatrix(s, formula = ~age + year) #> 4 x 5 sparse Matrix of class \"dgCMatrix\" #>      Total-Total old-Total young-Total Total-2014 Total-2015 #> [1,]           1         .           .          1          . #> [2,]           1         1           .          1          . #> [3,]           1         .           1          .          1 #> [4,]           1         1           .          .          1 ModelMatrix(s, formula = ~age + year, NAomit = FALSE) #> 4 x 6 sparse Matrix of class \"dgCMatrix\" #>      Total-Total old-Total young-Total NA-Total Total-2014 Total-2015 #> [1,]           1         .           .        1          1          . #> [2,]           1         1           .        .          1          . #> [3,]           1         .           1        .          .          1 #> [4,]           1         1           .        .          .          1"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Model_Matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Overparameterized model matrix — Model_Matrix","title":"Overparameterized model matrix — Model_Matrix","text":"factor levels included","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Model_Matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overparameterized model matrix — Model_Matrix","text":"","code":"Model_Matrix(   formula,   data = NULL,   mf = model.frame(formula, data = data),   allFactor = TRUE,   sparse = FALSE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Model_Matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overparameterized model matrix — Model_Matrix","text":"formula formula data data frame mf model frame (alternative input instead data) allFactor TRUE variables coerced factor sparse TRUE sparse matrix created sparse.model.matrix()","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Model_Matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overparameterized model matrix — Model_Matrix","text":"model matrix created via model.matrix() sparse.model.matrix()","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Model_Matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Overparameterized model matrix — Model_Matrix","text":"Example: z <- SSBtoolsData(\"sp_emp_withEU\") SSBtools:::Model_Matrix(~age*year + geo, z)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":null,"dir":"Reference","previous_headings":"","what":"Decoding of singletonMethod — NumSingleton","title":"Decoding of singletonMethod — NumSingleton","text":"GaussSuppression singletonMethod starting \"num\" decoded separate characters. Part theory interpreting 3rd, 4th, 5th characters discussed Langsrud (2024). utilize possibly duplicated contributor IDs, 2nd character must \"T\".","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decoding of singletonMethod — NumSingleton","text":"","code":"NumSingleton(singletonMethod)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decoding of singletonMethod — NumSingleton","text":"singletonMethod String decoded. necessary, input string extended F's.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decoding of singletonMethod — NumSingleton","text":"character vector NULL","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decoding of singletonMethod — NumSingleton","text":"F means feature turned . characters following meaning: singleton2Primary (1st character): T: singletons forced primary suppressed. t: Non-published singletons primary suppressed. integerUnique (2nd character): T: Integer values representing unique contributors utilized.  Error singleton supplied integer. t: T , instead error, feature turned  (F) singleton supplied integer. sum2 (3rd character): T: Virtual primary suppressed cells made, sum suppressed inner cells can divided two components. least one component singleton contributor. component may inner cell. H: T . addition, component can primary suppressed published cell. method may computationally demanding big data. elimination (4th character): t: singleton problem handled methodology implemented part Gaussian elimination algorithm. m: t . addition, message printed inform problematic singletons. Actual reveals calculated singleton2Primary = T (1st character) singleton2Primary = t yield result singleton2Primary = T. Problematic singletons can appear since algorithm perfect sense elimination rows may cause problems. problems can reason switch sum2. w: m , warning instead message. T, M W: t, m w . addition, gauss elimination routine allowed run parallel different sortings problem eliminated singleton rows reduced. f: F, means elimination feature turned . However, possible, message provide information actual reveals, similar m . combinations (5th character): T: sort extension singleton2Primary relevant integerUnique elimination used. unique singleton contributor, method seeks protect linear combinations singleton cells unique contributor. Instead construction new primary cells, protection achieved part elimination procedure. Technically implemented extending elimination method. guaranteed problems solved, reason turn singleton2Primary. Best performance achieved elimination T, M W. t:  T, without added singleton protection. means protected linear combinations calculated linearly non-suppressed cells. However, contributors may still able recalculate combinations using suppressed values.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Decoding of singletonMethod — NumSingleton","text":"Note update made SSBtools version 1.7.5, relates sentence Langsrud (2024): \"remaining non-zero rows columns corresponding primary cells must originate solely one contributor.\" Due speed memory considerations, algorithm first perform elimination check result. Instead, first verifies whether elimination permissible executing . approach allows thorough validation process compared performing elimination fixed row order. Specifically, means singleton procedure, denoted elimination (4th character), can take account different row orders. improvement introduced SSBtools version 1.7.5 publication Langsrud (2024). result, potential issues can now detected single elimination sequence (t 4th character), slightly reducing need double elimination (T 4th character). However, since row order influences subsequent elimination steps, double elimination remains important safeguard.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Decoding of singletonMethod — NumSingleton","text":"Langsrud, Ø. (2024): “Secondary Cell Suppression Gaussian Elimination: Algorithm Suitable Handling Issues Zeros Singletons”. Presented : Privacy statistical databases, Antibes, France. September 25-27, 2024. doi:10.1007/978-3-031-69651-0_6","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/NumSingleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decoding of singletonMethod — NumSingleton","text":"","code":"NumSingleton(\"numTFF\") #> singleton2Primary     integerUnique              sum2       elimination  #>               \"T\"               \"F\"               \"F\"               \"F\"  #>      combinations  #>               \"F\"  NumSingleton(\"numFtT\") #> singleton2Primary     integerUnique              sum2       elimination  #>               \"F\"               \"t\"               \"T\"               \"F\"  #>      combinations  #>               \"F\"  NumSingleton(\"numttH\") #> singleton2Primary     integerUnique              sum2       elimination  #>               \"t\"               \"t\"               \"H\"               \"F\"  #>      combinations  #>               \"F\"  NumSingleton(\"numTTFTT\") #> singleton2Primary     integerUnique              sum2       elimination  #>               \"T\"               \"T\"               \"F\"               \"T\"  #>      combinations  #>               \"T\""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Number.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding leading zeros — Number","title":"Adding leading zeros — Number","text":"Adding leading zeros","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding leading zeros — Number","text":"","code":"Number(n, width = 3)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding leading zeros — Number","text":"n numeric vector whole numbers width width","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding leading zeros — Number","text":"Character vector","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Number.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adding leading zeros — Number","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adding leading zeros — Number","text":"","code":"Number(1:3) #> [1] \"001\" \"002\" \"003\""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RbindAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining several data frames when the columns don't match — RbindAll","title":"Combining several data frames when the columns don't match — RbindAll","text":"Combining several data frames columns match","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RbindAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining several data frames when the columns don't match — RbindAll","text":"","code":"RbindAll(...)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RbindAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining several data frames when the columns don't match — RbindAll","text":"... Several data frames several input parameters list data frames","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RbindAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining several data frames when the columns don't match — RbindAll","text":"single data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RbindAll.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Combining several data frames when the columns don't match — RbindAll","text":"function extended version rbind..columns https://amywhiteheadresearch.wordpress.com/2013/05/13/combining-dataframes---columns-dont-match/","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RbindAll.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combining several data frames when the columns don't match — RbindAll","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RbindAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining several data frames when the columns don't match — RbindAll","text":"","code":"zA <- data.frame(idA = 1:10, idB = rep(10 * (1:5), 2), idC = rep(c(100, 200), 5),                   idC2 = c(100, rep(200, 9)), idC3 = rep(100, 10),                   idD = 99, x = round(rnorm(10), 3), xA = round(runif(10), 2)) zB <- data.frame(idB = 10 * (1:5), x = round(rnorm(5), 3), xB = round(runif(5), 2)) zC <- data.frame(idC = c(100, 200), x = round(rnorm(2), 3), xC = round(runif(2), 2)) zD <- data.frame(idD = 99, x = round(rnorm(1), 3), xD = round(runif(1), 2)) RbindAll(zA, zB, zC, zD) #>    idA idB idC idC2 idC3 idD      x   xA   xB   xC   xD #> 1    1  10 100  100  100  99  0.817 0.72   NA   NA   NA #> 2    2  20 200  200  100  99 -0.048 0.18   NA   NA   NA #> 3    3  30 100  200  100  99  1.340 0.90   NA   NA   NA #> 4    4  40 200  200  100  99  0.306 0.43   NA   NA   NA #> 5    5  50 100  200  100  99 -0.634 0.45   NA   NA   NA #> 6    6  10 200  200  100  99  0.279 0.56   NA   NA   NA #> 7    7  20 100  200  100  99  1.189 0.98   NA   NA   NA #> 8    8  30 200  200  100  99  0.775 0.55   NA   NA   NA #> 9    9  40 100  200  100  99  0.363 0.32   NA   NA   NA #> 10  10  50 200  200  100  99 -0.036 0.00   NA   NA   NA #> 11  NA  10  NA   NA   NA  NA -0.505   NA 0.33   NA   NA #> 12  NA  20  NA   NA   NA  NA  1.051   NA 0.66   NA   NA #> 13  NA  30  NA   NA   NA  NA -0.256   NA 0.77   NA   NA #> 14  NA  40  NA   NA   NA  NA  0.414   NA 0.51   NA   NA #> 15  NA  50  NA   NA   NA  NA -1.684   NA 0.82   NA   NA #> 16  NA  NA 100   NA   NA  NA  0.192   NA   NA 0.49   NA #> 17  NA  NA 200   NA   NA  NA -0.086   NA   NA 0.38   NA #> 18  NA  NA  NA   NA   NA  99  0.932   NA   NA   NA 0.86 RbindAll(list(zA, zB, zC, zD)) #>    idA idB idC idC2 idC3 idD      x   xA   xB   xC   xD #> 1    1  10 100  100  100  99  0.817 0.72   NA   NA   NA #> 2    2  20 200  200  100  99 -0.048 0.18   NA   NA   NA #> 3    3  30 100  200  100  99  1.340 0.90   NA   NA   NA #> 4    4  40 200  200  100  99  0.306 0.43   NA   NA   NA #> 5    5  50 100  200  100  99 -0.634 0.45   NA   NA   NA #> 6    6  10 200  200  100  99  0.279 0.56   NA   NA   NA #> 7    7  20 100  200  100  99  1.189 0.98   NA   NA   NA #> 8    8  30 200  200  100  99  0.775 0.55   NA   NA   NA #> 9    9  40 100  200  100  99  0.363 0.32   NA   NA   NA #> 10  10  50 200  200  100  99 -0.036 0.00   NA   NA   NA #> 11  NA  10  NA   NA   NA  NA -0.505   NA 0.33   NA   NA #> 12  NA  20  NA   NA   NA  NA  1.051   NA 0.66   NA   NA #> 13  NA  30  NA   NA   NA  NA -0.256   NA 0.77   NA   NA #> 14  NA  40  NA   NA   NA  NA  0.414   NA 0.51   NA   NA #> 15  NA  50  NA   NA   NA  NA -1.684   NA 0.82   NA   NA #> 16  NA  NA 100   NA   NA  NA  0.192   NA   NA 0.49   NA #> 17  NA  NA 200   NA   NA  NA -0.086   NA   NA 0.38   NA #> 18  NA  NA  NA   NA   NA  99  0.932   NA   NA   NA 0.86"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Reduce0exact.html","id":null,"dir":"Reference","previous_headings":"","what":"Reducing a non-negative regression problem — Reduce0exact","title":"Reducing a non-negative regression problem — Reduce0exact","text":"linear equation problem, z = t(x) %*% y y non-negative x design (dummy) matrix, reduced smaller problem identifying elements y can found exactly x z.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Reduce0exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reducing a non-negative regression problem — Reduce0exact","text":"","code":"Reduce0exact(   x,   z = NULL,   reduceByColSums = FALSE,   reduceByLeverage = FALSE,   leverageLimit = 0.999999,   digitsRoundWhole = 9,   y = NULL,   yStart = NULL,   printInc = FALSE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Reduce0exact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reducing a non-negative regression problem — Reduce0exact","text":"x matrix z single column matrix reduceByColSums See Details reduceByLeverage See Details leverageLimit Limit determine perfect fit digitsRoundWhole RoundWhole parameter fitted values (leverageLimit y input) y single column matrix. y input, z input can omitted estimating y (leverageLimit) avoided. yStart starting estimate function combined iterative proportional fitting. Zeros yStart used reduce problem. printInc Printing iteration information console TRUE","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Reduce0exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reducing a non-negative regression problem — Reduce0exact","text":"list five elements: x: reduced version input x z: Corresponding reduced z yKnown: Logical, specifying known values y y: version y known values correct others zero zSkipped: Logical, specifying omitted columns x","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Reduce0exact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reducing a non-negative regression problem — Reduce0exact","text":"Exact elements can identified three ways iterative manner: zeros z. always done. columns x singe nonzero value. Done reduceByColSums reduceByLeverage TRUE. exact linear regression fit (leverage one). Done reduceByLeverage TRUE. leverages computed hat(.matrix(x), intercept = FALSE), can time memory consuming. Furthermore, without y input, known values computed ginv.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Reduce0exact.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reducing a non-negative regression problem — Reduce0exact","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Reduce0exact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reducing a non-negative regression problem — Reduce0exact","text":"","code":"# Make a special data set d <- SSBtoolsData(\"sprt_emp\") d$ths_per <- round(d$ths_per) d <- rbind(d, d) d$year <- as.character(rep(2014:2019, each = 6)) to0 <- rep(TRUE, 36) to0[c(6, 14, 17, 18, 25, 27, 30, 34, 36)] <- FALSE d$ths_per[to0] <- 0  # Values as a single column matrix y <- Matrix::Matrix(d$ths_per, ncol = 1)  # A model matrix using a special year hierarchy x <- Hierarchies2ModelMatrix(d, hierarchies = list(geo = \"\", age = \"\", year =      c(\"y1418 = 2014+2015+2016+2017+2018\", \"y1519 = 2015+2016+2017+2018+2019\",        \"y151719 = 2015+2017+2019\", \"yTotal = 2014+2015+2016+2017+2018+2019\")),        inputInOutput = FALSE)  # Aggregates  z <- Matrix::t(x) %*% y sum(z == 0)  # 5 zeros #> [1] 5  # From zeros in z a <- Reduce0exact(x, z) sum(a$yKnown)   # 17 zeros in y is known #> [1] 17 dim(a$x)        # Reduced x, without known y and z with zeros  #> [1] 19 19 dim(a$z)        # Corresponding reduced z  #> [1] 19  1 sum(a$zSkipped) # 5 elements skipped  #> [1] 5 Matrix::t(a$y)          # Just zeros (known are 0 and unknown set to 0)  #> 1 x 36 sparse Matrix of class \"dgCMatrix\" #>                                                                              #> [1,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  # It seems that three additional y-values can be found directly from z sum(Matrix::colSums(a$x) == 1) #> [1] 3  # But it is the same element of y (row 18) a$x[18, Matrix::colSums(a$x) == 1] #> Spain:Y30-64:y151719   Spain:Y30-64:y1519  Spain:Y30-64:yTotal  #>                    1                    1                    1   # Make use of ones in colSums a2 <- Reduce0exact(x, z, reduceByColSums = TRUE) sum(a2$yKnown)          # 18 values in y is known #> [1] 18 dim(a2$x)               # Reduced x #> [1] 18 16 dim(a2$z)               # Corresponding reduced z #> [1] 16  1 a2$y[which(a2$yKnown)]  # The known values of y (unknown set to 0) #>  [1]   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0 122   0  # Six ones in leverage values  # Thus six extra elements in y can be found by linear estimation hat(as.matrix(a2$x), intercept = FALSE) #>  [1] 1.0 1.0 1.0 1.0 1.0 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 1.0  # Make use of ones in leverages (hat-values) a3 <- Reduce0exact(x, z, reduceByLeverage = TRUE) sum(a3$yKnown)          # 26 values in y is known (more than 6 extra) #> [1] 26 dim(a3$x)               # Reduced x #> [1] 10 15 dim(a3$z)               # Corresponding reduced z #> [1] 15  1 a3$y[which(a3$yKnown)]  # The known values of y (unknown set to 0) #>  [1]   0   0   0   0   0  20   0   0   0   0   0   0   0   0   0   0   0   0   0 #> [20]   0   0   0   0 122   0  26  # More than 6 extra is caused by iteration  # Extra checking of zeros in z after reduction by leverages  # Similar checking performed also after reduction by colSums"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RoundWhole.html","id":null,"dir":"Reference","previous_headings":"","what":"Round values that are close two whole numbers — RoundWhole","title":"Round values that are close two whole numbers — RoundWhole","text":"Round values close two whole numbers","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RoundWhole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round values that are close two whole numbers — RoundWhole","text":"","code":"RoundWhole(x, digits = 9, onlyZeros = FALSE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RoundWhole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round values that are close two whole numbers — RoundWhole","text":"x vector matrix digits parameter round onlyZeros round values close zero","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RoundWhole.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round values that are close two whole numbers — RoundWhole","text":"Modified x","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RoundWhole.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Round values that are close two whole numbers — RoundWhole","text":"digits NA, Inf NULL, input returned unmodified. one element digits onlyZeros, rounding performed column-wise.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RoundWhole.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Round values that are close two whole numbers — RoundWhole","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RoundWhole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round values that are close two whole numbers — RoundWhole","text":"","code":"x <- c(0.0002, 1.00003, 3.00014) RoundWhole(x)     # No values rounded #> [1] 0.00020 1.00003 3.00014 RoundWhole(x, 4)  # One value rounded #> [1] 0.00020 1.00000 3.00014 RoundWhole(x, 3)  # All values rounded #> [1] 0 1 3 RoundWhole(x, NA) # No values rounded (always) #> [1] 0.00020 1.00003 3.00014 RoundWhole(x, 3, TRUE)  # One value rounded #> [1] 0.00000 1.00003 3.00014 RoundWhole(cbind(x, x, x), digits = c(3, 4, NA)) #>      x       x       x #> [1,] 0 0.00020 0.00020 #> [2,] 1 1.00000 1.00003 #> [3,] 3 3.00014 3.00014 RoundWhole(cbind(x, x), digits = 3, onlyZeros = c(FALSE, TRUE)) #>      x       x #> [1,] 0 0.00000 #> [2,] 1 1.00003 #> [3,] 3 3.00014"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RowGroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Create numbering according to unique rows — RowGroups","title":"Create numbering according to unique rows — RowGroups","text":"Create numbering according unique rows","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RowGroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create numbering according to unique rows — RowGroups","text":"","code":"RowGroups(   x,   returnGroups = FALSE,   returnGroupsId = FALSE,   NAomit = FALSE,   pkg = \"base\" )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RowGroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create numbering according to unique rows — RowGroups","text":"x Data frame matrix returnGroups TRUE unique rows returned returnGroupsId TRUE Index unique rows returned NAomit TRUE, rows containing NAs omitted, corresponding index numbers set NA. pkg character string indicating package use. Must either \"base\" base R \"data.table\" data.table. Default \"base\".","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RowGroups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create numbering according to unique rows — RowGroups","text":"vector numbering , according arguments, list output.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RowGroups.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create numbering according to unique rows — RowGroups","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/RowGroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create numbering according to unique rows — RowGroups","text":"","code":"a <- data.frame(x = c(\"a\", \"b\"), y = c(\"A\", \"B\", \"A\"), z = rep(1:4, 3)) RowGroups(a) #>  [1] 1 7 2 6 3 5 2 8 1 5 4 6 RowGroups(a, TRUE) #> $idx #>  [1] 1 7 2 6 3 5 2 8 1 5 4 6 #>  #> $groups #>   x y z #> 1 a A 1 #> 2 a A 3 #> 3 a B 1 #> 4 a B 3 #> 5 b A 2 #> 6 b A 4 #> 7 b B 2 #> 8 b B 4 #>  RowGroups(a[, 1:2], TRUE, TRUE) #> $idx #>  [1] 1 4 1 3 2 3 1 4 1 3 2 3 #>  #> $groups #>   x y #> 1 a A #> 2 a B #> 3 b A #> 4 b B #>  #> $idg #> [1] 1 5 4 2 #>  RowGroups(a[, 1, drop = FALSE], TRUE) #> $idx #>  [1] 1 2 1 2 1 2 1 2 1 2 1 2 #>  #> $groups #>   x #> 1 a #> 2 b #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SSBtoolsData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function that returns a dataset — SSBtoolsData","title":"Function that returns a dataset — SSBtoolsData","text":"Function returns dataset","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SSBtoolsData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function that returns a dataset — SSBtoolsData","text":"","code":"SSBtoolsData(dataset)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SSBtoolsData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function that returns a dataset — SSBtoolsData","text":"dataset Name data set within SSBtools package","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SSBtoolsData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function that returns a dataset — SSBtoolsData","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SSBtoolsData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function that returns a dataset — SSBtoolsData","text":"FIFA2018ABCD: hierarchy table based countries within groups -D football championship, 2018 FIFA World Cup. sprt_emp: Employment sport thousand persons. Data Eurostat database. sprt_emp_geoHier:  Country hierarchy employment sport data. sprt_emp_ageHier:  Age hierarchy employment sport data. sprt_emp_withEU: data set sprt_emp extended EU variable. sp_emp_withEU: sprt_emp_withEU, coded differently. example1 Example data similar sp_emp_withEU. magnitude1: Example data magnitude tabulation. countries . my_km2: Fictitious grid data. mun_accidents: Fictitious traffic accident municipality data. sosialFiktiv, z1, z1w, z2, z2w, z3, z3w, z3wb: See sosialFiktiv. d4, d1, d1w, d2, d2w, d3, d3w, d3wb: English translation datasets . d2s, d2ws: d2 d2w modified smaller/easier data. power10to1, power10to2, \\(\\ldots\\): power10to\\(\\) hierarchical data \\(10^\\) rows \\(2*\\) columns. Tip: Try FindDimLists(SSBtoolsData(\"power10to3\"))","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SSBtoolsData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function that returns a dataset — SSBtoolsData","text":"Øyvind Langsrud Daniel Lupp","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SSBtoolsData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function that returns a dataset — SSBtoolsData","text":"","code":"SSBtoolsData(\"FIFA2018ABCD\") #>        mapsFrom      mapsTo sign level #> 1     Australia     Oceania    1     1 #> 2          Iran        Asia    1     1 #> 3  Saudi Arabia        Asia    1     1 #> 4         Egypt      Africa    1     1 #> 5       Morocco      Africa    1     1 #> 6       Nigeria      Africa    1     1 #> 7     Argentina     America    1     1 #> 8          Peru     America    1     1 #> 9       Uruguay     America    1     1 #> 10      Croatia      Europe    1     1 #> 11      Denmark      Europe    1     1 #> 12       France      Europe    1     1 #> 13      Iceland      Europe    1     1 #> 14     Portugal      Europe    1     1 #> 15       Russia      Europe    1     1 #> 16        Spain      Europe    1     1 #> 17      Iceland       nonEU    1     1 #> 18       Russia       nonEU    1     1 #> 19       Russia nonSchengen    1     1 #> 20      Croatia nonSchengen    1     1 #> 21       Europe          EU    1     2 #> 22        nonEU          EU   -1     2 #> 23       Europe    Schengen    1     2 #> 24  nonSchengen    Schengen   -1     2 SSBtoolsData(\"sprt_emp\") #>       age      geo year ths_per #> 1  Y15-29    Spain 2014    66.9 #> 2  Y15-29  Iceland 2014     1.8 #> 3  Y15-29 Portugal 2014    11.6 #> 4  Y30-64    Spain 2014   120.3 #> 5  Y30-64  Iceland 2014     1.5 #> 6  Y30-64 Portugal 2014    20.2 #> 7  Y15-29    Spain 2015    63.4 #> 8  Y15-29  Iceland 2015     1.9 #> 9  Y15-29 Portugal 2015    14.2 #> 10 Y30-64    Spain 2015   119.6 #> 11 Y30-64  Iceland 2015     1.6 #> 12 Y30-64 Portugal 2015    24.3 #> 13 Y15-29    Spain 2016    69.1 #> 14 Y15-29  Iceland 2016     1.9 #> 15 Y15-29 Portugal 2016    12.7 #> 16 Y30-64    Spain 2016   122.1 #> 17 Y30-64  Iceland 2016     1.9 #> 18 Y30-64 Portugal 2016    25.8 SSBtoolsData(\"sprt_emp_geoHier\") #>   mapsFrom mapsTo sign level #> 1  Iceland Europe    1     1 #> 2 Portugal Europe    1     1 #> 3    Spain Europe    1     1 #> 4  Iceland  nonEU    1     1 #> 5   Europe     EU    1     2 #> 6    nonEU     EU   -1     2 SSBtoolsData(\"sprt_emp_ageHier\") #>   mapsFrom mapsTo sign level #> 1   Y15-29 Y15-64    1     1 #> 2   Y30-64 Y15-64    1     1 SSBtoolsData(\"sprt_emp_withEU\") #>       age      geo year ths_per    eu #> 1  Y15-29    Spain 2014    66.9    EU #> 2  Y15-29  Iceland 2014     1.8 nonEU #> 3  Y15-29 Portugal 2014    11.6    EU #> 4  Y30-64    Spain 2014   120.3    EU #> 5  Y30-64  Iceland 2014     1.5 nonEU #> 6  Y30-64 Portugal 2014    20.2    EU #> 7  Y15-29    Spain 2015    63.4    EU #> 8  Y15-29  Iceland 2015     1.9 nonEU #> 9  Y15-29 Portugal 2015    14.2    EU #> 10 Y30-64    Spain 2015   119.6    EU #> 11 Y30-64  Iceland 2015     1.6 nonEU #> 12 Y30-64 Portugal 2015    24.3    EU #> 13 Y15-29    Spain 2016    69.1    EU #> 14 Y15-29  Iceland 2016     1.9 nonEU #> 15 Y15-29 Portugal 2016    12.7    EU #> 16 Y30-64    Spain 2016   122.1    EU #> 17 Y30-64  Iceland 2016     1.9 nonEU #> 18 Y30-64 Portugal 2016    25.8    EU SSBtoolsData(\"d1w\") #>   region other wages assistance pensions #> 1      A    11    11         55       36 #> 2      B     7     1         29       18 #> 3      C     5     8         35       25 #> 4      D    13     2         17       13 #> 5      E     9    14         63       52 #> 6      F    12     9         24       22 #> 7      G     6     4         22        8 #> 8      H     9     3         38       15"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SortRows.html","id":null,"dir":"Reference","previous_headings":"","what":"Sorting rows of a matrix or data frame — SortRows","title":"Sorting rows of a matrix or data frame — SortRows","text":"Sorting rows matrix data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SortRows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sorting rows of a matrix or data frame — SortRows","text":"","code":"SortRows(m, cols = 1:dim(m)[2], index.return = FALSE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SortRows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sorting rows of a matrix or data frame — SortRows","text":"m matrix data frame cols Indexes columns, desired order, used sorting. index.return logical indicating ordering index vector returned instead sorted input.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SortRows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sorting rows of a matrix or data frame — SortRows","text":"sorted m row index vector","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SortRows.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sorting rows of a matrix or data frame — SortRows","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/SortRows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sorting rows of a matrix or data frame — SortRows","text":"","code":"d <- SSBtoolsData(\"d2w\") SortRows(d[4:7]) #>    other wages assistance pensions #> 9      3     0          9        2 #> 11     4     2         18       11 #> 3      5     8         35       25 #> 7      6     4         22        8 #> 2      7     1         29       18 #> 10     9     0         32       20 #> 8      9     3         38       15 #> 5      9    14         63       52 #> 1     11    11         55       36 #> 6     12     9         24       22 #> 4     13     2         17       13 SortRows(d, cols = 4:7) #>    region county k_group other wages assistance pensions #> 9       I      1     400     3     0          9        2 #> 11      K     10     400     4     2         18       11 #> 3       C      5     300     5     8         35       25 #> 7       G      8     300     6     4         22        8 #> 2       B      4     300     7     1         29       18 #> 10      J     10     400     9     0         32       20 #> 8       H      8     300     9     3         38       15 #> 5       E      6     300     9    14         63       52 #> 1       A      1     300    11    11         55       36 #> 6       F      6     300    12     9         24       22 #> 4       D      5     300    13     2         17       13 SortRows(d, cols = c(2, 4)) #>    region county k_group other wages assistance pensions #> 9       I      1     400     3     0          9        2 #> 1       A      1     300    11    11         55       36 #> 2       B      4     300     7     1         29       18 #> 3       C      5     300     5     8         35       25 #> 4       D      5     300    13     2         17       13 #> 5       E      6     300     9    14         63       52 #> 6       F      6     300    12     9         24       22 #> 7       G      8     300     6     4         22        8 #> 8       H      8     300     9     3         38       15 #> 11      K     10     400     4     2         18       11 #> 10      J     10     400     9     0         32       20  SortRows(matrix(sample(1:3,15,TRUE),5,3)) #>      [,1] [,2] [,3] #> [1,]    1    1    1 #> [2,]    1    1    1 #> [3,]    1    2    3 #> [4,]    3    1    2 #> [5,]    3    2    2"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack columns from a data frame and include variables. — Stack","title":"Stack columns from a data frame and include variables. — Stack","text":"Stack columns data frame include variables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack columns from a data frame and include variables. — Stack","text":"","code":"Stack(   data,   stackVar = 1:NCOL(data),   blockVar = integer(0),   rowData = data.frame(stackVar)[, integer(0), drop = FALSE],   valueName = \"values\",   indName = \"ind\" )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack columns from a data frame and include variables. — Stack","text":"data data frame stackVar Indices variables stacked blockVar Indices variables replicated rowData separate data frame NROW(rowData)=length(stackVar) row may contain multiple information stackVar variable. output data frame contain extended variant rowData. valueName Name stacked/concatenated output variable indName Name output variable information vector x observation originated. indName NULL variable included output.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack columns from a data frame and include variables. — Stack","text":"data frame variable ordering corresponds : blockVar, rowData, valueName, indName","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Stack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stack columns from a data frame and include variables. — Stack","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack columns from a data frame and include variables. — Stack","text":"","code":"z <- data.frame(n=c(10,20,30), ssb=c('S','S','B'),  Ayes=1:3,Ano=4:6,Byes=7:9,Bno=10:12)  zRow <- data.frame(letter=c('A','A','B','B'),answer=c('yes','no','yes','no') )    x <- Stack(z,3:6,1:2,zRow)    Unstack(x,6,3:4,numeric(0),1:2) #> $data #>    n ssb A_yes A_no B_yes B_no #> 1 10   S     1    4     7   10 #> 2 20   S     2    5     8   11 #> 3 30   B     3    6     9   12 #>  #> $rowData #>       letter answer #> A_yes      A    yes #> A_no       A     no #> B_yes      B    yes #> B_no       B     no #>   Unstack(x,6,5,numeric(0),1:2) #> $data #>    n ssb Ayes Ano Byes Bno #> 1 10   S    1   4    7  10 #> 2 20   S    2   5    8  11 #> 3 30   B    3   6    9  12 #>  #> $rowData #>       ind #> Ayes Ayes #> Ano   Ano #> Byes Byes #> Bno   Bno #>   Unstack(x,6,3:4,5,1:2) #> $data #>    n ssb A_yes A_no B_yes B_no #> 1 10   S     1    4     7   10 #> 2 20   S     2    5     8   11 #> 3 30   B     3    6     9   12 #>  #> $rowData #>       letter answer  ind #> A_yes      A    yes Ayes #> A_no       A     no  Ano #> B_yes      B    yes Byes #> B_no       B     no  Bno #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/UniqueSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence within unique values — UniqueSeq","title":"Sequence within unique values — UniqueSeq","text":"Sequence within unique values","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/UniqueSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence within unique values — UniqueSeq","text":"","code":"UniqueSeq(x, sortdata = matrix(1L, length(x), 0))"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/UniqueSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence within unique values — UniqueSeq","text":"x vector sortdata matrix vector determine sequence order","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/UniqueSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence within unique values — UniqueSeq","text":"integer vector","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/UniqueSeq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence within unique values — UniqueSeq","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/UniqueSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence within unique values — UniqueSeq","text":"","code":"# 1:4 within A and 1:2 within B UniqueSeq(c(\"A\", \"A\", \"B\", \"B\", \"A\", \"A\")) #> [1] 1 2 1 2 3 4  # Ordered differently UniqueSeq(c(\"A\", \"A\", \"B\", \"B\", \"A\", \"A\"), c(4, 5, 20, 10, 3, 0)) #> [1] 3 4 2 1 2 1"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Unstack.html","id":null,"dir":"Reference","previous_headings":"","what":"Unstack a column from a data frame and include additional variables. — Unstack","title":"Unstack a column from a data frame and include additional variables. — Unstack","text":"Unstack column data frame include additional variables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Unstack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unstack a column from a data frame and include additional variables. — Unstack","text":"","code":"Unstack(   data,   mainVar = 1,   stackVar = (1:NCOL(data))[-mainVar],   extraVar = integer(0),   blockVar = integer(0),   sep = \"_\",   returnRowData = TRUE,   sorted = FALSE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Unstack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unstack a column from a data frame and include additional variables. — Unstack","text":"data data frame mainVar Index variable unstacked stackVar Index variables defining unstack grouping extraVar Indices within-replicated variables added rowData output blockVar Indices -replicated variables added data output sep character string separate creating variable names returnRowData FALSE output list, data sorted TRUE created variables sorted order. Otherwise input order used.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Unstack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unstack a column from a data frame and include additional variables. — Unstack","text":"returnRowData=TRUE output list two elements. data Unstacked data rowData separate data frame one row unstack grouping composed stackVar variables","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/Unstack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unstack a column from a data frame and include additional variables. — Unstack","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbing.html","id":null,"dir":"Reference","previous_headings":"","what":"Row selection by wildcard/globbing — WildcardGlobbing","title":"Row selection by wildcard/globbing — WildcardGlobbing","text":"selected rows match combined requirements variables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row selection by wildcard/globbing — WildcardGlobbing","text":"","code":"WildcardGlobbing(x, wg, sign = TRUE, invert = \"!\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row selection by wildcard/globbing — WildcardGlobbing","text":"x data.frame character data wg data.frame wildcard/globbing sign FALSE, result inverted. invert Character invert single selection.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row selection by wildcard/globbing — WildcardGlobbing","text":"Logical vector defining subset rows.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Row selection by wildcard/globbing — WildcardGlobbing","text":"function used HierarchicalWildcardGlobbing WildcardGlobbingVector make use grepl glob2rx.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Row selection by wildcard/globbing — WildcardGlobbing","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row selection by wildcard/globbing — WildcardGlobbing","text":"","code":"# Create data input data(precip) data(mtcars) x <- data.frame(car = rownames(mtcars)[rep(1:NROW(mtcars), each = 35)], city = names(precip),                  stringsAsFactors = FALSE)  # Create globbing/wildcards input wg <- data.frame(rbind(c(\"Merc*\", \"C*\"), c(\"F*\", \"??????\"), c(\"!?????????*\", \"!???????*\")),                   stringsAsFactors = FALSE) names(wg) <- names(x)  # Select the following combinations: # - Cars starting with Merc and cities starting with C # - Cars starting with F and six-letter cities  # - Cars with less than nine letters and cities with less than seven letters x[WildcardGlobbing(x, wg), ] #>                 car       city #> 176         Valiant       Reno #> 180         Valiant     Albany #> 198         Valiant     Dallas #> 247       Merc 240D    Concord #> 253       Merc 240D  Charlotte #> 256       Merc 240D Cincinnati #> 257       Merc 240D  Cleveland #> 258       Merc 240D   Columbus #> 264       Merc 240D   Columbia #> 277       Merc 240D Charleston #> 279       Merc 240D   Cheyenne #> 281        Merc 230     Mobile #> 282        Merc 230     Juneau #> 288        Merc 230     Denver #> 293        Merc 230      Miami #> 296        Merc 230      Boise #> 297        Merc 230    Chicago #> 298        Merc 230     Peoria #> 306        Merc 230     Boston #> 309        Merc 230     Duluth #> 315        Merc 230      Omaha #> 316        Merc 280       Reno #> 317        Merc 280    Concord #> 320        Merc 280     Albany #> 323        Merc 280  Charlotte #> 326        Merc 280 Cincinnati #> 327        Merc 280  Cleveland #> 328        Merc 280   Columbus #> 334        Merc 280   Columbia #> 338        Merc 280     Dallas #> 347        Merc 280 Charleston #> 349        Merc 280   Cheyenne #> 367       Merc 280C    Chicago #> 387      Merc 450SE    Concord #> 393      Merc 450SE  Charlotte #> 396      Merc 450SE Cincinnati #> 397      Merc 450SE  Cleveland #> 398      Merc 450SE   Columbus #> 404      Merc 450SE   Columbia #> 417      Merc 450SE Charleston #> 419      Merc 450SE   Cheyenne #> 437      Merc 450SL    Chicago #> 457     Merc 450SLC    Concord #> 463     Merc 450SLC  Charlotte #> 466     Merc 450SLC Cincinnati #> 467     Merc 450SLC  Cleveland #> 468     Merc 450SLC   Columbus #> 474     Merc 450SLC   Columbia #> 487     Merc 450SLC Charleston #> 489     Merc 450SLC   Cheyenne #> 596        Fiat 128       Reno #> 600        Fiat 128     Albany #> 618        Fiat 128     Dallas #> 880       Fiat X1-9     Albany #> 898       Fiat X1-9     Dallas #> 981  Ford Pantera L     Mobile #> 982  Ford Pantera L     Juneau #> 988  Ford Pantera L     Denver #> 998  Ford Pantera L     Peoria #> 1006 Ford Pantera L     Boston #> 1009 Ford Pantera L     Duluth #> 1020   Ferrari Dino     Albany #> 1038   Ferrari Dino     Dallas"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbingVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Selection of elements by wildcard/globbing — WildcardGlobbingVector","title":"Selection of elements by wildcard/globbing — WildcardGlobbingVector","text":"Selection elements wildcard/globbing","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbingVector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Selection of elements by wildcard/globbing — WildcardGlobbingVector","text":"","code":"WildcardGlobbingVector(x, wg, negSign = \"-\", invert = \"!\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbingVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Selection of elements by wildcard/globbing — WildcardGlobbingVector","text":"x Character vector wg Character vector wildcard/globbing negSign Character representing selection removed invert Character invert single selection.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbingVector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Selection of elements by wildcard/globbing — WildcardGlobbingVector","text":"vector selected elements x","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbingVector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Selection of elements by wildcard/globbing — WildcardGlobbingVector","text":"Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/WildcardGlobbingVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Selection of elements by wildcard/globbing — WildcardGlobbingVector","text":"","code":"data(precip) x <- names(precip)  # Select the cities starting with B, C and Sa. WildcardGlobbingVector(x, c(\"B*\", \"C*\", \"Sa*\")) #>  [1] \"Sacramento\"       \"San Francisco\"    \"Boise\"            \"Chicago\"          #>  [5] \"Baltimore\"        \"Boston\"           \"Sault Ste. Marie\" \"Concord\"          #>  [9] \"Buffalo\"          \"Charlotte\"        \"Bismark\"          \"Cincinnati\"       #> [13] \"Cleveland\"        \"Columbus\"         \"Columbia\"         \"Salt Lake City\"   #> [17] \"Burlington\"       \"Charleston\"       \"Cheyenne\"         \"San Juan\"          # Remove from the selection cities with o and t in position 2 and 4, respectively. WildcardGlobbingVector(x, c(\"B*\", \"C*\", \"Sa*\", \"-?o*\", \"-???t*\")) #>  [1] \"Sacramento\"       \"San Francisco\"    \"Chicago\"          \"Sault Ste. Marie\" #>  [5] \"Buffalo\"          \"Charlotte\"        \"Bismark\"          \"Cincinnati\"       #>  [9] \"Cleveland\"        \"Burlington\"       \"Charleston\"       \"Cheyenne\"         #> [13] \"San Juan\"          # Add to the selection cities not having six or more letters. WildcardGlobbingVector(x, c(\"B*\", \"C*\", \"Sa*\", \"-?o*\", \"-???t*\", \"!??????*\")) #>  [1] \"Sacramento\"       \"San Francisco\"    \"Miami\"            \"Chicago\"          #>  [5] \"Sault Ste. Marie\" \"Omaha\"            \"Reno\"             \"Buffalo\"          #>  [9] \"Charlotte\"        \"Bismark\"          \"Cincinnati\"       \"Cleveland\"        #> [13] \"Burlington\"       \"Charleston\"       \"Cheyenne\"         \"San Juan\""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_by_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate by base R or data.table — aggregate_by_pkg","title":"Aggregate by base R or data.table — aggregate_by_pkg","text":"function aggregates data specified grouping variables, using either base R data.table.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_by_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate by base R or data.table — aggregate_by_pkg","text":"","code":"aggregate_by_pkg(   data,   by,   var,   pkg = \"base\",   include_na = FALSE,   fun = sum,   base_order = TRUE,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_by_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate by base R or data.table — aggregate_by_pkg","text":"data data frame character vector specifying column names group . var character vector specifying column names variables aggregated. pkg character string indicating package use aggregation. Must either \"base\" base R \"data.table\" data.table. Default \"base\". include_na logical value indicating whether NA values grouping variables included aggregation. Default FALSE. fun function applied aggregation. Default sum. base_order logical value indicating whether attempt return results order base R using data.table. Note function strives maintain order, guaranteed due potential variations sorting behavior across different systems. Default TRUE. ... arguments passed aggregate pkg \"base\"","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_by_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate by base R or data.table — aggregate_by_pkg","text":"data.frame containing aggregated results.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_by_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate by base R or data.table — aggregate_by_pkg","text":"","code":"d <- SSBtoolsData(\"d2\")[1:20, ] d[[2]] <- as.numeric(d[[2]]) d$y <- as.numeric(1:20) d$y[2] <- NA d$county[8:9] <- NA d$main_income[11:12] <- NA d$k_group[19:20] <- NA by <- c(\"main_income\", \"county\", \"k_group\")  a1 <- aggregate_by_pkg(d, by = by, var = c(\"y\", \"freq\")) a2 <- aggregate_by_pkg(d, by = by, var = c(\"y\", \"freq\"),                         include_na = TRUE) a3 <- aggregate_by_pkg(d, by = by, var = c(\"y\", \"freq\"),                         include_na = TRUE, fun = function(x) list(x))   if (requireNamespace(\"data.table\", quietly = TRUE)) {                             b1 <- aggregate_by_pkg(d, by = by, var = c(\"y\", \"freq\"), pkg = \"data.table\")   b2 <- aggregate_by_pkg(d, by = by, var = c(\"y\", \"freq\"), pkg = \"data.table\",                           include_na = TRUE)   b3 <- aggregate_by_pkg(d, by = by, var = c(\"y\", \"freq\"), pkg = \"data.table\",                           include_na = TRUE, fun = function(x) list(x))                                                   print(identical(a1, b1))   # TRUE when base_order succeeds   print(identical(a2, b2))   print(identical(a3, b3))    }  else {    print(\"The 'data.table' package is not installed.\") } #> [1] TRUE #> [1] TRUE #> [1] TRUE"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_multiple_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to aggregate — aggregate_multiple_fun","title":"Wrapper to aggregate — aggregate_multiple_fun","text":"Wrapper aggregate allows multiple functions functions several variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_multiple_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to aggregate — aggregate_multiple_fun","text":"","code":"aggregate_multiple_fun(   data,   by,   vars,   fun = NULL,   ind = NULL,   ...,   name_sep = \"_\",   seve_sep = \":\",   multi_sep = \",\",   forward_dots = FALSE,   dots2dots = FALSE,   do_unmatrix = TRUE,   do_unlist = TRUE,   inc_progress = FALSE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_multiple_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to aggregate — aggregate_multiple_fun","text":"data data frame containing data aggregated data frame defining grouping vars named vector list variable names data. elements named names fun. pairs variable names function names thus define result variables generated. Parameter vars converted internal standard function fix_vars_amf. Thus, function names also output variable names can coded different ways. Multiple output variable names can coded using multi_sep. See examples examples fix_vars_amf. Indices instead variable names allowed. Omission () names possible since names can omitted one function (see fun ). special possible feature combination single unnamed variable functions named. case, functions run output variable names identical function names. fun named list functions. names used suffixes output variable names. Name can omitted one function. vector function strings also possible. unnamed, function names used directly. See examples fix_fun_amf, function used convert fun. Without specifying fun, functions, strings, taken function names coded vars. ind non-NULL, data frame indices. NULL, variable generated internally data.frame(ind = seq_len(nrow(data))). parameter useful advanced use involving model/dummy matrices. special use (dummy = FALSE dummy_aggregate) ind can also two-column data frame. ... arguments passed aggregate , depending forward_dots/dots2dots, forwarded functions fun (see details). name_sep character string used output variable names generated. seve_sep character string used output variable names generated functions several variables. multi_sep character string used multiple output variable names sent input. forward_dots Logical vector (possibly recycled) element fun determines whether ... forwarded (see details). dots2dots Logical vector (possibly recycled) specifying behavior forward_dots = TRUE (see details). do_unmatrix default (TRUE), implementation uses unmatrix returning output. special use can omitted (FALSE). do_unlist default (TRUE), implementation uses unlist combine output multiple functions. special use can omitted (FALSE). inc_progress logigal, NULL (FALSE)  progress indicator function taking two parameters (n). TRUE means inc_default. Note feature implemented hacky manner internal/hidden variables grabbed aggregate.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_multiple_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper to aggregate — aggregate_multiple_fun","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_multiple_fun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper to aggregate — aggregate_multiple_fun","text":"One intention aggregate_multiple_fun true generalization aggregate. However, many functions involved, passing extra parameters can easily lead errors. Therefore forward_dots dots2dots set FALSE default. forward_dots = TRUE dots2dots = FALSE, parameters forwarded, parameters explicitly defined specific fun function. sum function, means possible na.rm parameter forwarded others. forward_dots = TRUE dots2dots = TRUE, parameters also forwarded fun functions ... included. sum function, means extra parameters , probably erroneously, included summation (see examples). function work dummy_aggregate, data subject unlist fun functions called. apply special case ind two-column data frame. , case list data, fun functions handle . limitation default output, do_unlist = TRUE, variables output forced class. caused unlist function run output. means, example, variables become numeric integer numeric.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/aggregate_multiple_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to aggregate — aggregate_multiple_fun","text":"","code":"d2 <- SSBtoolsData(\"d2\") set.seed(12) d2$y <- round(rnorm(nrow(d2)), 2) d <- d2[sample.int(nrow(d2), size = 20), ] aggregate_multiple_fun(    data = d,     by = d[c(\"k_group\", \"main_income\")],     vars = c(\"freq\", \"y\", median = \"freq\", median = \"y\", e1 = \"freq\"),    fun = c(sum, median = median, e1 = function(x) x[1])   ) #>   k_group main_income freq     y freq_median y_median freq_e1 #> 1     300  assistance   84  0.64        24.0    0.150      38 #> 2     400  assistance   32  2.07        32.0    2.070      32 #> 3     300       other   27 -1.70         6.5   -0.640       6 #> 4     400       other   13 -0.35         6.5   -0.175       9 #> 5     300    pensions   39 -1.10        13.0   -0.370       8 #> 6     400    pensions   20  0.58        20.0    0.580      20 #> 7     300       wages   35 -2.13         9.5   -0.425       2 #> 8     400       wages    2  1.72         1.0    0.860       2  # With functions as named strings  aggregate_multiple_fun(    data = d,     by = d[c(\"k_group\", \"main_income\")],     vars = c(sum = \"y\", med = \"freq\", med = \"y\"),    fun = c(sum = \"sum\", med = \"median\") ) #>   k_group main_income y_sum freq_med  y_med #> 1     300  assistance  0.64     24.0  0.150 #> 2     400  assistance  2.07     32.0  2.070 #> 3     300       other -1.70      6.5 -0.640 #> 4     400       other -0.35      6.5 -0.175 #> 5     300    pensions -1.10     13.0 -0.370 #> 6     400    pensions  0.58     20.0  0.580 #> 7     300       wages -2.13      9.5 -0.425 #> 8     400       wages  1.72      1.0  0.860  # Without specifying functions  # - equivalent to `fun = c(\"sum\", \"median\")`  aggregate_multiple_fun(    data = d,     by = d[c(\"k_group\", \"main_income\")],     vars = c(sum = \"y\", median = \"freq\", median = \"y\") ) #>   k_group main_income y_sum freq_median y_median #> 1     300  assistance  0.64        24.0    0.150 #> 2     400  assistance  2.07        32.0    2.070 #> 3     300       other -1.70         6.5   -0.640 #> 4     400       other -0.35         6.5   -0.175 #> 5     300    pensions -1.10        13.0   -0.370 #> 6     400    pensions  0.58        20.0    0.580 #> 7     300       wages -2.13         9.5   -0.425 #> 8     400       wages  1.72         1.0    0.860  # The single unnamed variable feature. Also functions as strings.  aggregate_multiple_fun(    data = d,     by = d[c(\"k_group\", \"main_income\")],     vars = \"y\",    fun = c(\"sum\", \"median\", \"min\", \"max\") )  #>   k_group main_income   sum median   min  max #> 1     300  assistance  0.64  0.150  0.13 0.36 #> 2     400  assistance  2.07  2.070  2.07 2.07 #> 3     300       other -1.70 -0.640 -2.00 1.58 #> 4     400       other -0.35 -0.175 -0.78 0.43 #> 5     300    pensions -1.10 -0.370 -1.00 0.27 #> 6     400    pensions  0.58  0.580  0.58 0.58 #> 7     300       wages -2.13 -0.425 -1.29 0.01 #> 8     400       wages  1.72  0.860 -0.29 2.01  # with multiple outputs (function my_range) # and with function of two variables (weighted.mean(y, freq)) my_range <- function(x) c(min = min(x), max = max(x)) aggregate_multiple_fun(    data = d,     by = d[c(\"k_group\", \"main_income\")],     vars = list(\"freq\", \"y\", ra = \"freq\", wmean  = c(\"y\", \"freq\")),    fun = c(sum, ra = my_range, wmean = weighted.mean) ) #>   k_group main_income freq     y freq_ra.min freq_ra.max y:freq_wmean #> 1     300  assistance   84  0.64          22          38   0.23928571 #> 2     400  assistance   32  2.07          32          32   2.07000000 #> 3     300       other   27 -1.70           5           9  -0.50592593 #> 4     400       other   13 -0.35           4           9   0.05769231 #> 5     300    pensions   39 -1.10           8          18  -0.28589744 #> 6     400    pensions   20  0.58          20          20   0.58000000 #> 7     300       wages   35 -2.13           2          14  -0.69171429 #> 8     400       wages    2  1.72           0           2   2.01000000  # with specified output variable names my_range <- function(x) c(min = min(x), max = max(x)) aggregate_multiple_fun(    data = d,     by = d[c(\"k_group\", \"main_income\")],     vars = list(\"freq\", \"y\",                 `freqmin,freqmax` = list(ra = \"freq\"),                  yWmean  = list(wmean  = c(\"y\", \"freq\"))),    fun = c(sum, ra = my_range, wmean = weighted.mean) ) #>   k_group main_income freq     y freqmin freqmax      yWmean #> 1     300  assistance   84  0.64      22      38  0.23928571 #> 2     400  assistance   32  2.07      32      32  2.07000000 #> 3     300       other   27 -1.70       5       9 -0.50592593 #> 4     400       other   13 -0.35       4       9  0.05769231 #> 5     300    pensions   39 -1.10       8      18 -0.28589744 #> 6     400    pensions   20  0.58      20      20  0.58000000 #> 7     300       wages   35 -2.13       2      14 -0.69171429 #> 8     400       wages    2  1.72       0       2  2.01000000   # To illustrate forward_dots and dots2dots q <- d[1, ] q$w <- 100 * rnorm(1) for (dots2dots in c(FALSE, TRUE)) for (forward_dots in c(FALSE, TRUE)) {   cat(\"\\n=======================================\\n\")   cat(\"forward_dots =\", forward_dots, \", dots2dots =\", dots2dots)   out <- aggregate_multiple_fun(     data = q, by = q[\"k_group\"],      vars = c(sum = \"freq\", round = \"w\"), fun = c(\"sum\", \"round\"),       digits = 3, forward_dots = forward_dots, dots2dots = dots2dots)   cat(\"\\n\")   print(out) } #>  #> ======================================= #> forward_dots = FALSE , dots2dots = FALSE #>   k_group freq_sum w_round #> 1     300        2    -138 #>  #> ======================================= #> forward_dots = TRUE , dots2dots = FALSE #>   k_group freq_sum  w_round #> 1     300        2 -138.293 #>  #> ======================================= #> forward_dots = FALSE , dots2dots = TRUE #>   k_group freq_sum w_round #> 1     300        2    -138 #>  #> ======================================= #> forward_dots = TRUE , dots2dots = TRUE #>   k_group freq_sum  w_round #> 1     300        5 -138.293 # In last case digits forwarded to sum (as ...)  # and wrongly included in the summation"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/any_duplicated_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast alternative to anyDuplicated() — any_duplicated_rows","title":"Fast alternative to anyDuplicated() — any_duplicated_rows","text":"Implemented similarly RowGroups().","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/any_duplicated_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast alternative to anyDuplicated() — any_duplicated_rows","text":"","code":"any_duplicated_rows(x, cols = names(x))"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/any_duplicated_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast alternative to anyDuplicated() — any_duplicated_rows","text":"x data frame, tibble, data.table. cols Columns check duplicates.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/any_duplicated_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fast alternative to anyDuplicated() — any_duplicated_rows","text":"Index first duplicate row, ; otherwise 0.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/any_duplicated_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fast alternative to anyDuplicated() — any_duplicated_rows","text":"data.table input data.table package available, anyDuplicated.data.table() used.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/any_duplicated_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast alternative to anyDuplicated() — any_duplicated_rows","text":"","code":"z <- SSBtoolsData(\"power10to2\") head(z, 12) #>      a    A  b    B #> 1   a1 A100 b1 B100 #> 2   a2 A100 b1 B100 #> 3   a3 A200 b1 B100 #> 4   a4 A200 b1 B100 #> 5   a5 A200 b1 B100 #> 6   a6 A300 b1 B100 #> 7   a7 A300 b1 B100 #> 8   a8 A300 b1 B100 #> 9   a9 A300 b1 B100 #> 10 a10 A300 b1 B100 #> 11  a1 A100 b2 B100 #> 12  a2 A100 b2 B100 tail(z) #>       a    A   b    B #> 95   a5 A200 b10 B300 #> 96   a6 A300 b10 B300 #> 97   a7 A300 b10 B300 #> 98   a8 A300 b10 B300 #> 99   a9 A300 b10 B300 #> 100 a10 A300 b10 B300  any_duplicated_rows(z, c(\"A\", \"B\")) #> [1] 2 any_duplicated_rows(z, c(\"a\", \"A\", \"B\")) #> [1] 11 any_duplicated_rows(z, c(\"a\", \"A\", \"b\")) #> [1] 0"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/combine_formulas.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine formulas — combine_formulas","title":"Combine formulas — combine_formulas","text":"Combining formulas + another operator. particularly useful linking tables case table building formulas.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/combine_formulas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine formulas — combine_formulas","text":"","code":"combine_formulas(lof, operator = \"+\", simplify = FALSE, env = parent.frame())"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/combine_formulas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine formulas — combine_formulas","text":"lof list vector formulas linked operator \"+\" (default), \"*\", \":\" another operator simplify logical value, default FALSE. Determines whether formula expanded simplified output . env environment output formula","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/combine_formulas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine formulas — combine_formulas","text":"model formula","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/combine_formulas.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine formulas — combine_formulas","text":"Daniel Lupp Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/combine_formulas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine formulas — combine_formulas","text":"","code":"lof1 <- c(~a+b, ~a:c, ~c*d) combine_formulas(lof1) #> ~(a + b) + (a:c) + (c * d) #> <environment: 0x5583bc979da0> combine_formulas(lof1, operator = \"*\") #> ~(a + b) * (a:c) * (c * d) #> <environment: 0x5583bc979da0> combine_formulas(lof1, simplify = TRUE) #> ~a + b + c + d + a:c + c:d #> <environment: 0x5583bc979da0>  # Intercept is included when needed lof2 <- c(~a+b -1, ~a:c -1, ~c*d) combine_formulas(lof2) #> ~(a + b - 1) + (a:c - 1) + (c * d) + 1 #> <environment: 0x5583bc979da0> combine_formulas(lof2, simplify = TRUE) #> ~a + b + c + d + a:c + c:d #> <environment: 0x5583bc979da0> combine_formulas(lof2[1:2]) #> ~(a + b - 1) + (a:c - 1) #> <environment: 0x5583bc979da0> combine_formulas(lof2[1:2], simplify = TRUE) #> ~a + b + a:c - 1 #> <environment: 0x5583bc979da0>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/crossMerge.html","id":null,"dir":"Reference","previous_headings":"","what":"crossMerge — crossMerge","title":"crossMerge — crossMerge","text":"crossMerge","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/crossMerge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"crossMerge — crossMerge","text":"","code":"crossMerge(ind1, ind2, x, y, useMatrixToDataFrame = TRUE)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/crossMerge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"crossMerge — crossMerge","text":"ind1 ind1 ind2 ind2 x x y y","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/dummy_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"aggregate_multiple_fun using a dummy matrix — dummy_aggregate","title":"aggregate_multiple_fun using a dummy matrix — dummy_aggregate","text":"Wrapper aggregate_multiple_fun uses dummy matrix instead parameter. Functionality non-dummy  matrices well.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/dummy_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"aggregate_multiple_fun using a dummy matrix — dummy_aggregate","text":"","code":"dummy_aggregate(   data,   x,   vars,   fun = NULL,   dummy = TRUE,   when_non_dummy = warning,   keep_names = TRUE,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/dummy_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"aggregate_multiple_fun using a dummy matrix — dummy_aggregate","text":"data data frame containing data aggregated x (sparse) dummy matrix vars named vector list variable names data. elements named names fun. pairs variable names function names thus define result variables generated. Parameter vars converted internal standard function fix_vars_amf. Thus, function names also output variable names can coded different ways. Multiple output variable names can coded using multi_sep. See examples examples fix_vars_amf. Indices instead variable names allowed. Omission () names possible since names can omitted one function (see fun ). special possible feature combination single unnamed variable functions named. case, functions run output variable names identical function names. fun named list functions. names used suffixes output variable names. Name can omitted one function. vector function strings also possible. unnamed, function names used directly. See examples fix_fun_amf, function used convert fun. Without specifying fun, functions, strings, taken function names coded vars. dummy TRUE, 0s 1s assumed x. FALSE, non-0s x passed additional first input parameter fun functions. Thus, result matrix multiplication achieved fun = function(x, y) sum(x * y). case, data subjected unlist. See aggregate_multiple_fun. when_non_dummy Function called dummy TRUE x non-dummy.  Supply NULL nothing. keep_names TRUE, output row names inherited column names x. ... arguments passed aggregate_multiple_fun","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/dummy_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"aggregate_multiple_fun using a dummy matrix — dummy_aggregate","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/dummy_aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"aggregate_multiple_fun using a dummy matrix — dummy_aggregate","text":"Internally function make use ind parameter aggregate_multiple_fun","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/dummy_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"aggregate_multiple_fun using a dummy matrix — dummy_aggregate","text":"","code":"# Code that generates output similar to the  # last example in aggregate_multiple_fun  d2 <- SSBtoolsData(\"d2\") set.seed(12) d2$y <- round(rnorm(nrow(d2)), 2) d <- d2[sample.int(nrow(d2), size = 20), ]  x <- ModelMatrix(d, formula = ~main_income:k_group - 1)  # with specified output variable names my_range <- function(x) c(min = min(x), max = max(x)) dummy_aggregate(    data = d,     x = x,     vars = list(\"freq\", \"y\",                 `freqmin,freqmax` = list(ra = \"freq\"),                  yWmean  = list(wmean  = c(\"y\", \"freq\"))),    fun = c(sum, ra = my_range, wmean = weighted.mean)) #>                freq     y freqmin freqmax      yWmean #> assistance-300   84  0.64      22      38  0.23928571 #> assistance-400   32  2.07      32      32  2.07000000 #> other-300        27 -1.70       5       9 -0.50592593 #> other-400        13 -0.35       4       9  0.05769231 #> pensions-300     39 -1.10       8      18 -0.28589744 #> pensions-400     20  0.58      20      20  0.58000000 #> wages-300        35 -2.13       2      14 -0.69171429 #> wages-400         2  1.72       0       2  2.01000000   # Make a non-dummy matrix  x2 <- x x2[17, 2:5] <- c(-1, 3, 0, 10) x2[, 4] <- 0  # Now warning  # Result is not same as t(x2) %*% d[[\"freq\"]] dummy_aggregate(data = d, x = x2, vars = \"freq\", fun = sum) #> Warning: All non-0s in x are treated as 1s. Use dummy = FALSE? #>                freq #> assistance-300   84 #> assistance-400   50 #> other-300        45 #> other-400         0 #> pensions-300     39 #> pensions-400     20 #> wages-300        35 #> wages-400         2  # Now same as t(x2) %*% d[[\"freq\"]] dummy_aggregate(data = d, x = x2,                  vars = \"freq\", dummy = FALSE,                 fun = function(x, y) sum(x * y)) #>                freq #> assistance-300   84 #> assistance-400   14 #> other-300        81 #> other-400         0 #> pensions-300    201 #> pensions-400     20 #> wages-300        35 #> wages-400         2   # Same as t(x2) %*% d[[\"freq\"]]  + t(x2^2) %*% d[[\"y\"]]  dummy_aggregate(data = d, x = x2,                  vars = list(c(\"freq\", \"y\")), dummy = FALSE,                 fun = function(x, y1, y2) {sum(x * y1) + sum(x^2 * y2)}) #>                freq:y #> assistance-300  84.64 #> assistance-400  15.70 #> other-300       75.97 #> other-400        0.00 #> pensions-300   163.27 #> pensions-400    20.58 #> wages-300       32.87 #> wages-400        3.72"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/filter_by_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","title":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","text":"Filters list items, retaining associated specific variable, retrieves names items associated variable. association items variables provided via named list, element contains vector variables corresponding item items.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/filter_by_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","text":"","code":"filter_by_variable(variable, items, variable_mapping)  names_by_variable(variable, variable_mapping)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/filter_by_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","text":"variable character string. variable filter items . items named list elements. can type objects (e.g., formulas, data, etc.). variable_mapping named list. element character vector variables associated corresponding item items. names list variable_mapping match names list items.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/filter_by_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","text":"filter_by_variable(): named list containing subset items element associated specified variable. matches found, empty list returned. names_by_variable(): character vector names variable_mapping associated specified variable. matches found, empty character vector returned.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/filter_by_variable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","text":"filter_by_variable() returns filtered list items, whereas names_by_variable() simpler function just returns names items.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/filter_by_variable.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","text":"function written documented ChatGPT discussion. examples chosen relevant connection tables_by_formulas function.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/filter_by_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a List of Items or Retrieve Names by a Variable — filter_by_variable","text":"","code":"items <- list(   table_1 = ~region * sector2,    table_2 = ~region1:sector4 - 1,    table_3 = ~region + sector4 - 1 )  variable_mapping <- list(   table_3 = c(\"z\", \"y\"),    table_1 = c(\"value\", \"x\"),    table_2 = c(\"value\", \"x\", \"y\") )  filter_by_variable(\"value\", items, variable_mapping) #> $table_1 #> ~region * sector2 #> <environment: 0x5583bfb2bf78> #>  #> $table_2 #> ~region1:sector4 - 1 #> <environment: 0x5583bfb2bf78> #>  filter_by_variable(\"y\", items, variable_mapping) #> $table_2 #> ~region1:sector4 - 1 #> <environment: 0x5583bfb2bf78> #>  #> $table_3 #> ~region + sector4 - 1 #> <environment: 0x5583bfb2bf78> #>  filter_by_variable(\"nonexistent\", items, variable_mapping) #> named list()  names_by_variable(\"value\", variable_mapping) #> [1] \"table_1\" \"table_2\" names_by_variable(\"y\", variable_mapping) #> [1] \"table_3\" \"table_2\" names_by_variable(\"nonexistent\", variable_mapping) #> character(0)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_fun_amf.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix fun parameter to aggregate_multiple_fun — fix_fun_amf","title":"Fix fun parameter to aggregate_multiple_fun — fix_fun_amf","text":"Fix fun parameter aggregate_multiple_fun","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_fun_amf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix fun parameter to aggregate_multiple_fun — fix_fun_amf","text":"","code":"fix_fun_amf(fun)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_fun_amf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix fun parameter to aggregate_multiple_fun — fix_fun_amf","text":"fun fun","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_fun_amf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix fun parameter to aggregate_multiple_fun — fix_fun_amf","text":"fun","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_fun_amf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix fun parameter to aggregate_multiple_fun — fix_fun_amf","text":"","code":"identical(fix_fun_amf(\"median\"), c(median = median)) #> [1] TRUE  identical(fix_fun_amf(c(\"sum\", \"median\")), c(sum = sum, median = median)) #> [1] TRUE  ff <- c(\"sum\", \"median\", \"cor\") names(ff) <- c(\"\", NA, \"Correlation\") identical(fix_fun_amf(ff), c(sum, median = median, Correlation = cor)) #> [1] TRUE  identical(fix_fun_amf(structure(\"median\", names = \"\")), fix_fun_amf(median)) #> [1] TRUE"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_vars_amf.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix vars parameter to aggregate_multiple_fun — fix_vars_amf","title":"Fix vars parameter to aggregate_multiple_fun — fix_vars_amf","text":"Fix vars parameter aggregate_multiple_fun","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_vars_amf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix vars parameter to aggregate_multiple_fun — fix_vars_amf","text":"","code":"fix_vars_amf(   vars,   name_sep = \"_\",   seve_sep = \":\",   multi_sep = \",\",   names_data = NULL,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_vars_amf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix vars parameter to aggregate_multiple_fun — fix_vars_amf","text":"vars vars name_sep character string used output variable names generated. seve_sep character string used output variable names generated functions several variables. multi_sep character string used multiple output variable names sent input. names_data names(data) convert numeric input (indices) ... unused parameters","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_vars_amf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix vars parameter to aggregate_multiple_fun — fix_vars_amf","text":"vars","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/fix_vars_amf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix vars parameter to aggregate_multiple_fun — fix_vars_amf","text":"","code":"f <- fix_vars_amf  f(c(\"freq\", \"y\", median = \"freq\", median = \"y\", e1 = \"freq\")) #> [[1]] #>   name    fun         #> \"freq\"     \"\" \"freq\"  #>  #> [[2]] #> name  fun       #>  \"y\"   \"\"  \"y\"  #>  #> [[3]] #>          name           fun                #> \"freq_median\"      \"median\"        \"freq\"  #>  #> [[4]] #>       name        fun             #> \"y_median\"   \"median\"        \"y\"  #>  #> [[5]] #>      name       fun            #> \"freq_e1\"      \"e1\"    \"freq\"  #>   v1 <- list(sum = \"a\", sum = \"w\", q = c(\"a\", \"w\"), mean = c(\"b\", \"w\")) v2 <- list(c(fun = \"sum\", \"a\"), c(fun = \"sum\", \"w\"), c(fun = \"q\", \"a\", \"w\"),             c(fun = \"mean\", \"b\", \"w\")) v3 <- list(sum = \"a\", sum = \"w\", q = c(name = \"a:w_q\", \"a\", \"w\"),             `b:w_mean` = list(mean = c(\"b\", \"w\"))) v4 <- list(c(name = \"a_sum\", fun = \"sum\", \"a\"),             c(name = \"w_sum\", fun = \"sum\", \"w\"),             c(name = \"a:w_q\", fun = \"q\", \"a\", \"w\"),             c(name = \"b:w_mean\", fun = \"mean\", \"b\", \"w\")) v5 <- list(a_sum = c(fun = \"sum\", \"a\"),             w_sum = c(fun = \"sum\", \"w\"),             `a:w_q` = c(fun = \"q\", \"a\", \"w\"),             `b:w_mean` = c(fun = \"mean\", \"b\", \"w\"))  identical(f(v1), f(v2)) #> [1] TRUE identical(f(v1), f(v3)) #> [1] TRUE identical(f(v1), f(v4)) #> [1] TRUE identical(f(v1), f(v5)) #> [1] TRUE  identical(f(v1), f(f(v1))) #> [1] TRUE identical(f(v1), v4) #> [1] TRUE"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_from_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate model formula by specifying which variables have totals or not. — formula_from_vars","title":"Generate model formula by specifying which variables have totals or not. — formula_from_vars","text":"Generate model formula specifying variables totals .","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_from_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate model formula by specifying which variables have totals or not. — formula_from_vars","text":"","code":"formula_from_vars(   nontotal_vars = NULL,   total_vars = NULL,   simplify = TRUE,   env = parent.frame() )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_from_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate model formula by specifying which variables have totals or not. — formula_from_vars","text":"nontotal_vars character vector variable names without totals total_vars character vector variable names totals simplify logical value, default TRUE. Determines whether formula simplified output . env environment output formula","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_from_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate model formula by specifying which variables have totals or not. — formula_from_vars","text":"model formula","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_from_vars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate model formula by specifying which variables have totals or not. — formula_from_vars","text":"Daniel Lupp","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_from_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate model formula by specifying which variables have totals or not. — formula_from_vars","text":"","code":"formula_from_vars(c(\"a\", \"b\", \"c\"), c(\"a\")) #> ~b:c + a:b:c #> <environment: 0x5583b9b9af80> formula_from_vars(c(\"a\", \"b\", \"c\"), c(\"a\", \"c\")) #> ~b + b:c + a:b + a:b:c #> <environment: 0x5583b9b9af80> formula_from_vars(c(\"a\", \"b\", \"c\"), c(\"a\", \"b\", \"c\")) #> ~a * b * c #> <environment: 0x5583b9b9af80> formula_from_vars(c(\"a\", \"b\", \"c\"), NULL) #> ~a:b:c #> <environment: 0x5583b9b9af80> formula_from_vars(NULL, c(\"a\", \"b\", \"c\")) #> ~a * b * c #> <environment: 0x5583b9b9af80> formula_from_vars(c(\"a\", \"b\"), c(\"d\")) #> ~a:b + a:b:d #> <environment: 0x5583b9b9af80>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_term_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve term labels from a formula — formula_term_labels","title":"Retrieve term labels from a formula — formula_term_labels","text":"function extracts term labels right-hand side given R formula. intercept included (name intercept provided), added first element returned vector.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_term_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve term labels from a formula — formula_term_labels","text":"","code":"formula_term_labels(formula, intercept = \"(Intercept)\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_term_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve term labels from a formula — formula_term_labels","text":"formula R formula, e.g. ~ x1 * x2. intercept character string indicating name intercept. default value \"(Intercept)\". NULL provided, intercept included, even present formula.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_term_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve term labels from a formula — formula_term_labels","text":"character vector containing term labels. intercept present intercept NULL, intercept returned first, followed remaining terms.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_term_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve term labels from a formula — formula_term_labels","text":"default intercept value, \"(Intercept)\", chosen consistent intercept label returned functions stats::lm(), stats::model.matrix(), similar modeling functions.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_term_labels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Retrieve term labels from a formula — formula_term_labels","text":"function documented ChatGPT discussion.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_term_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve term labels from a formula — formula_term_labels","text":"","code":"# With intercept: formula_term_labels(~ x1 * x2) #> [1] \"(Intercept)\" \"x1\"          \"x2\"          \"x1:x2\"        # Without intercept: formula_term_labels(~ x1 * x2, intercept = NULL) #> [1] \"x1\"    \"x2\"    \"x1:x2\""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for formula manipulation — formula_utils","title":"Functions for formula manipulation — formula_utils","text":"Functions formula manipulation","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/formula_utils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions for formula manipulation — formula_utils","text":"combine_formulas: Combine formulas formula_from_vars:  Generate model formula specifying variables totals substitute_formula_vars: Replace variables formula sum variables formula_term_labels: Retrieve term labels formula","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/hierarchies_as_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchies coded as variables — hierarchies_as_vars","title":"Hierarchies coded as variables — hierarchies_as_vars","text":"hierarchical relations stored minimal datasets","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/hierarchies_as_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchies coded as variables — hierarchies_as_vars","text":"","code":"hierarchies_as_vars(   hierarchies,   name_function = function(name, level) paste0(name, \"_level_\", level),   single_vars = FALSE,   from_dummy = NA,   dummy_reorder = TRUE,   combine_vars = TRUE,   drop_codes = NULL,   include_codes = NULL,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/hierarchies_as_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchies coded as variables — hierarchies_as_vars","text":"hierarchies List hierarchies format input AutoHierarchies name_function function defining name columns except first. input consists hierarchy name (identical first column’s name, name) column number minus 1 (level). single_vars TRUE, single variable created codes except input codes. from_dummy Logical value indicating method handling hierarchies. TRUE, algorithm uses dummy-coded hierarchies. FALSE, algorithm works directly hierarchies standardized AutoHierarchies, often resulting well-structured output variables. NA (default), algorithm first attempts FALSE method; feasible, falls back TRUE method. dummy_reorder TRUE, dummy-coded hierarchies reordered potentially improve structure output variables. combine_vars TRUE, algorithm applied potentially reduce number output variables needed. drop_codes named list codes (except input codes) dropped output. list must names hierarchies, names/elements need included. include_codes Similar drop_codes, specifies codes included instead. ... Additional parameters passed AutoHierarchies","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/hierarchies_as_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchies coded as variables — hierarchies_as_vars","text":"Named list data frames","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/hierarchies_as_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchies coded as variables — hierarchies_as_vars","text":"","code":"# Examples based on those from AutoHierarchies # You may also try converting other examples from AutoHierarchies  z <- SSBtoolsData(\"sprt_emp_withEU\") year_formula <- c(\"y_14 = 2014\", \"y_15_16 = y_all - y_14\", \"y_all = 2014 + 2015 + 2016\") geo_dim_list <- FindDimLists(z[, c(\"geo\", \"eu\")], total = \"Europe\")[[1]] age_hierarchy <- SSBtoolsData(\"sprt_emp_ageHier\")  hierarchies_as_vars(list(age = age_hierarchy, geo = geo_dim_list, year = year_formula)) #> $age #>      age age_level_1 #> 1 Y15-29      Y15-64 #> 2 Y30-64      Y15-64 #>  #> $geo #>        geo geo_level_1 geo_level_2 #> 1  Iceland       nonEU      Europe #> 2 Portugal          EU      Europe #> 3    Spain          EU      Europe #>  #> $year #>   year year_level_1 year_level_2 #> 1 2014         y_14        y_all #> 2 2015      y_15_16        y_all #> 3 2016      y_15_16        y_all #>  hierarchies_as_vars(list(age = age_hierarchy, geo = geo_dim_list, year = year_formula),                      singleVars = TRUE) #> $age #>      age age_level_1 #> 1 Y15-29      Y15-64 #> 2 Y30-64      Y15-64 #>  #> $geo #>        geo geo_level_1 geo_level_2 #> 1  Iceland       nonEU      Europe #> 2 Portugal          EU      Europe #> 3    Spain          EU      Europe #>  #> $year #>   year year_level_1 year_level_2 #> 1 2014         y_14        y_all #> 2 2015      y_15_16        y_all #> 3 2016      y_15_16        y_all #>                       # NAs are included in data when necessary hierarchies_as_vars(list(f = c(\"AB = A + B\", \"AC = A + C\", \"CD = C + D\", \"ABCD = AB + CD\")))                      #> $f #>   f f_level_1 f_level_2 f_level_3 #> 1 A        AB        AC      ABCD #> 2 B        AB      <NA>      ABCD #> 3 C        CD        AC      ABCD #> 4 D        CD      <NA>      ABCD #>   # drop_codes and include_codes   hierarchies_as_vars(list(age = age_hierarchy, geo = geo_dim_list, year = year_formula),                      drop_codes = list(geo = \"nonEU\", year = c(\"y_14\", \"y_all\")))   #> $age #>      age age_level_1 #> 1 Y15-29      Y15-64 #> 2 Y30-64      Y15-64 #>  #> $geo #>        geo geo_level_1 geo_level_2 #> 1  Iceland        <NA>      Europe #> 2 Portugal          EU      Europe #> 3    Spain          EU      Europe #>  #> $year #>   year year_level_1 #> 1 2014         <NA> #> 2 2015      y_15_16 #> 3 2016      y_15_16 #>  hierarchies_as_vars(list(age = age_hierarchy, geo = geo_dim_list, year = year_formula),                      include_codes = list(year = c(\"y_14\", \"y_all\")))       #> $age #>      age age_level_1 #> 1 Y15-29      Y15-64 #> 2 Y30-64      Y15-64 #>  #> $geo #>        geo geo_level_1 geo_level_2 #> 1  Iceland       nonEU      Europe #> 2 Portugal          EU      Europe #> 3    Spain          EU      Europe #>  #> $year #>   year year_level_1 year_level_2 #> 1 2014         y_14        y_all #> 2 2015         <NA>        y_all #> 3 2016         <NA>        y_all #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/inc_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default progress indicator function — inc_default","title":"Default progress indicator function — inc_default","text":"Default progress indicator function","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/inc_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default progress indicator function — inc_default","text":"","code":"inc_default(i = 0L, n = 0L, steps = 25L, dot = \".\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/inc_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default progress indicator function — inc_default","text":"\"n\" n n \"n\" steps Number dots print dot dot","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/inc_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default progress indicator function — inc_default","text":"","code":"for (i in 1:5) inc_default(i, 5) #> ..... cat(\"\\n\") #>  for (i in 1:100) inc_default(i, 100) #> ......................... cat(\"\\n\") #>  for (i in 1:1000) inc_default(i, 1000) #> ......................... cat(\"\\n\") #>  for (i in 1:1000) inc_default(i, 1000, steps = 10) #> .......... cat(\"\\n\") #>  for (i in 1:10) inc_default() #> .......... cat(\"\\n\") #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/map_hierarchies_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add variables to dataset based on hierarchies — map_hierarchies_to_data","title":"Add variables to dataset based on hierarchies — map_hierarchies_to_data","text":"Uses hierarchies_as_vars transform hierarchies, followed mapping dataset.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/map_hierarchies_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add variables to dataset based on hierarchies — map_hierarchies_to_data","text":"","code":"map_hierarchies_to_data(   data,   hierarchies,   when_overwritten = warning,   add_comment = TRUE,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/map_hierarchies_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add variables to dataset based on hierarchies — map_hierarchies_to_data","text":"data data frame containing variables names matching names hierarchies. hierarchies List hierarchies format input AutoHierarchies when_overwritten function called existing column(s) overwritten. Supply stop invoke error, warning warning (default), message display informational message, NULL nothing. add_comment Logical. TRUE (default), comment attribute added output data frame, containing names variables added. ... parameters sent hierarchies_as_vars","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/map_hierarchies_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add variables to dataset based on hierarchies — map_hierarchies_to_data","text":"Input data extra Variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/map_hierarchies_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add variables to dataset based on hierarchies — map_hierarchies_to_data","text":"","code":"# Examples similar those from hierarchies_as_vars  z <- SSBtoolsData(\"sprt_emp_withEU\") year_formula <- c(\"y_14 = 2014\", \"y_15_16 = y_all - y_14\", \"y_all = 2014 + 2015 + 2016\") geo_dim_list <- FindDimLists(z[, c(\"geo\", \"eu\")], total = \"Europe\")[[1]] age_hierarchy <- SSBtoolsData(\"sprt_emp_ageHier\")  map_hierarchies_to_data(z, list(age = age_hierarchy, geo = geo_dim_list,                                  year = year_formula)) #>       age      geo year ths_per    eu age_level_1 geo_level_1 geo_level_2 #> 1  Y15-29    Spain 2014    66.9    EU      Y15-64          EU      Europe #> 2  Y15-29  Iceland 2014     1.8 nonEU      Y15-64       nonEU      Europe #> 3  Y15-29 Portugal 2014    11.6    EU      Y15-64          EU      Europe #> 4  Y30-64    Spain 2014   120.3    EU      Y15-64          EU      Europe #> 5  Y30-64  Iceland 2014     1.5 nonEU      Y15-64       nonEU      Europe #> 6  Y30-64 Portugal 2014    20.2    EU      Y15-64          EU      Europe #> 7  Y15-29    Spain 2015    63.4    EU      Y15-64          EU      Europe #> 8  Y15-29  Iceland 2015     1.9 nonEU      Y15-64       nonEU      Europe #> 9  Y15-29 Portugal 2015    14.2    EU      Y15-64          EU      Europe #> 10 Y30-64    Spain 2015   119.6    EU      Y15-64          EU      Europe #> 11 Y30-64  Iceland 2015     1.6 nonEU      Y15-64       nonEU      Europe #> 12 Y30-64 Portugal 2015    24.3    EU      Y15-64          EU      Europe #> 13 Y15-29    Spain 2016    69.1    EU      Y15-64          EU      Europe #> 14 Y15-29  Iceland 2016     1.9 nonEU      Y15-64       nonEU      Europe #> 15 Y15-29 Portugal 2016    12.7    EU      Y15-64          EU      Europe #> 16 Y30-64    Spain 2016   122.1    EU      Y15-64          EU      Europe #> 17 Y30-64  Iceland 2016     1.9 nonEU      Y15-64       nonEU      Europe #> 18 Y30-64 Portugal 2016    25.8    EU      Y15-64          EU      Europe #>    year_level_1 year_level_2 #> 1          y_14        y_all #> 2          y_14        y_all #> 3          y_14        y_all #> 4          y_14        y_all #> 5          y_14        y_all #> 6          y_14        y_all #> 7       y_15_16        y_all #> 8       y_15_16        y_all #> 9       y_15_16        y_all #> 10      y_15_16        y_all #> 11      y_15_16        y_all #> 12      y_15_16        y_all #> 13      y_15_16        y_all #> 14      y_15_16        y_all #> 15      y_15_16        y_all #> 16      y_15_16        y_all #> 17      y_15_16        y_all #> 18      y_15_16        y_all  map_hierarchies_to_data(data.frame(f = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"A\")), list(f =         c(\"AB = A + B\", \"AC = A + C\", \"CD = C + D\", \"ABCD = AB + CD\"))) #>   f f_level_1 f_level_2 f_level_3 #> 1 A        AB        AC      ABCD #> 2 B        AB      <NA>      ABCD #> 3 C        CD        AC      ABCD #> 4 D        CD      <NA>      ABCD #> 5 E      <NA>      <NA>      <NA> #> 6 A        AB        AC      ABCD                 # Examples demonstrating when_overwritten and add_comment                 a <- map_hierarchies_to_data(z, list(age = age_hierarchy, geo = geo_dim_list)) comment(a) #> [1] \"age_level_1\" \"geo_level_1\" \"geo_level_2\"  b <- map_hierarchies_to_data(a[-7], list(age = age_hierarchy, geo = geo_dim_list),                               when_overwritten = message, add_comment = FALSE) #> Overwritten columns: age_level_1, geo_level_2 comment(b) #> NULL"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/matlabColon.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Matlab's ':' — matlabColon","title":"Simulate Matlab's ':' — matlabColon","text":"Functions generate increasing sequences","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/matlabColon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Matlab's ':' — matlabColon","text":"","code":"matlabColon(from, to)  SeqInc(from, to)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/matlabColon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Matlab's ':' — matlabColon","text":"numeric. start value numeric. end value.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/matlabColon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Matlab's ':' — matlabColon","text":"numeric vector, possibly empty.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/matlabColon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Matlab's ':' — matlabColon","text":"matlabColon(,b) returns :b (R's version) unless > b, case returns integer(0). SeqInc(,b) similar, results error calculated length sequence (1+-) negative.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/matlabColon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Matlab's ':' — matlabColon","text":"Bjørn-Helge Mevik (matlabColon) Øyvind Langsrud (SeqInc)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/matlabColon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Matlab's ':' — matlabColon","text":"","code":"identical(3:5, matlabColon(3, 5)) ## => TRUE #> [1] TRUE 3:1 ## => 3 2 1 #> [1] 3 2 1 matlabColon(3, 1) ## => integer(0) #> integer(0) try(SeqInc(3, 1)) ## => Error #> Error in SeqInc(3, 1) :  #>   Length of sequence (1+to-from) must be non-negative SeqInc(3, 2)      ## => integer(0) #> integer(0)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/max_contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Major Contributions to Aggregates and Count Contributors — max_contribution","title":"Find Major Contributions to Aggregates and Count Contributors — max_contribution","text":"functions analyze contributions aggregates, assuming aggregates calculated using dummy matrix formula: z = t(x) %*% y.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/max_contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Major Contributions to Aggregates and Count Contributors — max_contribution","text":"","code":"max_contribution(   x,   y,   n = 1,   id = NULL,   output = \"y\",   drop = TRUE,   decreasing = TRUE,   remove_fraction = NULL,   do_abs = TRUE )  n_contributors(x, y = rep(1L, nrow(x)), id = NULL, output = \"n_contr\", ...)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/max_contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Major Contributions to Aggregates and Count Contributors — max_contribution","text":"x (sparse) dummy matrix y numeric vector input values (contributions). n Integer. number largest contributors identify aggregate. Default 1. id optional vector grouping. non-NULL, major contributions found aggregation within group specified id. Aggregates missing id values excluded. output character vector specifying desired output. Possible values: \"y\": matrix largest contributions first column, second largest second column, . \"id\": matrix IDs associated largest contributions. id vector provided, returns IDs; otherwise, returns indices. \"n_contr\": integer vector indicating number contributors aggregate. \"n_0_contr\": integer vector indicating number contributors contribute value 0 aggregate. \"n_non0_contr\": integer vector indicating number contributors contribute nonzero value aggregate. \"sums\": numeric vector containing aggregate sums y. \"n_contr_all\", \"n_0_contr_all\", \"n_non0_contr_all\", \"sums_all\": corresponding outputs , without applying remove_fraction parameter. drop Logical. TRUE (default) output length 1, function returns single list element directly instead list containing one element. decreasing Logical. TRUE (default), finds largest contributors. FALSE, finds smallest contributors. remove_fraction numeric vector containing values interval [0, 1], specifying contributors removed identifying largest contributions. id vector provided, remove_fraction must named according IDs contributors removed. id vector provided, length remove_fraction must match length y. case, contributors removed value NA remove_fraction. actual values remove_fraction used calculating \"sums\" (see description ). do_abs Logical. TRUE (default), uses absolute values summed contributions. summation performed contributions contributor, within aggregate computed. ... arguments max_contribution  (used n_contributors).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/max_contribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Major Contributions to Aggregates and Count Contributors — max_contribution","text":"list single element, depending values output drop parameters.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/max_contribution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Major Contributions to Aggregates and Count Contributors — max_contribution","text":"max_contribution function identifies largest contributions aggregates, wrapper function n_contributors designed specifically count number contributors aggregate.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/max_contribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Major Contributions to Aggregates and Count Contributors — max_contribution","text":"","code":"z <- SSBtoolsData(\"magnitude1\") a <- ModelMatrix(z, formula = ~sector4 + geo, crossTable = TRUE)  cbind(a$crossTable,        y =  max_contribution(x = a$modelMatrix, y = z$value, n = 2),        id = max_contribution(x = a$modelMatrix, y = z$value, n = 2, output = \"id\"),       n =  n_contributors(  x = a$modelMatrix, y = z$value, n = 2)) #>         sector4      geo  y.1  y.2 id.1 id.2  n #> 1         Total    Total 96.6 77.4    3    8 20 #> 2   Agriculture    Total 96.6 75.9    3    1  4 #> 3 Entertainment    Total 77.4 16.8    8    5  6 #> 4  Governmental    Total 21.6  6.5   11   13  4 #> 5      Industry    Total 25.7  9.6   18   15  6 #> 6         Total  Iceland 16.8  9.6    5   15  4 #> 7         Total Portugal 75.9 25.7    1   18  8 #> 8         Total    Spain 96.6 77.4    3    8  8  cbind(a$crossTable,        y = max_contribution(x = a$modelMatrix, y = z$value, n = 3, id = z$company),        id = max_contribution(a$modelMatrix, z$value, 3, id = z$company, output = \"id\")) #>         sector4      geo   y.1   y.2  y.3 id.1 id.2 id.3 #> 1         Total    Total 249.9 160.0 40.1    A    B    C #> 2   Agriculture    Total 172.5  67.7   NA    A    B <NA> #> 3 Entertainment    Total  77.4  35.4 16.4    A    B    C #> 4  Governmental    Total  21.6   6.5  4.7    B    C    D #> 5      Industry    Total  35.3  17.2  5.3    B    C    D #> 6         Total  Iceland  26.4   8.8  1.9    B    C    D #> 7         Total Portugal  78.9  75.9  7.7    B    A    D #> 8         Total    Spain 174.0  54.7 31.3    A    B    C  max_contribution(x = a$modelMatrix,                   y = z$value,                   n = 3,                   id = z$company,                   output = c(\"y\", \"id\", \"n_contr\", \"sums\")) #> $y #>       [,1]  [,2] [,3] #> [1,] 249.9 160.0 40.1 #> [2,] 172.5  67.7   NA #> [3,]  77.4  35.4 16.4 #> [4,]  21.6   6.5  4.7 #> [5,]  35.3  17.2  5.3 #> [6,]  26.4   8.8  1.9 #> [7,]  78.9  75.9  7.7 #> [8,] 174.0  54.7 31.3 #>  #> $id #>      [,1] [,2] [,3] #> [1,] \"A\"  \"B\"  \"C\"  #> [2,] \"A\"  \"B\"  NA   #> [3,] \"A\"  \"B\"  \"C\"  #> [4,] \"B\"  \"C\"  \"D\"  #> [5,] \"B\"  \"C\"  \"D\"  #> [6,] \"B\"  \"C\"  \"D\"  #> [7,] \"B\"  \"A\"  \"D\"  #> [8,] \"A\"  \"B\"  \"C\"  #>  #> $n_contr #> [1] 4 2 4 3 3 3 3 4 #>  #> $sums #>         Total-Total   Agriculture-Total Entertainment-Total  Governmental-Total  #>               462.3               240.2               131.5                32.8  #>      Industry-Total       Total-Iceland      Total-Portugal         Total-Spain  #>                57.8                37.1               162.5               262.7  #>   as.data.frame(   max_contribution(x = a$modelMatrix,                     y = z$value,                     n = 3,                     id = z$company,                     output = c(\"y\", \"id\", \"n_contr\", \"sums\", \"n_contr_all\", \"sums_all\"),                     remove_fraction = c(B = 1))) #>                       y.1  y.2  y.3 id.1 id.2 id.3 n_contr  sums n_contr_all #> Total-Total         249.9 40.1 12.3    A    C    D       3 302.3           4 #> Agriculture-Total   172.5   NA   NA    A <NA> <NA>       1 172.5           2 #> Entertainment-Total  77.4 16.4  2.3    A    C    D       3  96.1           4 #> Governmental-Total    6.5  4.7   NA    C    D <NA>       2  11.2           3 #> Industry-Total       17.2  5.3   NA    C    D <NA>       2  22.5           3 #> Total-Iceland         8.8  1.9   NA    C    D <NA>       2  10.7           3 #> Total-Portugal       75.9  7.7   NA    A    D <NA>       2  83.6           3 #> Total-Spain         174.0 31.3  2.7    A    C    D       3 208.0           4 #>                     sums_all #> Total-Total            462.3 #> Agriculture-Total      240.2 #> Entertainment-Total    131.5 #> Governmental-Total      32.8 #> Industry-Total          57.8 #> Total-Iceland           37.1 #> Total-Portugal         162.5 #> Total-Spain            262.7"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/model_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical aggregation via model specification — model_aggregate","title":"Hierarchical aggregation via model specification — model_aggregate","text":"Internally dummy/model matrix created according model specification. model matrix used aggregation process via matrix multiplication /function aggregate_multiple_fun.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/model_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical aggregation via model specification — model_aggregate","text":"","code":"model_aggregate(   data,   sum_vars = NULL,   fun_vars = NULL,   fun = NULL,   hierarchies = NULL,   formula = NULL,   dim_var = NULL,   total = NULL,   input_in_output = NULL,   remove_empty = NULL,   avoid_hierarchical = NULL,   preagg_var = NULL,   dummy = TRUE,   pre_aggregate = dummy,   aggregate_pkg = \"base\",   aggregate_na = TRUE,   aggregate_base_order = FALSE,   list_return = FALSE,   pre_return = FALSE,   verbose = TRUE,   mm_args = NULL,   ... )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/model_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical aggregation via model specification — model_aggregate","text":"data Input data containing data aggregated, typically data frame, tibble, data.table. data classic data frame, coerced one internally. sum_vars Variables summed. done via matrix multiplication. fun_vars Variables aggregated supplied functions. done via aggregate_multiple_fun dummy_aggregate fun_vars specified parameter vars. fun fun         parameter aggregate_multiple_fun hierarchies hierarchies parameter ModelMatrix formula formula     parameter ModelMatrix dim_var dimVar      parameter ModelMatrix total non-NULL, total parameter ModelMatrix. Thus, actual default value \"Total\". input_in_output non-NULL, inputInOutput parameter ModelMatrix. Thus, actual default value TRUE. remove_empty non-NULL, removeEmpty parameter ModelMatrix. Thus, actual default value TRUE formula input without hierarchy otherwise FALSE (see ModelMatrix). avoid_hierarchical non-NULL, avoidHierarchical parameter Formula2ModelMatrix, underlying function ModelMatrix. preagg_var Extra variables used grouping elements pre-aggregate step dummy dummy       parameter dummy_aggregate. TRUE, 0s 1s assumed generated model matrix. FALSE, non-0s matrix passed additional first input parameter fun functions. pre_aggregate Whether pre-aggregate data reduce dimension model matrix. Note original fun_vars observations retained aggregated dataset pre_aggregate affect final result. However, pre_aggregate must set FALSE dummy_aggregate parameter dummy set FALSE since unlist run. exception fun functions written handle list data. aggregate_pkg Package used pre-aggregate. Parameter pkg aggregate_by_pkg. aggregate_na Whether include NAs grouping variables preAggregate. Parameter include_na aggregate_by_pkg. aggregate_base_order Parameter base_order aggregate_by_pkg, used pre-aggregate. default set FALSE avoid unnecessary sorting operations. TRUE, attempt made return result data.table base R. guaranteed due potential variations sorting behavior across different systems. list_return Whether return list separate components including model matrix x. pre_return Whether return pre-aggregate data two-component list. Can also combined list_return (see examples). verbose Whether print information calculations. mm_args List arguments passed ModelMatrix. ... arguments passed dummy_aggregate.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/model_aggregate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical aggregation via model specification — model_aggregate","text":"data frame list.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/model_aggregate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical aggregation via model specification — model_aggregate","text":"formula input, limited output can achieved formula_selection (see example). attribute called startCol added output data frame make functionality work.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/model_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical aggregation via model specification — model_aggregate","text":"","code":"z <- SSBtoolsData(\"sprt_emp_withEU\") z$age[z$age == \"Y15-29\"] <- \"young\" z$age[z$age == \"Y30-64\"] <- \"old\" names(z)[names(z) == \"ths_per\"] <- \"ths\" z$y <- 1:18  my_range <- function(x) c(min = min(x), max = max(x))  out <- model_aggregate(z,     formula = ~age:year + geo,     sum_vars = c(\"y\", \"ths\"),     fun_vars = c(sum = \"ths\", mean = \"y\", med = \"y\", ra = \"ths\"),     fun = c(sum = sum, mean = mean, med = median, ra = my_range)) #> [pre_aggregate 18*6->18*7] [ModelMatrix] [crossprod] [dummy_aggregate] [cbind]  out #>      age  year      geo   y   ths ths_sum y_mean y_med ths_ra.min ths_ra.max #> 1  Total Total    Total 171 680.8   680.8    9.5   9.5        1.5      122.1 #> 2  Total Total  Iceland  57  10.6    10.6    9.5   9.5        1.5        1.9 #> 3  Total Total Portugal  63 108.8   108.8   10.5  10.5       11.6       25.8 #> 4  Total Total    Spain  51 561.4   561.4    8.5   8.5       63.4      122.1 #> 5    old  2014    Total  15 142.0   142.0    5.0   5.0        1.5      120.3 #> 6    old  2015    Total  33 145.5   145.5   11.0  11.0        1.6      119.6 #> 7    old  2016    Total  51 149.8   149.8   17.0  17.0        1.9      122.1 #> 8  young  2014    Total   6  80.3    80.3    2.0   2.0        1.8       66.9 #> 9  young  2015    Total  24  79.5    79.5    8.0   8.0        1.9       63.4 #> 10 young  2016    Total  42  83.7    83.7   14.0  14.0        1.9       69.1  # Limited output can be achieved by formula_selection formula_selection(out, ~geo) #>     age  year      geo   y   ths ths_sum y_mean y_med ths_ra.min ths_ra.max #> 1 Total Total    Total 171 680.8   680.8    9.5   9.5        1.5      122.1 #> 2 Total Total  Iceland  57  10.6    10.6    9.5   9.5        1.5        1.9 #> 3 Total Total Portugal  63 108.8   108.8   10.5  10.5       11.6       25.8 #> 4 Total Total    Spain  51 561.4   561.4    8.5   8.5       63.4      122.1   # Using the single unnamed variable feature. model_aggregate(z, formula = ~age, fun_vars = \"y\",                  fun = c(sum = sum, mean = mean, med = median, n = length)) #> [pre_aggregate 18*6->2*2] [ModelMatrix] [dummy_aggregate] [cbind] #>     age sum mean  med  n #> 1 Total 171  9.5  9.5 18 #> 2   old  99 11.0 11.0  9 #> 3 young  72  8.0  8.0  9   # To illustrate list_return and pre_return  for (pre_return in c(FALSE, TRUE)) for (list_return in c(FALSE, TRUE)) {   cat(\"\\n=======================================\\n\")   cat(\"list_return =\", list_return, \", pre_return =\", pre_return, \"\\n\\n\")   out <- model_aggregate(z, formula = ~age:year,                           sum_vars = c(\"ths\", \"y\"),                           fun_vars = c(mean = \"y\", ra = \"y\"),                           fun = c(mean = mean, ra = my_range),                           list_return = list_return,                          pre_return = pre_return)   cat(\"\\n\")   print(out) } #>  #> ======================================= #> list_return = FALSE , pre_return = FALSE  #>  #> [pre_aggregate 18*6->6*5] [ModelMatrix] [crossprod] [dummy_aggregate] [cbind] #>  #>     age  year   ths   y y_mean y_ra.min y_ra.max #> 1 Total Total 680.8 171    9.5        1       18 #> 2   old  2014 142.0  15    5.0        4        6 #> 3   old  2015 145.5  33   11.0       10       12 #> 4   old  2016 149.8  51   17.0       16       18 #> 5 young  2014  80.3   6    2.0        1        3 #> 6 young  2015  79.5  24    8.0        7        9 #> 7 young  2016  83.7  42   14.0       13       15 #>  #> ======================================= #> list_return = TRUE , pre_return = FALSE  #>  #> [pre_aggregate 18*6->6*5] [ModelMatrix] [crossprod] [dummy_aggregate]  #>  #> $cross_table #>     age  year #> 1 Total Total #> 2   old  2014 #> 3   old  2015 #> 4   old  2016 #> 5 young  2014 #> 6 young  2015 #> 7 young  2016 #>  #> $sum_data #>               ths   y #> Total-Total 680.8 171 #> old-2014    142.0  15 #> old-2015    145.5  33 #> old-2016    149.8  51 #> young-2014   80.3   6 #> young-2015   79.5  24 #> young-2016   83.7  42 #>  #> $fun_data #>   y_mean y_ra.min y_ra.max #> 1    9.5        1       18 #> 2    5.0        4        6 #> 3   11.0       10       12 #> 4   17.0       16       18 #> 5    2.0        1        3 #> 6    8.0        7        9 #> 7   14.0       13       15 #>  #> $x #> 6 x 7 sparse Matrix of class \"dgCMatrix\" #>      Total-Total old-2014 old-2015 old-2016 young-2014 young-2015 young-2016 #> [1,]           1        1        .        .          .          .          . #> [2,]           1        .        .        .          1          .          . #> [3,]           1        .        1        .          .          .          . #> [4,]           1        .        .        .          .          1          . #> [5,]           1        .        .        1          .          .          . #> [6,]           1        .        .        .          .          .          1 #>  #>  #> ======================================= #> list_return = FALSE , pre_return = TRUE  #>  #> [pre_aggregate 18*6->6*5]  #>  #> $pre_data #>     age year          y #> 1   old 2014    4, 5, 6 #> 2 young 2014    1, 2, 3 #> 3   old 2015 10, 11, 12 #> 4 young 2015    7, 8, 9 #> 5   old 2016 16, 17, 18 #> 6 young 2016 13, 14, 15 #>  #> $pre_sum #>     ths  y #> 1 142.0 15 #> 2  80.3  6 #> 3 145.5 33 #> 4  79.5 24 #> 5 149.8 51 #> 6  83.7 42 #>  #>  #> ======================================= #> list_return = TRUE , pre_return = TRUE  #>  #> [pre_aggregate 18*6->6*5] [ModelMatrix] [crossprod] [dummy_aggregate]  #>  #> $pre_data #>     age year          y #> 1   old 2014    4, 5, 6 #> 2 young 2014    1, 2, 3 #> 3   old 2015 10, 11, 12 #> 4 young 2015    7, 8, 9 #> 5   old 2016 16, 17, 18 #> 6 young 2016 13, 14, 15 #>  #> $pre_sum #>     ths  y #> 1 142.0 15 #> 2  80.3  6 #> 3 145.5 33 #> 4  79.5 24 #> 5 149.8 51 #> 6  83.7 42 #>  #> $cross_table #>     age  year #> 1 Total Total #> 2   old  2014 #> 3   old  2015 #> 4   old  2016 #> 5 young  2014 #> 6 young  2015 #> 7 young  2016 #>  #> $sum_data #>               ths   y #> Total-Total 680.8 171 #> old-2014    142.0  15 #> old-2015    145.5  33 #> old-2016    149.8  51 #> young-2014   80.3   6 #> young-2015   79.5  24 #> young-2016   83.7  42 #>  #> $fun_data #>   y_mean y_ra.min y_ra.max #> 1    9.5        1       18 #> 2    5.0        4        6 #> 3   11.0       10       12 #> 4   17.0       16       18 #> 5    2.0        1        3 #> 6    8.0        7        9 #> 7   14.0       13       15 #>  #> $x #> 6 x 7 sparse Matrix of class \"dgCMatrix\" #>      Total-Total old-2014 old-2015 old-2016 young-2014 young-2015 young-2016 #> [1,]           1        1        .        .          .          .          . #> [2,]           1        .        .        .          1          .          . #> [3,]           1        .        1        .          .          .          . #> [4,]           1        .        .        .          .          1          . #> [5,]           1        .        .        1          .          .          . #> [6,]           1        .        .        .          .          .          1 #>    # To illustrate preagg_var  model_aggregate(z, formula = ~age:year,  sum_vars = c(\"ths\", \"y\"),  fun_vars = c(mean = \"y\", ra = \"y\"),  fun = c(mean = mean, ra = my_range),  preagg_var = \"eu\", pre_return = TRUE)[[\"pre_data\"]] #> [pre_aggregate 18*6->12*6]  #>      age year    eu      y #> 1    old 2014    EU   4, 6 #> 2  young 2014    EU   1, 3 #> 3    old 2015    EU 10, 12 #> 4  young 2015    EU   7, 9 #> 5    old 2016    EU 16, 18 #> 6  young 2016    EU 13, 15 #> 7    old 2014 nonEU      5 #> 8  young 2014 nonEU      2 #> 9    old 2015 nonEU     11 #> 10 young 2015 nonEU      8 #> 11   old 2016 nonEU     17 #> 12 young 2016 nonEU     14   # To illustrate hierarchies  geo_hier <- SSBtoolsData(\"sprt_emp_geoHier\") model_aggregate(z, hierarchies = list(age = \"All\", geo = geo_hier),                  sum_vars = \"y\",                  fun_vars = c(sum = \"y\")) #> [pre_aggregate 18*6->6*4] [ModelMatrix] [crossprod] [dummy_aggregate] [cbind] #>      age      geo   y y_sum #> 1    All       EU 114   114 #> 2    All   Europe 171   171 #> 3    All    nonEU  57    57 #> 4    All  Iceland  57    57 #> 5    All Portugal  63    63 #> 6    All    Spain  51    51 #> 7    old       EU  66    66 #> 8    old   Europe  99    99 #> 9    old    nonEU  33    33 #> 10   old  Iceland  33    33 #> 11   old Portugal  36    36 #> 12   old    Spain  30    30 #> 13 young       EU  48    48 #> 14 young   Europe  72    72 #> 15 young    nonEU  24    24 #> 16 young  Iceland  24    24 #> 17 young Portugal  27    27 #> 18 young    Spain  21    21  ####  Special non-dummy cases illustrated below  ####  # Extend the hierarchy to make non-dummy model matrix   geo_hier2 <- rbind(data.frame(mapsFrom = c(\"EU\", \"Spain\"),                                mapsTo = \"EUandSpain\", sign = 1), geo_hier[, -4])  # Warning since non-dummy # y and y_sum are different  model_aggregate(z, hierarchies = list(age = \"All\", geo = geo_hier2),                  sum_vars = \"y\",                  fun_vars = c(sum = \"y\")) #> [pre_aggregate 18*6->6*4] [ModelMatrix] [crossprod] [dummy_aggregate #> Warning: All non-0s in x are treated as 1s. Use dummy = FALSE? #> ] [cbind] #>      age        geo   y y_sum #> 1    All EUandSpain 165   114 #> 2    All         EU 114   114 #> 3    All     Europe 171   171 #> 4    All      nonEU  57    57 #> 5    All    Iceland  57    57 #> 6    All   Portugal  63    63 #> 7    All      Spain  51    51 #> 8    old EUandSpain  96    66 #> 9    old         EU  66    66 #> 10   old     Europe  99    99 #> 11   old      nonEU  33    33 #> 12   old    Iceland  33    33 #> 13   old   Portugal  36    36 #> 14   old      Spain  30    30 #> 15 young EUandSpain  69    48 #> 16 young         EU  48    48 #> 17 young     Europe  72    72 #> 18 young      nonEU  24    24 #> 19 young    Iceland  24    24 #> 20 young   Portugal  27    27 #> 21 young      Spain  21    21  # No warning since dummy since unionComplement = TRUE (see ?HierarchyCompute) # y and y_sum are equal    model_aggregate(z, hierarchies = list(age = \"All\", geo = geo_hier2),                  sum_vars = \"y\",                  fun_vars = c(sum = \"y\"),                 mm_args = list(unionComplement = TRUE)) #> [pre_aggregate 18*6->6*4] [ModelMatrix] [crossprod] [dummy_aggregate] [cbind] #>      age        geo   y y_sum #> 1    All EUandSpain 114   114 #> 2    All         EU 114   114 #> 3    All     Europe 171   171 #> 4    All      nonEU  57    57 #> 5    All    Iceland  57    57 #> 6    All   Portugal  63    63 #> 7    All      Spain  51    51 #> 8    old EUandSpain  66    66 #> 9    old         EU  66    66 #> 10   old     Europe  99    99 #> 11   old      nonEU  33    33 #> 12   old    Iceland  33    33 #> 13   old   Portugal  36    36 #> 14   old      Spain  30    30 #> 15 young EUandSpain  48    48 #> 16 young         EU  48    48 #> 17 young     Europe  72    72 #> 18 young      nonEU  24    24 #> 19 young    Iceland  24    24 #> 20 young   Portugal  27    27 #> 21 young      Spain  21    21  # Non-dummy again, but no warning since dummy = FALSE # Then pre_aggregate is by default set to FALSE (error when TRUE)  # fun with extra argument needed (see ?dummy_aggregate) # y and y_sum2 are equal model_aggregate(z, hierarchies = list(age = \"All\", geo = geo_hier2),                  sum_vars = \"y\",                  fun_vars = c(sum2 = \"y\"),                 fun = c(sum2 = function(x, y) sum(x * y)),                 dummy = FALSE)  #> [ModelMatrix] [crossprod] [dummy_aggregate] [cbind] #>      age        geo   y y_sum2 #> 1    All EUandSpain 165    165 #> 2    All         EU 114    114 #> 3    All     Europe 171    171 #> 4    All      nonEU  57     57 #> 5    All    Iceland  57     57 #> 6    All   Portugal  63     63 #> 7    All      Spain  51     51 #> 8    old EUandSpain  96     96 #> 9    old         EU  66     66 #> 10   old     Europe  99     99 #> 11   old      nonEU  33     33 #> 12   old    Iceland  33     33 #> 13   old   Portugal  36     36 #> 14   old      Spain  30     30 #> 15 young EUandSpain  69     69 #> 16 young         EU  48     48 #> 17 young     Europe  72     72 #> 18 young      nonEU  24     24 #> 19 young    Iceland  24     24 #> 20 young   Portugal  27     27 #> 21 young      Spain  21     21"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/output_term_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract vector of term labels from a data.frame — output_term_labels","title":"Extract vector of term labels from a data.frame — output_term_labels","text":"data.frame assumed constructed ModelMatrix() functionality using formula parameter.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/output_term_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract vector of term labels from a data.frame — output_term_labels","text":"","code":"output_term_labels(x)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/output_term_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract vector of term labels from a data.frame — output_term_labels","text":"x data.frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/output_term_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract vector of term labels from a data.frame — output_term_labels","text":"vector term labels","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/output_term_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract vector of term labels from a data.frame — output_term_labels","text":"","code":"out <- model_aggregate(SSBtoolsData(\"magnitude1\"),                         formula = ~eu:sector4 + geo * sector2,                         sum_vars = \"value\",                        avoid_hierarchical = TRUE) #> [pre_aggregate 20*6->10*5] [ModelMatrix] [crossprod] [cbind] out #>       eu       sector4      geo sector2 value #> 1  Total         Total    Total   Total 462.3 #> 2  Total         Total  Iceland   Total  37.1 #> 3  Total         Total Portugal   Total 162.5 #> 4  Total         Total    Spain   Total 262.7 #> 5  Total         Total    Total private 429.5 #> 6  Total         Total    Total  public  32.8 #> 7     EU   Agriculture    Total   Total 240.2 #> 8     EU Entertainment    Total   Total 114.7 #> 9     EU  Governmental    Total   Total  32.8 #> 10    EU      Industry    Total   Total  37.5 #> 11 nonEU Entertainment    Total   Total  16.8 #> 12 nonEU      Industry    Total   Total  20.3 #> 13 Total         Total  Iceland private  37.1 #> 14 Total         Total Portugal private 138.9 #> 15 Total         Total Portugal  public  23.6 #> 16 Total         Total    Spain private 253.5 #> 17 Total         Total    Spain  public   9.2 term_labels <- output_term_labels(out) term_labels #>  [1] \"(Intercept)\" \"geo\"         \"geo\"         \"geo\"         \"sector2\"     #>  [6] \"sector2\"     \"eu:sector4\"  \"eu:sector4\"  \"eu:sector4\"  \"eu:sector4\"  #> [11] \"eu:sector4\"  \"eu:sector4\"  \"geo:sector2\" \"geo:sector2\" \"geo:sector2\" #> [16] \"geo:sector2\" \"geo:sector2\" cbind(term_labels, out) #>    term_labels    eu       sector4      geo sector2 value #> 1  (Intercept) Total         Total    Total   Total 462.3 #> 2          geo Total         Total  Iceland   Total  37.1 #> 3          geo Total         Total Portugal   Total 162.5 #> 4          geo Total         Total    Spain   Total 262.7 #> 5      sector2 Total         Total    Total private 429.5 #> 6      sector2 Total         Total    Total  public  32.8 #> 7   eu:sector4    EU   Agriculture    Total   Total 240.2 #> 8   eu:sector4    EU Entertainment    Total   Total 114.7 #> 9   eu:sector4    EU  Governmental    Total   Total  32.8 #> 10  eu:sector4    EU      Industry    Total   Total  37.5 #> 11  eu:sector4 nonEU Entertainment    Total   Total  16.8 #> 12  eu:sector4 nonEU      Industry    Total   Total  20.3 #> 13 geo:sector2 Total         Total  Iceland private  37.1 #> 14 geo:sector2 Total         Total Portugal private 138.9 #> 15 geo:sector2 Total         Total Portugal  public  23.6 #> 16 geo:sector2 Total         Total    Spain private 253.5 #> 17 geo:sector2 Total         Total    Spain  public   9.2"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/quantile_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted quantiles — quantile_weighted","title":"Weighted quantiles — quantile_weighted","text":"default method (type=2) corresponds weighted percentiles SAS.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/quantile_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted quantiles — quantile_weighted","text":"","code":"quantile_weighted(   x,   probs = (0:4)/4,   weights = rep(1, length(x)),   type = 2,   eps = 1e-09 )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/quantile_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted quantiles — quantile_weighted","text":"x Numeric vector probs Numeric vector probabilities weights Numeric vector weights length x type integer, 2 (default) 5. Similar types 2 5 quantile. eps Precision parameter used type=2 numerical inaccuracy accepted (see details)","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/quantile_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted quantiles — quantile_weighted","text":"Quantiles named numeric vector.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/quantile_weighted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted quantiles — quantile_weighted","text":"type=2, averaging used case equal probabilities. Equal probabilities (p[j]==probs[]) determined abs(1-p[j]/probs[])<eps p=cumsum(w)/sum(w) w=weights[order(x)]. zero length x, NAs returned. weights zero x's equal, NaNs returned except 0% 100% quantiles.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/quantile_weighted.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Weighted quantiles — quantile_weighted","text":"Type 2 similar type 5 DescTools::Quantile","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/quantile_weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weighted quantiles — quantile_weighted","text":"","code":"x <- rnorm(27)/5 + 1:27 w <- (1:27)/27  quantile_weighted(x, (0:5)/5, weights = w) #>        0%       20%       40%       60%       80%      100%  #>  1.047919 12.014960 16.871172 21.114838 24.870455 27.182283  quantile_weighted(x, (0:5)/5, weights = w, type = 5) #>        0%       20%       40%       60%       80%      100%  #>  1.047919 12.279096 17.356901 21.342948 24.513734 27.182283   quantile_weighted(x) - quantile(x, type = 2) #>   0%  25%  50%  75% 100%  #>    0    0    0    0    0  quantile_weighted(x, type = 5) - quantile(x, type = 5) #>   0%  25%  50%  75% 100%  #>    0    0    0    0    0"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/sosialFiktiv.html","id":null,"dir":"Reference","previous_headings":"","what":"Fictitious datasets returned by SSBtoolsData() — sosialFiktiv","title":"Fictitious datasets returned by SSBtoolsData() — sosialFiktiv","text":"comprehensive dataset, sosialFiktiv, contains three dimensions. first dimension 'region' grouped two ways, 'fylke' 'kostragr'. two 'hovedint' 'mnd'. 'mnd2' two three categories 'mnd' merged. datasets (z1, z1w, z2, z2w, z3, z3w, z3wb) smaller subdatasets. Datasets marked 'w' unstacked several variables holding counts.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/substitute_formula_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace variables in formula with sum of other variables — substitute_formula_vars","title":"Replace variables in formula with sum of other variables — substitute_formula_vars","text":"Replace variables formula sum variables","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/substitute_formula_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace variables in formula with sum of other variables — substitute_formula_vars","text":"","code":"substitute_formula_vars(   f,   replacements,   simplify = FALSE,   env = parent.frame() )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/substitute_formula_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace variables in formula with sum of other variables — substitute_formula_vars","text":"f model formula. replacements named list. names replacements must correspond variables f. element replacements must character vector consisting variables wish replace. simplify Logical, default FALSE. Determines whether formula expanded simplified output . env environment output formula.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/substitute_formula_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace variables in formula with sum of other variables — substitute_formula_vars","text":"model formula","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/substitute_formula_vars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Replace variables in formula with sum of other variables — substitute_formula_vars","text":"Daniel Lupp Øyvind Langsrud","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/substitute_formula_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace variables in formula with sum of other variables — substitute_formula_vars","text":"","code":"f <- ~b + a*c  + b:d substitute_formula_vars(f, list(a = c(\"hello\", \"world\", \"b\"),                                  b = c(\"Q1\", \"Q2\"))) #> ~(Q1 + Q2) + (hello + world + b) * c + (Q1 + Q2):d #> <environment: 0x5583c2a55708>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/table_all_integers.html","id":null,"dir":"Reference","previous_headings":"","what":"Table all integers from 1 to n — table_all_integers","title":"Table all integers from 1 to n — table_all_integers","text":"Table integers 1 n","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/table_all_integers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table all integers from 1 to n — table_all_integers","text":"","code":"table_all_integers(x, n)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/table_all_integers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table all integers from 1 to n — table_all_integers","text":"x vector integers. n maximum integer value.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/table_all_integers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table all integers from 1 to n — table_all_integers","text":"1D array class \"table\" representing frequency integer 1 n.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/table_all_integers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table all integers from 1 to n — table_all_integers","text":"","code":"table_all_integers(c(2, 3, 5, 3, 5, 3), 7) #>  #> 1 2 3 4 5 6 7  #> 0 1 3 0 2 0 0"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/tables_by_formulas.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabular Statistics Based on Formulas — tables_by_formulas","title":"Tabular Statistics Based on Formulas — tables_by_formulas","text":"function acts overlay functions produce tabular statistics interface utilizing ModelMatrix() function formula parameter. table (individual statistic) defined formula. output single data.frame contains results tables.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/tables_by_formulas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabular Statistics Based on Formulas — tables_by_formulas","text":"","code":"tables_by_formulas(   data,   table_fun,   ...,   table_formulas,   substitute_vars = NULL,   auto_collapse = TRUE,   collapse_vars = NULL,   total = \"Total\",   hierarchical_extend0 = TRUE,   term_labels = FALSE )"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/tables_by_formulas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabular Statistics Based on Formulas — tables_by_formulas","text":"data input data processed table_fun. table_fun table-producing function used. ... Additional arguments passed table_fun. table_formulas named list formulas, entry defines specific table. substitute_vars Allows formulas table_formulas written simplified way. substitute_vars specified, final formulas generated using substitute_formula_vars() substitute_vars input. auto_collapse Logical. TRUE, variables collapsed using total_collapse() variables parameter according substitute_vars. collapse_vars specified, total_collapse() called collapse_vars variables parameter, call triggered auto_collapse parameter. total string used name totals. Passed table_fun total_collapse(). hierarchical_extend0 Controls automatic hierarchy generation Extend0(). See \"Details\" information. term_labels Logical. TRUE, term_labels column (constructed output_term_labels()) included first column output.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/tables_by_formulas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabular Statistics Based on Formulas — tables_by_formulas","text":"single data.frame containing results tables defined table_formulas.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/tables_by_formulas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tabular Statistics Based on Formulas — tables_by_formulas","text":"ensure full control generated output variables, table_fun called avoid_hierarchical avoidHierarchical set TRUE. Desired variables output achieved using substitute_vars, auto_collapse, collapse_vars. table_fun automatically uses Extend0(), parameter hierarchical_extend0 specifies hierarchical parameter Extend0() via Extend0fromModelMatrixInput(). hierarchical_extend0 TRUE, hierarchies generated automatically. default, set TRUE, preventing excessive data extension aligning default behavior Formula2ModelMatrix(), avoidHierarchical = FALSE. attribute table_formulas added formula table_fun() called. attribute contains version table_formulas applying substitute_vars. allows special use function table_fun(). Note: use total_collapse internally allows handling variable names present data. ensures flexibility modifying table_formulas parameter.","code":""},{"path":[]},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/tables_by_formulas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabular Statistics Based on Formulas — tables_by_formulas","text":"","code":"tables_by_formulas(SSBtoolsData(\"magnitude1\"),                    table_fun = model_aggregate,                     table_formulas = list(table_1 = ~region * sector2,                                           table_2 = ~region1:sector4 - 1,                                           table_3 = ~region + sector4 - 1),                     substitute_vars = list(region = c(\"geo\", \"eu\"), region1 = \"eu\"),                     collapse_vars = list(sector = c(\"sector2\", \"sector4\")),                     sum_vars = \"value\",                     total = \"T\",                    term_labels = TRUE) #> [pre_aggregate 20*6->10*5] [ModelMatrix] [crossprod] [cbind] #>    term_labels   region        sector value table_1 table_2 table_3 #> 1  (Intercept)        T             T 462.3    TRUE   FALSE   FALSE #> 2          geo  Iceland             T  37.1    TRUE   FALSE    TRUE #> 3          geo Portugal             T 162.5    TRUE   FALSE    TRUE #> 4          geo    Spain             T 262.7    TRUE   FALSE    TRUE #> 5           eu       EU             T 425.2    TRUE   FALSE    TRUE #> 6           eu    nonEU             T  37.1    TRUE   FALSE    TRUE #> 7      sector2        T       private 429.5    TRUE   FALSE   FALSE #> 8      sector2        T        public  32.8    TRUE   FALSE   FALSE #> 9      sector4        T   Agriculture 240.2   FALSE   FALSE    TRUE #> 10     sector4        T Entertainment 131.5   FALSE   FALSE    TRUE #> 11     sector4        T  Governmental  32.8   FALSE   FALSE    TRUE #> 12     sector4        T      Industry  57.8   FALSE   FALSE    TRUE #> 13 geo:sector2  Iceland       private  37.1    TRUE   FALSE   FALSE #> 14 geo:sector2 Portugal       private 138.9    TRUE   FALSE   FALSE #> 15 geo:sector2 Portugal        public  23.6    TRUE   FALSE   FALSE #> 16 geo:sector2    Spain       private 253.5    TRUE   FALSE   FALSE #> 17 geo:sector2    Spain        public   9.2    TRUE   FALSE   FALSE #> 18  eu:sector2       EU       private 392.4    TRUE   FALSE   FALSE #> 19  eu:sector2       EU        public  32.8    TRUE   FALSE   FALSE #> 20  eu:sector2    nonEU       private  37.1    TRUE   FALSE   FALSE #> 21  eu:sector4       EU   Agriculture 240.2   FALSE    TRUE   FALSE #> 22  eu:sector4       EU Entertainment 114.7   FALSE    TRUE   FALSE #> 23  eu:sector4       EU  Governmental  32.8   FALSE    TRUE   FALSE #> 24  eu:sector4       EU      Industry  37.5   FALSE    TRUE   FALSE #> 25  eu:sector4    nonEU Entertainment  16.8   FALSE    TRUE   FALSE #> 26  eu:sector4    nonEU      Industry  20.3   FALSE    TRUE   FALSE"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/total_collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse variables to single representation — total_collapse","title":"Collapse variables to single representation — total_collapse","text":"Simplify data frame collapsing specified variables, according location total codes, single vector consolidating groups variables new columns.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/total_collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse variables to single representation — total_collapse","text":"","code":"total_collapse(data, variables, total = \"Total\", include_names = NULL)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/total_collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse variables to single representation — total_collapse","text":"data data frame containing variables collapsed. variables vector variable names named list variable names. variables vector, specified variables data collapsed single character vector. variables named list, element list defines group variables consolidate new column. list name used new column name resulting data frame. total total code vector total codes use result. variables vector, total specifies code represent collapsed values. variables named list, total may contain one code per group. include_names character string NULL (default). variables vector, whether resulting output vector named depends whether include_names NULL . actual value include_names ignored case. variables named list, include_names specifies suffix append group name, creating one additional column per group. NULL, additional columns variable names included result.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/total_collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse variables to single representation — total_collapse","text":"character vector (variables vector) modified data frame (variables named list).","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/total_collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse variables to single representation — total_collapse","text":"","code":"# Creates data that can act as input magnitude1 <- SSBtoolsData(\"magnitude1\") a <- model_aggregate(magnitude1,                       formula = ~geo + eu + sector2 + sector4,                       sum_vars = \"value\",                       avoid_hierarchical = TRUE) #> [pre_aggregate 20*6->10*5] [ModelMatrix] [crossprod] [cbind] a #>         geo    eu sector2       sector4 value #> 1     Total Total   Total         Total 462.3 #> 2   Iceland Total   Total         Total  37.1 #> 3  Portugal Total   Total         Total 162.5 #> 4     Spain Total   Total         Total 262.7 #> 5     Total    EU   Total         Total 425.2 #> 6     Total nonEU   Total         Total  37.1 #> 7     Total Total private         Total 429.5 #> 8     Total Total  public         Total  32.8 #> 9     Total Total   Total   Agriculture 240.2 #> 10    Total Total   Total Entertainment 131.5 #> 11    Total Total   Total  Governmental  32.8 #> 12    Total Total   Total      Industry  57.8  b <- total_collapse(a, list(GEO = c(\"geo\", \"eu\"), SECTOR = c(\"sector2\", \"sector4\"))) b #>         GEO        SECTOR value #> 1     Total         Total 462.3 #> 2   Iceland         Total  37.1 #> 3  Portugal         Total 162.5 #> 4     Spain         Total 262.7 #> 5        EU         Total 425.2 #> 6     nonEU         Total  37.1 #> 7     Total       private 429.5 #> 8     Total        public  32.8 #> 9     Total   Agriculture 240.2 #> 10    Total Entertainment 131.5 #> 11    Total  Governmental  32.8 #> 12    Total      Industry  57.8  total_collapse(a, c(\"geo\", \"eu\")) #>  [1] \"Total\"    \"Iceland\"  \"Portugal\" \"Spain\"    \"EU\"       \"nonEU\"    #>  [7] \"Total\"    \"Total\"    \"Total\"    \"Total\"    \"Total\"    \"Total\"    total_collapse(a, c(\"sector2\", \"sector4\"))                                  #>  [1] \"Total\"         \"Total\"         \"Total\"         \"Total\"         #>  [5] \"Total\"         \"Total\"         \"private\"       \"public\"        #>  [9] \"Agriculture\"   \"Entertainment\" \"Governmental\"  \"Industry\"        # Similar examples with both `total` and `include_names` parameters aa <- a aa[1:2][aa[1:2] == \"Total\"] <- \"Europe\" aa[3:4][aa[3:4] == \"Total\"] <- \"\" aa #>         geo     eu sector2       sector4 value #> 1    Europe Europe                       462.3 #> 2   Iceland Europe                        37.1 #> 3  Portugal Europe                       162.5 #> 4     Spain Europe                       262.7 #> 5    Europe     EU                       425.2 #> 6    Europe  nonEU                        37.1 #> 7    Europe Europe private               429.5 #> 8    Europe Europe  public                32.8 #> 9    Europe Europe           Agriculture 240.2 #> 10   Europe Europe         Entertainment 131.5 #> 11   Europe Europe          Governmental  32.8 #> 12   Europe Europe              Industry  57.8  bb <- total_collapse(data = aa,                       variables = list(GEO = c(\"geo\", \"eu\"),                                        SECTOR = c(\"sector2\", \"sector4\")),                       total = c(\"Europe\", \"\"),                      include_names = \"_Vars\") bb #>         GEO GEO_Vars        SECTOR SECTOR_Vars value #> 1    Europe      geo                   sector2 462.3 #> 2   Iceland      geo                   sector2  37.1 #> 3  Portugal      geo                   sector2 162.5 #> 4     Spain      geo                   sector2 262.7 #> 5        EU       eu                   sector2 425.2 #> 6     nonEU       eu                   sector2  37.1 #> 7    Europe      geo       private     sector2 429.5 #> 8    Europe      geo        public     sector2  32.8 #> 9    Europe      geo   Agriculture     sector4 240.2 #> 10   Europe      geo Entertainment     sector4 131.5 #> 11   Europe      geo  Governmental     sector4  32.8 #> 12   Europe      geo      Industry     sector4  57.8  total_collapse(aa, c(\"geo\", \"eu\"), total = \"Europe\", include_names = \"_Vars\") #>        geo        geo        geo        geo         eu         eu        geo  #>   \"Europe\"  \"Iceland\" \"Portugal\"    \"Spain\"       \"EU\"    \"nonEU\"   \"Europe\"  #>        geo        geo        geo        geo        geo  #>   \"Europe\"   \"Europe\"   \"Europe\"   \"Europe\"   \"Europe\"  total_collapse(aa, c(\"sector2\", \"sector4\"), total = \"\", include_names = \"_Vars\")  #>         sector2         sector2         sector2         sector2         sector2  #>              \"\"              \"\"              \"\"              \"\"              \"\"  #>         sector2         sector2         sector2         sector4         sector4  #>              \"\"       \"private\"        \"public\"   \"Agriculture\" \"Entertainment\"  #>         sector4         sector4  #>  \"Governmental\"      \"Industry\"    # All four variables can be collapsed total_collapse(a,                 list(ALL = c(\"geo\", \"eu\", \"sector2\", \"sector4\")),                 include_names = \"_Vars\") #>              ALL ALL_Vars value #> 1          Total      geo 462.3 #> 2        Iceland      geo  37.1 #> 3       Portugal      geo 162.5 #> 4          Spain      geo 262.7 #> 5             EU       eu 425.2 #> 6          nonEU       eu  37.1 #> 7        private  sector2 429.5 #> 8         public  sector2  32.8 #> 9    Agriculture  sector4 240.2 #> 10 Entertainment  sector4 131.5 #> 11  Governmental  sector4  32.8 #> 12      Industry  sector4  57.8"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/unmatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform data frame with embedded matrices — unmatrix","title":"Transform data frame with embedded matrices — unmatrix","text":"Transform data frame embedded matrices","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/unmatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform data frame with embedded matrices — unmatrix","text":"","code":"unmatrix(data, sep = \"_\")"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/unmatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform data frame with embedded matrices — unmatrix","text":"data data frame sep character string used variable names generated.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/unmatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform data frame with embedded matrices — unmatrix","text":"data frame","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/unmatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform data frame with embedded matrices — unmatrix","text":"","code":"a <- aggregate(1:6, list(rep(1:3, 2)), range) b <- unmatrix(a)  a #>   Group.1 x.1 x.2 #> 1       1   1   4 #> 2       2   2   5 #> 3       3   3   6 b #>   Group.1 x_1 x_2 #> 1       1   1   4 #> 2       2   2   5 #> 3       3   3   6  dim(a) #> [1] 3 2 dim(b) #> [1] 3 3  names(a) #> [1] \"Group.1\" \"x\"       names(b) #> [1] \"Group.1\" \"x_1\"     \"x_2\"      class(a[, 2]) #> [1] \"matrix\" \"array\"  class(b[, 2]) #> [1] \"integer\""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/vars_to_hierarchies.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform hierarchies coded as Variables to ","title":"Transform hierarchies coded as Variables to ","text":"kind reverse operation hierarchies_as_vars","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/vars_to_hierarchies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform hierarchies coded as Variables to ","text":"","code":"vars_to_hierarchies(var_hierarchies)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/vars_to_hierarchies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform hierarchies coded as Variables to ","text":"var_hierarchies output hierarchies_as_vars","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/vars_to_hierarchies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform hierarchies coded as Variables to ","text":"List hierarchies","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/vars_to_hierarchies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform hierarchies coded as Variables to ","text":"","code":"a <- hierarchies_as_vars(list(f =         c(\"AB = A + B\", \"CD = C + D\", \"AC = A + C\", \"ABCD = AB + CD\"))) a #> $f #>   f f_level_1 f_level_2 f_level_3 #> 1 A        AB        AC      ABCD #> 2 B        AB      <NA>      ABCD #> 3 C        CD        AC      ABCD #> 4 D        CD      <NA>      ABCD #>   vars_to_hierarchies(a) #> $f #>    mapsFrom mapsTo sign level #> 1         A     AB    1     1 #> 2         B     AB    1     1 #> 3         C     CD    1     1 #> 4         D     CD    1     1 #> 5         A     AC    1     2 #> 6         C     AC    1     2 #> 7         A   ABCD    1     3 #> 8         B   ABCD    1     3 #> 9         C   ABCD    1     3 #> 10        D   ABCD    1     3 #>"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/zero_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for empty matrix columns (or rows) — zero_col","title":"Check for empty matrix columns (or rows) — zero_col","text":"generally, checks row/col sums sums absolute values equal target. value = 0, means entries zero. single_col() wrapper value = 1, often used check dummy columns/rows exactly one element 1.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/zero_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for empty matrix columns (or rows) — zero_col","text":"","code":"zero_col(x, rows = FALSE, value = 0)  single_col(..., value = 1)"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/zero_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for empty matrix columns (or rows) — zero_col","text":"x Numeric matrix. Sparse matrices Matrix package also supported. rows Logical; TRUE check rows, else columns. value Numeric target (default 0). ... Passed zero_col().","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/zero_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for empty matrix columns (or rows) — zero_col","text":"Logical vector.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/zero_col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for empty matrix columns (or rows) — zero_col","text":"Memory usage reduced applying abs() checks rows/columns whose total sum already target.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/reference/zero_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for empty matrix columns (or rows) — zero_col","text":"","code":"m <- matrix(c(   0,  0, 0, 0,    1, -1, 0, 0,   0,  0, 1, 0 ), nrow = 3, byrow = TRUE)  zero_col(m) #> [1] FALSE FALSE FALSE  TRUE zero_col(m, rows = TRUE) #> [1]  TRUE FALSE FALSE single_col(m) #> [1]  TRUE FALSE  TRUE FALSE single_col(m, rows = TRUE) #> [1] FALSE FALSE  TRUE"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-182","dir":"Changelog","previous_headings":"","what":"SSBtools 1.8.2","title":"SSBtools 1.8.2","text":"Previously internal , now exported use packages.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-181","dir":"Changelog","previous_headings":"","what":"SSBtools 1.8.1","title":"SSBtools 1.8.1","text":"CRAN release: 2025-08-18 Now handles negative values model matrix. Added new parameter auto_subSumAny optionally disable automatic switch singleton method. changes prepare GaussSuppression() use new algorithm linked tables. Now supports empty matrix input (0 columns /0 rows). Previously, columns column sum 0 treated contained zeros. Fast alternative base::anyDuplicated(), implemented similarly RowGroups().","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-180","dir":"Changelog","previous_headings":"","what":"SSBtools 1.8.0","title":"SSBtools 1.8.0","text":"CRAN release: 2025-06-19 allows certain cells suppressed non-suppressed together. change enables consistent linked-table algorithm, achieved using x input structured block-diagonal matrix. See also related new parameters: table_id auto_anySumNOTprimary. Part utility functions listed ?formula_utils. Extracts term labels right-hand side given R formula. New function output_term_labels(). New parameter term_labels tables_by_formulas(), used include term labels output.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-175","dir":"Changelog","previous_headings":"","what":"SSBtools 1.7.5","title":"SSBtools 1.7.5","text":"CRAN release: 2025-03-14 title description DESCRIPTION file updated avoid giving impression package strictly internal Statistics Norway. follow best practices R packages. Ensures SSBtools dependencies beyond standard R packages. Replaced stringr::str_split() base R alternatives WildcardGlobbingVector() HierarchicalWildcardGlobbing(). Previously, default value always used. change made now code reviewed part removing stringr dependency. See note ?NumSingleton details improvement elimination (4th character). previous attempt similar improvement implemented correctly, rare cases lead unnecessary secondary cells. now fixed. RbindAll() now correctly handles data frames 0 rows instead producing error. RbindAll() now also accepts NULL input. hexagon sticker logo now visible pkgdown website GitHub repository.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-170","dir":"Changelog","previous_headings":"","what":"SSBtools 1.7.0","title":"SSBtools 1.7.0","text":"CRAN release: 2025-02-04 package now documentation site https://statisticsnorway.github.io/ssb-ssbtools/. function acts overlay functions produce tabular statistics interface utilizing ModelMatrix() function formula parameter. table (individual statistic) defined formula. output single data.frame contains results tables. Previously, corresponding ModelMatrix() parameters (avoidHierarchical, inputInOutput, total) set via mm_args parameter. Old code remains functional. Input now explicitly coerced data frame using .data.frame() ensure consistent behavior. Set new parameter aggregate_pkg = \"data.table\" utilize possibility. Also note related new parameter aggregate_base_order. linked NAomit parameter Formula2ModelMatrix(), makes meaningful include NAs grouping variables. aggregate_na = TRUE, NAs grouping variables retained pre-aggregation. See updated documentation removeDuplicated parameter. Previously, duplicate columns removed. update improves speed, especially function called interface based ModelMatrix() uses hierarchies parameter together inputInOutput = FALSE. Also note related new parameter, printXdim, can used print information dimensional changes console. Duplicate variable names now handled. See new parameter when_overwritten. comment attribute added output data frame, containing names variables added. See new parameter add_comment. See new parameters drop_codes include_codes. combining formulas without intercept using \"+\" operator, now ensured resulting formula includes intercept. filter_by_variable() names_by_variable() functions filter list items retrieve names based variable. Extend0fromModelMatrixInput(), marked internal, specialized version Extend0() designed specifically work input ModelMatrix().","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-160","dir":"Changelog","previous_headings":"","what":"SSBtools 1.6.0","title":"SSBtools 1.6.0","text":"CRAN release: 2024-12-04 See new parameter autoNames details common -names. Also note new parameter autoLevel, default value (TRUE) ensures function behaves always . NAs ‘’ variable now allowed support common hierarchies, rows ‘’ == ‘’ also allowed. rows removed processing hierarchy, warning relevant (Codes removed due ‘’ == ‘’ ‘’ == NA). Output functions like get_klass() klassR package hier_create() sdcHierarchies package can now used directly input. Example usage: Hierarchies coded variables. Transform hierarchies coded variables “-” format. kind reverse operation hierarchies_as_vars(). Add variables dataset based hierarchies. Uses hierarchies_as_vars() transform hierarchies, followed mapping dataset. Find major contributions aggregates count contributors. Improved versions MaxContribution() Ncontributors() developed GaussSuppression package. Table integers 1 n Collapse variables single representation. Part utility functions listed ?formula_utils. improved version formula_include_hierarchies(), renamed clarity corrected produce intended output. “Empty terms” refer cases columns exist model matrix due NAomit. old method (viaSparseMatrix = FALSE) already handled correctly. Now allows 0 input rows hierarchical = FALSE. Now supports 0-length selections.","code":"a <- get_klass(classification = \"24\") b <- hier_create(root = \"Total\", nodes = LETTERS[1:5]) AutoHierarchies(list(tree = a, letter = b))"},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-155","dir":"Changelog","previous_headings":"","what":"SSBtools 1.5.5","title":"SSBtools 1.5.5","text":"CRAN release: 2024-10-21 New parameter named logical: TRUE, logical selection vector returned. FormulaSelection() now generic function, allowing methods input objects added.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-154","dir":"Changelog","previous_headings":"","what":"SSBtools 1.5.4","title":"SSBtools 1.5.4","text":"CRAN release: 2024-09-20 package description function documentations updated reference (Langsrud, 2024). Now data.table package listed Suggests can utilized two functions. See . function aggregates data specified grouping variables, using either base R data.table. Note parameter include_na: logical value indicating whether NA values grouping variables included aggregation. Default FALSE. used packages depending SSBtools. NAs grouping variables. parameter can used input ModelMatrix(). Must either \"base\" (default) \"data.table\" (improved speed). Thus, improved speed ModelMatrix(). Now, model matrix constructed single call Matrix::sparseMatrix() instead building transposed matrix rbind() based numerous Matrix::fac2sparse() calls. speed improvement can achieved setting new parameter, rowGroupsPackage, data.table. viaOrdinary = TRUE, model.matrix() sparse.model.matrix() called twice. long string problem solved, long formulas. technical changes documentation comply standards.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-152","dir":"Changelog","previous_headings":"","what":"SSBtools 1.5.2","title":"SSBtools 1.5.2","text":"CRAN release: 2024-05-16 package description updated reference (Langsrud, 2023). Previously, done via mm_args parameter. Old code works . See ?formula_utils Minor change Extend0() allow even advanced possibilities varGroups-attribute. happen parallel eliminations combined integer overflow. warning message: longer object length multiple shorter object length practice, rarely makes difference. previous behavior can ensured setting singletonMethod either \"anySumOld\" \"anySumNOTprimaryOld\". Now, quantile_weighted(x=c(0,2,0), weights = c(1,1,0)) correctly outputs 50% value 1. function originally created 2016 included internal packages Statistics Norway (SSB). Due widespread use, beneficial include CRAN package.","code":""},{"path":"https://statisticsnorway.github.io/ssb-ssbtools/news/index.html","id":"ssbtools-150","dir":"Changelog","previous_headings":"","what":"SSBtools 1.5.0","title":"SSBtools 1.5.0","text":"CRAN release: 2024-01-08 Last version news","code":""}]
