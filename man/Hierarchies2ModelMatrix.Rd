% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Hierarchies2ModelMatrix.R
\name{Hierarchies2ModelMatrix}
\alias{Hierarchies2ModelMatrix}
\title{Model matrix representing crossed hierarchies}
\usage{
Hierarchies2ModelMatrix(
  data,
  hierarchies,
  inputInOutput = TRUE,
  crossTable = FALSE,
  total = "Total",
  hierarchyVarNames = c(mapsFrom = "mapsFrom", mapsTo = "mapsTo", sign = "sign", level =
    "level"),
  unionComplement = FALSE,
  reOrder = TRUE,
  select = NULL,
  removeEmpty = FALSE,
  selectionByMultiplicationLimit = 10^7,
  makeColnames = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{data}{Matrix or data frame with data containing codes of relevant variables}

\item{hierarchies}{List of hierarchies, which can be converted by \code{\link{AutoHierarchies}}.
Thus, the variables can also be coded by \code{"rowFactor"} or \code{""}, which correspond to using the categories in the data.}

\item{inputInOutput}{Logical vector (possibly recycled) for each element of hierarchies.
TRUE means that codes from input are included in output. Values corresponding to \code{"rowFactor"} or \code{""} are ignored.
Also see note.}

\item{crossTable}{Cross table in output when TRUE}

\item{total}{See \code{\link{AutoHierarchies}}}

\item{hierarchyVarNames}{Variable names in the hierarchy tables as in \code{\link{HierarchyFix}}}

\item{unionComplement}{Logical vector (possibly recycled) for each element of hierarchies.
When TRUE, sign means union and complement instead of addition or subtraction.
Values corresponding to \code{"rowFactor"} and \code{"colFactor"} are ignored.}

\item{reOrder}{When TRUE (default) output codes are ordered in a way similar to a usual model matrix ordering.}

\item{select}{Data frame specifying variable combinations for output
or a named list specifying code selections for each variable (see details).}

\item{removeEmpty}{When TRUE and when \code{select} is not a data frame, empty columns (only zeros) are not included in output.}

\item{selectionByMultiplicationLimit}{With non-NULL \code{select} and when the number of elements in the model matrix exceeds this limit,
the computation is performed by a slower but more memory efficient algorithm.}

\item{makeColnames}{Colnames included when TRUE (default).}

\item{verbose}{Whether to print information during calculations. FALSE is default.}

\item{...}{Extra unused parameters}
}
\value{
A sparse model matrix or a list of two elements (model matrix and cross table)
}
\description{
Make a model matrix, x, that corresponds to data and represents all hierarchies crossed.
This means that aggregates corresponding to numerical variables can be computed as
\code{t(x) \%*\% y}, where  \code{y} is a matrix with one column for each numerical variable.
}
\details{
This function makes use of \code{\link{AutoHierarchies}}
and \code{\link{HierarchyCompute}}  via  \code{\link{HierarchyComputeDummy}}.
Since the dummy matrix is transposed in comparison to \code{HierarchyCompute}, the parameter \code{rowSelect} is renamed to \code{select}
and  \code{makeRownames} is renamed to \code{makeColnames}.

The select parameter as a list can be partially specified in the sense that not all hierarchy names have to be included.
The parameter \code{inputInOutput} will only apply to hierarchies that are not in the \code{select} list (see note).
}
\note{
The \code{select} as a list is run via a special coding of the \code{inputInOutput} parameter.
This parameter is converted into a list (\code{as.list}) and \code{select} elements are inserted into this list.
This is also an additional option for users of the function.
}
\examples{
# Create some input
z <- SSBtoolsData("sprt_emp_withEU")
ageHier <- SSBtoolsData("sprt_emp_ageHier")
geoDimList <- FindDimLists(z[, c("geo", "eu")], total = "Europe")[[1]]


# First example has list output
Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), inputInOutput = FALSE, 
                        crossTable = TRUE)


m1 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), inputInOutput = FALSE)
m2 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList))
m3 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList, year = ""),
                              inputInOutput = FALSE)
m4 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList, year = "allYears"), 
                              inputInOutput = c(FALSE, FALSE, TRUE))

# Illustrate the effect of unionComplement, geoHier2 as in the examples of HierarchyCompute
geoHier2 <- rbind(data.frame(mapsFrom = c("EU", "Spain"), mapsTo = "EUandSpain", sign = 1), 
                  SSBtoolsData("sprt_emp_geoHier")[, -4])
m5 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoHier2, year = "allYears"), 
                              inputInOutput = FALSE)  # Spain is counted twice
m6 <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoHier2, year = "allYears"), 
                              inputInOutput = FALSE, unionComplement = TRUE)


# Compute aggregates
ths_per <- as.matrix(z[, "ths_per", drop = FALSE])  # matrix with the values to be aggregated
Matrix::t(m1) \%*\% ths_per  # Matrix::crossprod(m1, ths_per) is equivalent and faster
Matrix::t(m2) \%*\% ths_per
Matrix::t(m3) \%*\% ths_per
Matrix::t(m4) \%*\% ths_per
Matrix::t(m5) \%*\% ths_per
Matrix::t(m6) \%*\% ths_per


# Example using the select parameter as a data frame
select <- data.frame(age = c("Y15-64", "Y15-29", "Y30-64"), geo = c("EU", "nonEU", "Spain"))
m2a <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), select = select)

# Same result by slower alternative
m2B <- Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), crossTable = TRUE)
m2b <- m2B$modelMatrix[, Match(select, m2B$crossTable), drop = FALSE]
Matrix::t(m2b) \%*\% ths_per

# Examples using the select parameter as a list
Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), 
       inputInOutput = FALSE, 
       select = list(geo = c("nonEU", "Portugal")))
Hierarchies2ModelMatrix(z, list(age = ageHier, geo = geoDimList), 
       select = list(geo = c("nonEU", "Portugal"), age = c("Y15-64", "Y15-29")))

}
\seealso{
\code{\link{ModelMatrix}}, \code{\link{HierarchiesAndFormula2ModelMatrix}}
}
\author{
Ã˜yvind Langsrud
}
